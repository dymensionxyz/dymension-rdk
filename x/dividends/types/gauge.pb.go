// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dividends/gauge.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Gauge is an object that stores and distributes yields to recipients who
// satisfy certain conditions.
type Gauge struct {
	// id is the unique ID of a gauge
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// address is a bech32-formatted address that holds the tokens to allocate
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// query_condition is *where* the gauge rewards are distributed to
	QueryCondition *QueryCondition `protobuf:"bytes,3,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition,omitempty"`
	// vesting_condition is *when* the gauge rewards are distributed to
	VestingCondition *VestingCondition `protobuf:"bytes,4,opt,name=vesting_condition,json=vestingCondition,proto3" json:"vesting_condition,omitempty"`
}

func (m *Gauge) Reset()         { *m = Gauge{} }
func (m *Gauge) String() string { return proto.CompactTextString(m) }
func (*Gauge) ProtoMessage()    {}
func (*Gauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{0}
}
func (m *Gauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gauge.Merge(m, src)
}
func (m *Gauge) XXX_Size() int {
	return m.Size()
}
func (m *Gauge) XXX_DiscardUnknown() {
	xxx_messageInfo_Gauge.DiscardUnknown(m)
}

var xxx_messageInfo_Gauge proto.InternalMessageInfo

func (m *Gauge) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Gauge) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Gauge) GetQueryCondition() *QueryCondition {
	if m != nil {
		return m.QueryCondition
	}
	return nil
}

func (m *Gauge) GetVestingCondition() *VestingCondition {
	if m != nil {
		return m.VestingCondition
	}
	return nil
}

type QueryCondition struct {
	// Types that are valid to be assigned to Condition:
	//	*QueryCondition_Stakers
	//	*QueryCondition_Funds
	Condition isQueryCondition_Condition `protobuf_oneof:"condition"`
}

func (m *QueryCondition) Reset()         { *m = QueryCondition{} }
func (m *QueryCondition) String() string { return proto.CompactTextString(m) }
func (*QueryCondition) ProtoMessage()    {}
func (*QueryCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{1}
}
func (m *QueryCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCondition.Merge(m, src)
}
func (m *QueryCondition) XXX_Size() int {
	return m.Size()
}
func (m *QueryCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCondition.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCondition proto.InternalMessageInfo

type isQueryCondition_Condition interface {
	isQueryCondition_Condition()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryCondition_Stakers struct {
	Stakers *QueryConditionStakers `protobuf:"bytes,1,opt,name=stakers,proto3,oneof" json:"stakers,omitempty"`
}
type QueryCondition_Funds struct {
	Funds *QueryConditionFunds `protobuf:"bytes,2,opt,name=funds,proto3,oneof" json:"funds,omitempty"`
}

func (*QueryCondition_Stakers) isQueryCondition_Condition() {}
func (*QueryCondition_Funds) isQueryCondition_Condition()   {}

func (m *QueryCondition) GetCondition() isQueryCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *QueryCondition) GetStakers() *QueryConditionStakers {
	if x, ok := m.GetCondition().(*QueryCondition_Stakers); ok {
		return x.Stakers
	}
	return nil
}

func (m *QueryCondition) GetFunds() *QueryConditionFunds {
	if x, ok := m.GetCondition().(*QueryCondition_Funds); ok {
		return x.Funds
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryCondition) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryCondition_Stakers)(nil),
		(*QueryCondition_Funds)(nil),
	}
}

type VestingCondition struct {
	// Types that are valid to be assigned to Condition:
	//	*VestingCondition_Immediate
	//	*VestingCondition_Epoch
	Condition isVestingCondition_Condition `protobuf_oneof:"condition"`
}

func (m *VestingCondition) Reset()         { *m = VestingCondition{} }
func (m *VestingCondition) String() string { return proto.CompactTextString(m) }
func (*VestingCondition) ProtoMessage()    {}
func (*VestingCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{2}
}
func (m *VestingCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingCondition.Merge(m, src)
}
func (m *VestingCondition) XXX_Size() int {
	return m.Size()
}
func (m *VestingCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingCondition.DiscardUnknown(m)
}

var xxx_messageInfo_VestingCondition proto.InternalMessageInfo

type isVestingCondition_Condition interface {
	isVestingCondition_Condition()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VestingCondition_Immediate struct {
	Immediate *VestingConditionImmediate `protobuf:"bytes,1,opt,name=immediate,proto3,oneof" json:"immediate,omitempty"`
}
type VestingCondition_Epoch struct {
	Epoch *VestingConditionEpoch `protobuf:"bytes,2,opt,name=epoch,proto3,oneof" json:"epoch,omitempty"`
}

func (*VestingCondition_Immediate) isVestingCondition_Condition() {}
func (*VestingCondition_Epoch) isVestingCondition_Condition()     {}

func (m *VestingCondition) GetCondition() isVestingCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *VestingCondition) GetImmediate() *VestingConditionImmediate {
	if x, ok := m.GetCondition().(*VestingCondition_Immediate); ok {
		return x.Immediate
	}
	return nil
}

func (m *VestingCondition) GetEpoch() *VestingConditionEpoch {
	if x, ok := m.GetCondition().(*VestingCondition_Epoch); ok {
		return x.Epoch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VestingCondition) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VestingCondition_Immediate)(nil),
		(*VestingCondition_Epoch)(nil),
	}
}

// QueryConditionStakers queries the stakers
type QueryConditionStakers struct {
}

func (m *QueryConditionStakers) Reset()         { *m = QueryConditionStakers{} }
func (m *QueryConditionStakers) String() string { return proto.CompactTextString(m) }
func (*QueryConditionStakers) ProtoMessage()    {}
func (*QueryConditionStakers) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{3}
}
func (m *QueryConditionStakers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConditionStakers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConditionStakers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConditionStakers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConditionStakers.Merge(m, src)
}
func (m *QueryConditionStakers) XXX_Size() int {
	return m.Size()
}
func (m *QueryConditionStakers) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConditionStakers.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConditionStakers proto.InternalMessageInfo

// QueryConditionFunds queries the users with funds above a certain threshold
type QueryConditionFunds struct {
	Threshold github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=threshold,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"threshold"`
}

func (m *QueryConditionFunds) Reset()         { *m = QueryConditionFunds{} }
func (m *QueryConditionFunds) String() string { return proto.CompactTextString(m) }
func (*QueryConditionFunds) ProtoMessage()    {}
func (*QueryConditionFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{4}
}
func (m *QueryConditionFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConditionFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConditionFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConditionFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConditionFunds.Merge(m, src)
}
func (m *QueryConditionFunds) XXX_Size() int {
	return m.Size()
}
func (m *QueryConditionFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConditionFunds.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConditionFunds proto.InternalMessageInfo

func (m *QueryConditionFunds) GetThreshold() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Threshold
	}
	return nil
}

// VestingConditionImmediate is a vesting condition that distributes rewards
// immediately. This gauge is perpetual by default.
// Non-perpetual gauges distribute their tokens equally per epoch while the
// gauge is in the active period. Perpetual gauges distribute all their tokens
// at a single time and only distribute their tokens again once the gauge is
// refilled, Intended for use with incentives that get refilled daily.
type VestingConditionImmediate struct {
}

func (m *VestingConditionImmediate) Reset()         { *m = VestingConditionImmediate{} }
func (m *VestingConditionImmediate) String() string { return proto.CompactTextString(m) }
func (*VestingConditionImmediate) ProtoMessage()    {}
func (*VestingConditionImmediate) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{5}
}
func (m *VestingConditionImmediate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingConditionImmediate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingConditionImmediate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingConditionImmediate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingConditionImmediate.Merge(m, src)
}
func (m *VestingConditionImmediate) XXX_Size() int {
	return m.Size()
}
func (m *VestingConditionImmediate) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingConditionImmediate.DiscardUnknown(m)
}

var xxx_messageInfo_VestingConditionImmediate proto.InternalMessageInfo

// VestingConditionEpoch is a vesting condition that distributes rewards over
// epochs
type VestingConditionEpoch struct {
	// num_epochs_paid_over is the number of total epochs distribution will be
	// completed over
	NumEpochsPaidOver uint64 `protobuf:"varint,1,opt,name=num_epochs_paid_over,json=numEpochsPaidOver,proto3" json:"num_epochs_paid_over,omitempty"`
	// filled_epochs is the number of epochs distribution has been completed on
	// already
	FilledEpochs uint64 `protobuf:"varint,2,opt,name=filled_epochs,json=filledEpochs,proto3" json:"filled_epochs,omitempty"`
}

func (m *VestingConditionEpoch) Reset()         { *m = VestingConditionEpoch{} }
func (m *VestingConditionEpoch) String() string { return proto.CompactTextString(m) }
func (*VestingConditionEpoch) ProtoMessage()    {}
func (*VestingConditionEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{6}
}
func (m *VestingConditionEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingConditionEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingConditionEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingConditionEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingConditionEpoch.Merge(m, src)
}
func (m *VestingConditionEpoch) XXX_Size() int {
	return m.Size()
}
func (m *VestingConditionEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingConditionEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_VestingConditionEpoch proto.InternalMessageInfo

func (m *VestingConditionEpoch) GetNumEpochsPaidOver() uint64 {
	if m != nil {
		return m.NumEpochsPaidOver
	}
	return 0
}

func (m *VestingConditionEpoch) GetFilledEpochs() uint64 {
	if m != nil {
		return m.FilledEpochs
	}
	return 0
}

func init() {
	proto.RegisterType((*Gauge)(nil), "rollapp.dividends.Gauge")
	proto.RegisterType((*QueryCondition)(nil), "rollapp.dividends.QueryCondition")
	proto.RegisterType((*VestingCondition)(nil), "rollapp.dividends.VestingCondition")
	proto.RegisterType((*QueryConditionStakers)(nil), "rollapp.dividends.QueryConditionStakers")
	proto.RegisterType((*QueryConditionFunds)(nil), "rollapp.dividends.QueryConditionFunds")
	proto.RegisterType((*VestingConditionImmediate)(nil), "rollapp.dividends.VestingConditionImmediate")
	proto.RegisterType((*VestingConditionEpoch)(nil), "rollapp.dividends.VestingConditionEpoch")
}

func init() { proto.RegisterFile("dividends/gauge.proto", fileDescriptor_904d8195b7413b1f) }

var fileDescriptor_904d8195b7413b1f = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xb5, 0xd3, 0xe4, 0xeb, 0x97, 0x09, 0x84, 0x66, 0x68, 0x44, 0x5a, 0x24, 0x27, 0xb8, 0x12,
	0xf2, 0x82, 0x7a, 0x68, 0x58, 0xb0, 0x43, 0x28, 0xe5, 0x27, 0x20, 0x24, 0x5a, 0x23, 0xb1, 0x60,
	0x13, 0x4d, 0x32, 0x13, 0x67, 0x14, 0xdb, 0xe3, 0x7a, 0xc6, 0x56, 0xc3, 0x8a, 0x47, 0xe0, 0x1d,
	0xd8, 0xb1, 0xe1, 0x35, 0xba, 0xa3, 0x4b, 0x56, 0x80, 0x92, 0x17, 0x41, 0x1e, 0x3b, 0x4d, 0x13,
	0x82, 0xda, 0x95, 0x7d, 0xe7, 0x9e, 0x73, 0x7c, 0xce, 0xd5, 0x1d, 0x83, 0x3a, 0x61, 0x09, 0x23,
	0x34, 0x20, 0x02, 0xb9, 0x38, 0x76, 0xa9, 0x1d, 0x46, 0x5c, 0x72, 0x58, 0x8b, 0xb8, 0xe7, 0xe1,
	0x30, 0xb4, 0x2f, 0xda, 0xbb, 0xdb, 0x2e, 0x77, 0xb9, 0xea, 0xa2, 0xf4, 0x2d, 0x03, 0xee, 0x1a,
	0x2e, 0xe7, 0xae, 0x47, 0x91, 0xaa, 0xfa, 0xf1, 0x10, 0x91, 0x38, 0xc2, 0x92, 0xf1, 0x20, 0xef,
	0x37, 0x57, 0xfb, 0x92, 0xf9, 0x54, 0x48, 0xec, 0x87, 0x73, 0x81, 0x01, 0x17, 0x3e, 0x17, 0xa8,
	0x8f, 0x05, 0x45, 0xc9, 0x41, 0x9f, 0x4a, 0x7c, 0x80, 0x06, 0x9c, 0xe5, 0x02, 0xe6, 0x77, 0x1d,
	0x94, 0x5e, 0xa6, 0xce, 0x60, 0x15, 0x14, 0x18, 0x69, 0xe8, 0x2d, 0xdd, 0x2a, 0x3a, 0x05, 0x46,
	0x60, 0x03, 0x6c, 0x62, 0x42, 0x22, 0x2a, 0x44, 0xa3, 0xd0, 0xd2, 0xad, 0xb2, 0x33, 0x2f, 0xe1,
	0x6b, 0x70, 0xeb, 0x24, 0xa6, 0xd1, 0xa4, 0x37, 0xe0, 0x01, 0x61, 0xa9, 0x9b, 0xc6, 0x46, 0x4b,
	0xb7, 0x2a, 0xed, 0x7b, 0xf6, 0x5f, 0xb9, 0xec, 0xe3, 0x14, 0x79, 0x38, 0x07, 0x3a, 0xd5, 0x93,
	0xa5, 0x1a, 0x1e, 0x81, 0x5a, 0x42, 0x85, 0x64, 0x81, 0x7b, 0x49, 0xad, 0xa8, 0xd4, 0xf6, 0xd6,
	0xa8, 0xbd, 0xcf, 0xb0, 0x0b, 0xbd, 0xad, 0x64, 0xe5, 0xc4, 0xfc, 0xa2, 0x83, 0xea, 0xf2, 0x47,
	0xe1, 0x33, 0xb0, 0x29, 0x24, 0x1e, 0xd3, 0x48, 0xa8, 0x7c, 0x95, 0xb6, 0x75, 0xa5, 0xd1, 0x77,
	0x19, 0xbe, 0xab, 0x39, 0x73, 0x2a, 0x7c, 0x02, 0x4a, 0xc3, 0x38, 0x20, 0xd9, 0x38, 0x2a, 0xed,
	0xfb, 0x57, 0x6a, 0xbc, 0x48, 0xd1, 0x5d, 0xcd, 0xc9, 0x68, 0x9d, 0x0a, 0x28, 0x5f, 0x44, 0x34,
	0xbf, 0xe9, 0x60, 0x6b, 0x35, 0x0c, 0x7c, 0x03, 0xca, 0xcc, 0xf7, 0x29, 0x61, 0x58, 0xd2, 0xdc,
	0xe9, 0x83, 0x6b, 0x0c, 0xe1, 0xd5, 0x9c, 0xd3, 0xd5, 0x9c, 0x85, 0x00, 0x7c, 0x0a, 0x4a, 0x34,
	0xe4, 0x83, 0x51, 0xee, 0xd7, 0xba, 0x86, 0xd2, 0xf3, 0x14, 0x9f, 0x3a, 0x56, 0xc4, 0x65, 0xc7,
	0x77, 0x40, 0x7d, 0xed, 0x88, 0xcc, 0x4f, 0x3a, 0xb8, 0xbd, 0x26, 0x38, 0x64, 0xa0, 0x2c, 0x47,
	0x11, 0x15, 0x23, 0xee, 0x91, 0xc6, 0xff, 0xad, 0x0d, 0xab, 0xd2, 0xde, 0xb1, 0xb3, 0x75, 0xb4,
	0xd3, 0x75, 0xb4, 0xf3, 0x75, 0xb4, 0x0f, 0x39, 0x0b, 0x3a, 0x0f, 0xcf, 0x7e, 0x36, 0xb5, 0xaf,
	0xbf, 0x9a, 0x96, 0xcb, 0xe4, 0x28, 0xee, 0xdb, 0x03, 0xee, 0xa3, 0x7c, 0x77, 0xb3, 0xc7, 0xbe,
	0x20, 0x63, 0x24, 0x27, 0x21, 0x15, 0x8a, 0x20, 0x9c, 0x85, 0xba, 0x79, 0x17, 0xec, 0xfc, 0x73,
	0x28, 0xa6, 0x0f, 0xea, 0x6b, 0x73, 0x42, 0x04, 0xb6, 0x83, 0xd8, 0xef, 0xa9, 0xac, 0xa2, 0x17,
	0x62, 0x46, 0x7a, 0x3c, 0xa1, 0x51, 0x7e, 0x07, 0x6a, 0x41, 0xec, 0x2b, 0x9c, 0x38, 0xc2, 0x8c,
	0xbc, 0x4d, 0x68, 0x04, 0xf7, 0xc0, 0xcd, 0x21, 0xf3, 0x3c, 0x4a, 0x72, 0x8e, 0x9a, 0x6c, 0xd1,
	0xb9, 0x91, 0x1d, 0x66, 0xe0, 0xce, 0xf1, 0xd9, 0xd4, 0xd0, 0xcf, 0xa7, 0x86, 0xfe, 0x7b, 0x6a,
	0xe8, 0x9f, 0x67, 0x86, 0x76, 0x3e, 0x33, 0xb4, 0x1f, 0x33, 0x43, 0xfb, 0xf0, 0xf8, 0x52, 0x34,
	0x32, 0xf1, 0x69, 0x20, 0x18, 0x0f, 0x4e, 0x27, 0x1f, 0x17, 0xc5, 0x7e, 0x44, 0xc6, 0xe8, 0x14,
	0x2d, 0x7e, 0x1a, 0x2a, 0x6f, 0xff, 0x3f, 0x75, 0x57, 0x1f, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xbe, 0x1b, 0x4d, 0xfc, 0x4e, 0x04, 0x00, 0x00,
}

func (m *Gauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VestingCondition != nil {
		{
			size, err := m.VestingCondition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.QueryCondition != nil {
		{
			size, err := m.QueryCondition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGauge(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Condition != nil {
		{
			size := m.Condition.Size()
			i -= size
			if _, err := m.Condition.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCondition_Stakers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCondition_Stakers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Stakers != nil {
		{
			size, err := m.Stakers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *QueryCondition_Funds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCondition_Funds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Funds != nil {
		{
			size, err := m.Funds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VestingCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Condition != nil {
		{
			size := m.Condition.Size()
			i -= size
			if _, err := m.Condition.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VestingCondition_Immediate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingCondition_Immediate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Immediate != nil {
		{
			size, err := m.Immediate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *VestingCondition_Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingCondition_Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *QueryConditionStakers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConditionStakers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConditionStakers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryConditionFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConditionFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConditionFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Threshold) > 0 {
		for iNdEx := len(m.Threshold) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Threshold[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	return len(dAtA) - i, nil
}

func (m *VestingConditionImmediate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingConditionImmediate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingConditionImmediate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VestingConditionEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingConditionEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingConditionEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FilledEpochs != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.FilledEpochs))
		i--
		dAtA[i] = 0x10
	}
	if m.NumEpochsPaidOver != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.NumEpochsPaidOver))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGauge(dAtA []byte, offset int, v uint64) int {
	offset -= sovGauge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Gauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGauge(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGauge(uint64(l))
	}
	if m.QueryCondition != nil {
		l = m.QueryCondition.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	if m.VestingCondition != nil {
		l = m.VestingCondition.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}

func (m *QueryCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Condition != nil {
		n += m.Condition.Size()
	}
	return n
}

func (m *QueryCondition_Stakers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stakers != nil {
		l = m.Stakers.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}
func (m *QueryCondition_Funds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Funds != nil {
		l = m.Funds.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}
func (m *VestingCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Condition != nil {
		n += m.Condition.Size()
	}
	return n
}

func (m *VestingCondition_Immediate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Immediate != nil {
		l = m.Immediate.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}
func (m *VestingCondition_Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}
func (m *QueryConditionStakers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryConditionFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Threshold) > 0 {
		for _, e := range m.Threshold {
			l = e.Size()
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	return n
}

func (m *VestingConditionImmediate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VestingConditionEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumEpochsPaidOver != 0 {
		n += 1 + sovGauge(uint64(m.NumEpochsPaidOver))
	}
	if m.FilledEpochs != 0 {
		n += 1 + sovGauge(uint64(m.FilledEpochs))
	}
	return n
}

func sovGauge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGauge(x uint64) (n int) {
	return sovGauge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Gauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryCondition == nil {
				m.QueryCondition = &QueryCondition{}
			}
			if err := m.QueryCondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VestingCondition == nil {
				m.VestingCondition = &VestingCondition{}
			}
			if err := m.VestingCondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryConditionStakers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &QueryCondition_Stakers{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryConditionFunds{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &QueryCondition_Funds{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Immediate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VestingConditionImmediate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &VestingCondition_Immediate{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VestingConditionEpoch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &VestingCondition_Epoch{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConditionStakers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConditionStakers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConditionStakers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConditionFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConditionFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConditionFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threshold = append(m.Threshold, types.Coin{})
			if err := m.Threshold[len(m.Threshold)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingConditionImmediate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingConditionImmediate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingConditionImmediate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingConditionEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingConditionEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingConditionEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochsPaidOver", wireType)
			}
			m.NumEpochsPaidOver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochsPaidOver |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledEpochs", wireType)
			}
			m.FilledEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilledEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGauge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGauge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGauge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGauge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGauge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGauge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGauge = fmt.Errorf("proto: unexpected end of group")
)
