// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dividends/gauge.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VestingFrequency int32

const (
	VestingFrequency_VESTING_FREQUENCY_UNSPECIFIED VestingFrequency = 0
	VestingFrequency_VESTING_FREQUENCY_BLOCK       VestingFrequency = 1
	VestingFrequency_VESTING_FREQUENCY_EPOCH       VestingFrequency = 2
)

var VestingFrequency_name = map[int32]string{
	0: "VESTING_FREQUENCY_UNSPECIFIED",
	1: "VESTING_FREQUENCY_BLOCK",
	2: "VESTING_FREQUENCY_EPOCH",
}

var VestingFrequency_value = map[string]int32{
	"VESTING_FREQUENCY_UNSPECIFIED": 0,
	"VESTING_FREQUENCY_BLOCK":       1,
	"VESTING_FREQUENCY_EPOCH":       2,
}

func (x VestingFrequency) String() string {
	return proto.EnumName(VestingFrequency_name, int32(x))
}

func (VestingFrequency) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{0}
}

// Gauge is an object that stores and distributes yields to recipients who
// satisfy certain conditions.
type Gauge struct {
	// id is the unique ID of a gauge
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// address is a bech32-formatted address that holds the tokens to allocate
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// query_condition is *where* the gauge rewards are distributed to
	QueryCondition *QueryCondition `protobuf:"bytes,3,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition,omitempty"`
	// vesting_condition is *how long* the gauge rewards are distributed to
	VestingCondition *VestingCondition `protobuf:"bytes,4,opt,name=vesting_condition,json=vestingCondition,proto3" json:"vesting_condition,omitempty"`
	// vesting_condition is *how frequent* the gauge rewards are distributed to
	VestingFrequency VestingFrequency `protobuf:"varint,5,opt,name=vesting_frequency,json=vestingFrequency,proto3,enum=rollapp.dividends.VestingFrequency" json:"vesting_frequency,omitempty"`
}

func (m *Gauge) Reset()         { *m = Gauge{} }
func (m *Gauge) String() string { return proto.CompactTextString(m) }
func (*Gauge) ProtoMessage()    {}
func (*Gauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{0}
}
func (m *Gauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gauge.Merge(m, src)
}
func (m *Gauge) XXX_Size() int {
	return m.Size()
}
func (m *Gauge) XXX_DiscardUnknown() {
	xxx_messageInfo_Gauge.DiscardUnknown(m)
}

var xxx_messageInfo_Gauge proto.InternalMessageInfo

func (m *Gauge) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Gauge) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Gauge) GetQueryCondition() *QueryCondition {
	if m != nil {
		return m.QueryCondition
	}
	return nil
}

func (m *Gauge) GetVestingCondition() *VestingCondition {
	if m != nil {
		return m.VestingCondition
	}
	return nil
}

func (m *Gauge) GetVestingFrequency() VestingFrequency {
	if m != nil {
		return m.VestingFrequency
	}
	return VestingFrequency_VESTING_FREQUENCY_UNSPECIFIED
}

type QueryCondition struct {
	// Types that are valid to be assigned to Condition:
	//	*QueryCondition_Stakers
	Condition isQueryCondition_Condition `protobuf_oneof:"condition"`
}

func (m *QueryCondition) Reset()         { *m = QueryCondition{} }
func (m *QueryCondition) String() string { return proto.CompactTextString(m) }
func (*QueryCondition) ProtoMessage()    {}
func (*QueryCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{1}
}
func (m *QueryCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCondition.Merge(m, src)
}
func (m *QueryCondition) XXX_Size() int {
	return m.Size()
}
func (m *QueryCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCondition.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCondition proto.InternalMessageInfo

type isQueryCondition_Condition interface {
	isQueryCondition_Condition()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryCondition_Stakers struct {
	Stakers *QueryConditionStakers `protobuf:"bytes,1,opt,name=stakers,proto3,oneof" json:"stakers,omitempty"`
}

func (*QueryCondition_Stakers) isQueryCondition_Condition() {}

func (m *QueryCondition) GetCondition() isQueryCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *QueryCondition) GetStakers() *QueryConditionStakers {
	if x, ok := m.GetCondition().(*QueryCondition_Stakers); ok {
		return x.Stakers
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryCondition) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryCondition_Stakers)(nil),
	}
}

type VestingCondition struct {
	// Types that are valid to be assigned to Condition:
	//	*VestingCondition_Perpetual
	//	*VestingCondition_Epoch
	Condition isVestingCondition_Condition `protobuf_oneof:"condition"`
}

func (m *VestingCondition) Reset()         { *m = VestingCondition{} }
func (m *VestingCondition) String() string { return proto.CompactTextString(m) }
func (*VestingCondition) ProtoMessage()    {}
func (*VestingCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{2}
}
func (m *VestingCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingCondition.Merge(m, src)
}
func (m *VestingCondition) XXX_Size() int {
	return m.Size()
}
func (m *VestingCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingCondition.DiscardUnknown(m)
}

var xxx_messageInfo_VestingCondition proto.InternalMessageInfo

type isVestingCondition_Condition interface {
	isVestingCondition_Condition()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VestingCondition_Perpetual struct {
	Perpetual *VestingConditionPerpetual `protobuf:"bytes,1,opt,name=perpetual,proto3,oneof" json:"perpetual,omitempty"`
}
type VestingCondition_Epoch struct {
	Epoch *VestingConditionLimited `protobuf:"bytes,2,opt,name=epoch,proto3,oneof" json:"epoch,omitempty"`
}

func (*VestingCondition_Perpetual) isVestingCondition_Condition() {}
func (*VestingCondition_Epoch) isVestingCondition_Condition()     {}

func (m *VestingCondition) GetCondition() isVestingCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *VestingCondition) GetPerpetual() *VestingConditionPerpetual {
	if x, ok := m.GetCondition().(*VestingCondition_Perpetual); ok {
		return x.Perpetual
	}
	return nil
}

func (m *VestingCondition) GetEpoch() *VestingConditionLimited {
	if x, ok := m.GetCondition().(*VestingCondition_Epoch); ok {
		return x.Epoch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VestingCondition) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VestingCondition_Perpetual)(nil),
		(*VestingCondition_Epoch)(nil),
	}
}

// QueryConditionStakers queries the stakers
type QueryConditionStakers struct {
}

func (m *QueryConditionStakers) Reset()         { *m = QueryConditionStakers{} }
func (m *QueryConditionStakers) String() string { return proto.CompactTextString(m) }
func (*QueryConditionStakers) ProtoMessage()    {}
func (*QueryConditionStakers) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{3}
}
func (m *QueryConditionStakers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConditionStakers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConditionStakers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConditionStakers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConditionStakers.Merge(m, src)
}
func (m *QueryConditionStakers) XXX_Size() int {
	return m.Size()
}
func (m *QueryConditionStakers) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConditionStakers.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConditionStakers proto.InternalMessageInfo

// VestingConditionPerpetual is a vesting condition that distributes rewards
// infinitely. Perpetual gauges distribute all their tokens at a single time
// and only distribute their tokens again once the gauge is refilled.
//
// Non-perpetual gauges distribute their tokens equally per period while the
// gauge is in the active period. Perpetual gauges distribute all their tokens
// at a single time and only distribute their tokens again once the gauge is
// refilled.
type VestingConditionPerpetual struct {
}

func (m *VestingConditionPerpetual) Reset()         { *m = VestingConditionPerpetual{} }
func (m *VestingConditionPerpetual) String() string { return proto.CompactTextString(m) }
func (*VestingConditionPerpetual) ProtoMessage()    {}
func (*VestingConditionPerpetual) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{4}
}
func (m *VestingConditionPerpetual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingConditionPerpetual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingConditionPerpetual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingConditionPerpetual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingConditionPerpetual.Merge(m, src)
}
func (m *VestingConditionPerpetual) XXX_Size() int {
	return m.Size()
}
func (m *VestingConditionPerpetual) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingConditionPerpetual.DiscardUnknown(m)
}

var xxx_messageInfo_VestingConditionPerpetual proto.InternalMessageInfo

// VestingConditionLimited is a vesting condition that distributes rewards over
// the specified time. Non-perpetual gauges distribute their tokens equally per
// period while the gauge is in the active period.
type VestingConditionLimited struct {
	// num_units is the number of total epochs/blocks distribution will be
	// completed over
	NumUnits uint64 `protobuf:"varint,1,opt,name=num_units,json=numUnits,proto3" json:"num_units,omitempty"`
	// filled_epochs is the number of epochs/blocks distribution has been
	// completed on already
	FilledUnits uint64 `protobuf:"varint,2,opt,name=filled_units,json=filledUnits,proto3" json:"filled_units,omitempty"`
}

func (m *VestingConditionLimited) Reset()         { *m = VestingConditionLimited{} }
func (m *VestingConditionLimited) String() string { return proto.CompactTextString(m) }
func (*VestingConditionLimited) ProtoMessage()    {}
func (*VestingConditionLimited) Descriptor() ([]byte, []int) {
	return fileDescriptor_904d8195b7413b1f, []int{5}
}
func (m *VestingConditionLimited) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingConditionLimited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingConditionLimited.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingConditionLimited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingConditionLimited.Merge(m, src)
}
func (m *VestingConditionLimited) XXX_Size() int {
	return m.Size()
}
func (m *VestingConditionLimited) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingConditionLimited.DiscardUnknown(m)
}

var xxx_messageInfo_VestingConditionLimited proto.InternalMessageInfo

func (m *VestingConditionLimited) GetNumUnits() uint64 {
	if m != nil {
		return m.NumUnits
	}
	return 0
}

func (m *VestingConditionLimited) GetFilledUnits() uint64 {
	if m != nil {
		return m.FilledUnits
	}
	return 0
}

func init() {
	proto.RegisterEnum("rollapp.dividends.VestingFrequency", VestingFrequency_name, VestingFrequency_value)
	proto.RegisterType((*Gauge)(nil), "rollapp.dividends.Gauge")
	proto.RegisterType((*QueryCondition)(nil), "rollapp.dividends.QueryCondition")
	proto.RegisterType((*VestingCondition)(nil), "rollapp.dividends.VestingCondition")
	proto.RegisterType((*QueryConditionStakers)(nil), "rollapp.dividends.QueryConditionStakers")
	proto.RegisterType((*VestingConditionPerpetual)(nil), "rollapp.dividends.VestingConditionPerpetual")
	proto.RegisterType((*VestingConditionLimited)(nil), "rollapp.dividends.VestingConditionLimited")
}

func init() { proto.RegisterFile("dividends/gauge.proto", fileDescriptor_904d8195b7413b1f) }

var fileDescriptor_904d8195b7413b1f = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xc1, 0x72, 0xd2, 0x40,
	0x18, 0xc7, 0x93, 0x58, 0xac, 0x2c, 0x0e, 0xd2, 0x1d, 0x3b, 0x60, 0x19, 0x23, 0xe0, 0x85, 0xe9,
	0x28, 0x99, 0xe2, 0xc1, 0x3b, 0x34, 0x14, 0x94, 0xa1, 0x10, 0xa4, 0x33, 0xf5, 0xc2, 0x84, 0xec,
	0x92, 0xee, 0x34, 0xc9, 0x86, 0xec, 0x86, 0x29, 0x3e, 0x85, 0xaf, 0xe0, 0x23, 0xf8, 0x16, 0x1e,
	0x7b, 0xf4, 0xe8, 0xc0, 0x8b, 0x38, 0x84, 0x24, 0x14, 0x4a, 0xb5, 0xb7, 0x7c, 0xfb, 0xff, 0xef,
	0x6f, 0xbf, 0xff, 0xb7, 0x49, 0xc0, 0x21, 0x22, 0x53, 0x82, 0xb0, 0x83, 0x98, 0x62, 0xea, 0xbe,
	0x89, 0x2b, 0xae, 0x47, 0x39, 0x85, 0x07, 0x1e, 0xb5, 0x2c, 0xdd, 0x75, 0x2b, 0xb1, 0x7c, 0xf4,
	0xd2, 0xa4, 0x26, 0x0d, 0x54, 0x65, 0xf9, 0xb4, 0x32, 0x1e, 0xc9, 0x26, 0xa5, 0xa6, 0x85, 0x95,
	0xa0, 0x1a, 0xf9, 0x63, 0x05, 0xf9, 0x9e, 0xce, 0x09, 0x75, 0x42, 0xfd, 0xcd, 0xb6, 0xce, 0x89,
	0x8d, 0x19, 0xd7, 0x6d, 0x37, 0x02, 0x18, 0x94, 0xd9, 0x94, 0x29, 0x23, 0x9d, 0x61, 0x65, 0x7a,
	0x32, 0xc2, 0x5c, 0x3f, 0x51, 0x0c, 0x4a, 0x42, 0x40, 0xe9, 0x87, 0x04, 0x12, 0x67, 0xcb, 0xce,
	0x60, 0x1a, 0x48, 0x04, 0xe5, 0xc4, 0x82, 0x58, 0xde, 0xd3, 0x24, 0x82, 0x60, 0x0e, 0xec, 0xeb,
	0x08, 0x79, 0x98, 0xb1, 0x9c, 0x54, 0x10, 0xcb, 0x49, 0x2d, 0x2a, 0xe1, 0x27, 0xf0, 0x62, 0xe2,
	0x63, 0x6f, 0x36, 0x34, 0xa8, 0x83, 0xc8, 0xb2, 0x9b, 0xdc, 0x93, 0x82, 0x58, 0x4e, 0x55, 0x8b,
	0x95, 0x7b, 0xb9, 0x2a, 0xbd, 0xa5, 0xb3, 0x1e, 0x19, 0xb5, 0xf4, 0x64, 0xa3, 0x86, 0x5d, 0x70,
	0x30, 0xc5, 0x8c, 0x13, 0xc7, 0xbc, 0x43, 0xdb, 0x0b, 0x68, 0x6f, 0x77, 0xd0, 0x2e, 0x56, 0xde,
	0x35, 0x2f, 0x33, 0xdd, 0x5a, 0xb9, 0x4b, 0x1c, 0x7b, 0x78, 0xe2, 0x63, 0xc7, 0x98, 0xe5, 0x12,
	0x05, 0xb1, 0x9c, 0xfe, 0x17, 0xb1, 0x11, 0x59, 0x63, 0x62, 0xbc, 0x52, 0x32, 0x40, 0x7a, 0x33,
	0x05, 0x3c, 0x05, 0xfb, 0x8c, 0xeb, 0xd7, 0xd8, 0x63, 0xc1, 0xc0, 0x52, 0xd5, 0xf2, 0x7f, 0x93,
	0xf7, 0x57, 0xfe, 0xa6, 0xa0, 0x45, 0x5b, 0x6b, 0x29, 0x90, 0x8c, 0x33, 0x97, 0x7e, 0x8a, 0x20,
	0xb3, 0x9d, 0x0e, 0xb6, 0x41, 0xd2, 0xc5, 0x9e, 0x8b, 0xb9, 0xaf, 0x5b, 0xe1, 0x49, 0xef, 0x1e,
	0x31, 0x95, 0x6e, 0xb4, 0xa7, 0x29, 0x68, 0x6b, 0x00, 0xac, 0x81, 0x04, 0x76, 0xa9, 0x71, 0x15,
	0xdc, 0x67, 0xaa, 0x7a, 0xfc, 0x08, 0x52, 0x9b, 0xd8, 0x84, 0x63, 0xd4, 0x14, 0xb4, 0xd5, 0xd6,
	0xcd, 0x9e, 0xb3, 0xe0, 0x70, 0x67, 0xc8, 0x52, 0x1e, 0xbc, 0x7a, 0xb0, 0xa7, 0xd2, 0x25, 0xc8,
	0x3e, 0x70, 0x0c, 0xcc, 0x83, 0xa4, 0xe3, 0xdb, 0x43, 0xdf, 0x21, 0x9c, 0x85, 0xaf, 0xe2, 0x33,
	0xc7, 0xb7, 0x07, 0xcb, 0x1a, 0x16, 0xc1, 0xf3, 0x31, 0xb1, 0x2c, 0x8c, 0x42, 0x5d, 0x0a, 0xf4,
	0xd4, 0x6a, 0x2d, 0xb0, 0x1c, 0xd3, 0x78, 0x86, 0xf1, 0xed, 0xc1, 0x22, 0x78, 0x7d, 0xa1, 0xf6,
	0xbf, 0xb4, 0x3a, 0x67, 0xc3, 0x86, 0xa6, 0xf6, 0x06, 0x6a, 0xa7, 0x7e, 0x39, 0x1c, 0x74, 0xfa,
	0x5d, 0xb5, 0xde, 0x6a, 0xb4, 0xd4, 0xd3, 0x8c, 0x00, 0xf3, 0x20, 0x7b, 0xdf, 0x52, 0x6b, 0x9f,
	0xd7, 0x3f, 0x67, 0xc4, 0xdd, 0xa2, 0xda, 0x3d, 0xaf, 0x37, 0x33, 0x52, 0xad, 0xf7, 0x6b, 0x2e,
	0x8b, 0xb7, 0x73, 0x59, 0xfc, 0x33, 0x97, 0xc5, 0xef, 0x0b, 0x59, 0xb8, 0x5d, 0xc8, 0xc2, 0xef,
	0x85, 0x2c, 0x7c, 0xfd, 0x68, 0x12, 0x7e, 0xe5, 0x8f, 0x2a, 0x06, 0xb5, 0x15, 0x34, 0xb3, 0xb1,
	0xc3, 0x08, 0x75, 0x6e, 0x66, 0xdf, 0xd6, 0xc5, 0x7b, 0x0f, 0x5d, 0x2b, 0x37, 0xca, 0xfa, 0x0f,
	0xc1, 0x67, 0x2e, 0x66, 0xa3, 0xa7, 0xc1, 0x87, 0xf9, 0xe1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0d, 0x79, 0x88, 0x25, 0x3b, 0x04, 0x00, 0x00,
}

func (m *Gauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VestingFrequency != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.VestingFrequency))
		i--
		dAtA[i] = 0x28
	}
	if m.VestingCondition != nil {
		{
			size, err := m.VestingCondition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.QueryCondition != nil {
		{
			size, err := m.QueryCondition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGauge(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Condition != nil {
		{
			size := m.Condition.Size()
			i -= size
			if _, err := m.Condition.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCondition_Stakers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCondition_Stakers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Stakers != nil {
		{
			size, err := m.Stakers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *VestingCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Condition != nil {
		{
			size := m.Condition.Size()
			i -= size
			if _, err := m.Condition.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VestingCondition_Perpetual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingCondition_Perpetual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Perpetual != nil {
		{
			size, err := m.Perpetual.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *VestingCondition_Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingCondition_Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGauge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *QueryConditionStakers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConditionStakers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConditionStakers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VestingConditionPerpetual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingConditionPerpetual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingConditionPerpetual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VestingConditionLimited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingConditionLimited) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingConditionLimited) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FilledUnits != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.FilledUnits))
		i--
		dAtA[i] = 0x10
	}
	if m.NumUnits != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.NumUnits))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGauge(dAtA []byte, offset int, v uint64) int {
	offset -= sovGauge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Gauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGauge(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGauge(uint64(l))
	}
	if m.QueryCondition != nil {
		l = m.QueryCondition.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	if m.VestingCondition != nil {
		l = m.VestingCondition.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	if m.VestingFrequency != 0 {
		n += 1 + sovGauge(uint64(m.VestingFrequency))
	}
	return n
}

func (m *QueryCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Condition != nil {
		n += m.Condition.Size()
	}
	return n
}

func (m *QueryCondition_Stakers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stakers != nil {
		l = m.Stakers.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}
func (m *VestingCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Condition != nil {
		n += m.Condition.Size()
	}
	return n
}

func (m *VestingCondition_Perpetual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Perpetual != nil {
		l = m.Perpetual.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}
func (m *VestingCondition_Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovGauge(uint64(l))
	}
	return n
}
func (m *QueryConditionStakers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VestingConditionPerpetual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VestingConditionLimited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumUnits != 0 {
		n += 1 + sovGauge(uint64(m.NumUnits))
	}
	if m.FilledUnits != 0 {
		n += 1 + sovGauge(uint64(m.FilledUnits))
	}
	return n
}

func sovGauge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGauge(x uint64) (n int) {
	return sovGauge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Gauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryCondition == nil {
				m.QueryCondition = &QueryCondition{}
			}
			if err := m.QueryCondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VestingCondition == nil {
				m.VestingCondition = &VestingCondition{}
			}
			if err := m.VestingCondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingFrequency", wireType)
			}
			m.VestingFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingFrequency |= VestingFrequency(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryConditionStakers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &QueryCondition_Stakers{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perpetual", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VestingConditionPerpetual{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &VestingCondition_Perpetual{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VestingConditionLimited{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Condition = &VestingCondition_Epoch{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConditionStakers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConditionStakers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConditionStakers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingConditionPerpetual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingConditionPerpetual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingConditionPerpetual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingConditionLimited) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingConditionLimited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingConditionLimited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUnits", wireType)
			}
			m.NumUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledUnits", wireType)
			}
			m.FilledUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilledUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGauge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGauge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGauge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGauge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGauge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGauge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGauge = fmt.Errorf("proto: unexpected end of group")
)
