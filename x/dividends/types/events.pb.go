// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dividends/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventUpdateParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	NewParams Params `protobuf:"bytes,2,opt,name=new_params,json=newParams,proto3" json:"new_params"`
	OldParams Params `protobuf:"bytes,3,opt,name=old_params,json=oldParams,proto3" json:"old_params"`
}

func (m *EventUpdateParams) Reset()         { *m = EventUpdateParams{} }
func (m *EventUpdateParams) String() string { return proto.CompactTextString(m) }
func (*EventUpdateParams) ProtoMessage()    {}
func (*EventUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a463702b1028004, []int{0}
}
func (m *EventUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateParams.Merge(m, src)
}
func (m *EventUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateParams proto.InternalMessageInfo

func (m *EventUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *EventUpdateParams) GetNewParams() Params {
	if m != nil {
		return m.NewParams
	}
	return Params{}
}

func (m *EventUpdateParams) GetOldParams() Params {
	if m != nil {
		return m.OldParams
	}
	return Params{}
}

type EventCreateGauge struct {
	GaugeId          uint64           `protobuf:"varint,1,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty"`
	ApprovedDenoms   []string         `protobuf:"bytes,2,rep,name=approved_denoms,json=approvedDenoms,proto3" json:"approved_denoms,omitempty"`
	QueryCondition   QueryCondition   `protobuf:"bytes,3,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition"`
	VestingDuration  VestingDuration  `protobuf:"bytes,4,opt,name=vesting_duration,json=vestingDuration,proto3" json:"vesting_duration"`
	VestingFrequency VestingFrequency `protobuf:"varint,5,opt,name=vesting_frequency,json=vestingFrequency,proto3,enum=rollapp.dividends.VestingFrequency" json:"vesting_frequency,omitempty"`
}

func (m *EventCreateGauge) Reset()         { *m = EventCreateGauge{} }
func (m *EventCreateGauge) String() string { return proto.CompactTextString(m) }
func (*EventCreateGauge) ProtoMessage()    {}
func (*EventCreateGauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a463702b1028004, []int{1}
}
func (m *EventCreateGauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateGauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateGauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateGauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateGauge.Merge(m, src)
}
func (m *EventCreateGauge) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateGauge) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateGauge.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateGauge proto.InternalMessageInfo

func (m *EventCreateGauge) GetGaugeId() uint64 {
	if m != nil {
		return m.GaugeId
	}
	return 0
}

func (m *EventCreateGauge) GetApprovedDenoms() []string {
	if m != nil {
		return m.ApprovedDenoms
	}
	return nil
}

func (m *EventCreateGauge) GetQueryCondition() QueryCondition {
	if m != nil {
		return m.QueryCondition
	}
	return QueryCondition{}
}

func (m *EventCreateGauge) GetVestingDuration() VestingDuration {
	if m != nil {
		return m.VestingDuration
	}
	return VestingDuration{}
}

func (m *EventCreateGauge) GetVestingFrequency() VestingFrequency {
	if m != nil {
		return m.VestingFrequency
	}
	return VestingFrequency_VESTING_FREQUENCY_UNSPECIFIED
}

type EventUpdateGauge struct {
	GaugeId          uint64           `protobuf:"varint,1,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty"`
	ApprovedDenoms   []string         `protobuf:"bytes,2,rep,name=approved_denoms,json=approvedDenoms,proto3" json:"approved_denoms,omitempty"`
	QueryCondition   QueryCondition   `protobuf:"bytes,3,opt,name=query_condition,json=queryCondition,proto3" json:"query_condition"`
	VestingDuration  VestingDuration  `protobuf:"bytes,4,opt,name=vesting_duration,json=vestingDuration,proto3" json:"vesting_duration"`
	VestingFrequency VestingFrequency `protobuf:"varint,5,opt,name=vesting_frequency,json=vestingFrequency,proto3,enum=rollapp.dividends.VestingFrequency" json:"vesting_frequency,omitempty"`
}

func (m *EventUpdateGauge) Reset()         { *m = EventUpdateGauge{} }
func (m *EventUpdateGauge) String() string { return proto.CompactTextString(m) }
func (*EventUpdateGauge) ProtoMessage()    {}
func (*EventUpdateGauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a463702b1028004, []int{2}
}
func (m *EventUpdateGauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateGauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateGauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateGauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateGauge.Merge(m, src)
}
func (m *EventUpdateGauge) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateGauge) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateGauge.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateGauge proto.InternalMessageInfo

func (m *EventUpdateGauge) GetGaugeId() uint64 {
	if m != nil {
		return m.GaugeId
	}
	return 0
}

func (m *EventUpdateGauge) GetApprovedDenoms() []string {
	if m != nil {
		return m.ApprovedDenoms
	}
	return nil
}

func (m *EventUpdateGauge) GetQueryCondition() QueryCondition {
	if m != nil {
		return m.QueryCondition
	}
	return QueryCondition{}
}

func (m *EventUpdateGauge) GetVestingDuration() VestingDuration {
	if m != nil {
		return m.VestingDuration
	}
	return VestingDuration{}
}

func (m *EventUpdateGauge) GetVestingFrequency() VestingFrequency {
	if m != nil {
		return m.VestingFrequency
	}
	return VestingFrequency_VESTING_FREQUENCY_UNSPECIFIED
}

type EventDeactivateGauge struct {
	GaugeId uint64 `protobuf:"varint,1,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty"`
}

func (m *EventDeactivateGauge) Reset()         { *m = EventDeactivateGauge{} }
func (m *EventDeactivateGauge) String() string { return proto.CompactTextString(m) }
func (*EventDeactivateGauge) ProtoMessage()    {}
func (*EventDeactivateGauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a463702b1028004, []int{3}
}
func (m *EventDeactivateGauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeactivateGauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeactivateGauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeactivateGauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeactivateGauge.Merge(m, src)
}
func (m *EventDeactivateGauge) XXX_Size() int {
	return m.Size()
}
func (m *EventDeactivateGauge) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeactivateGauge.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeactivateGauge proto.InternalMessageInfo

func (m *EventDeactivateGauge) GetGaugeId() uint64 {
	if m != nil {
		return m.GaugeId
	}
	return 0
}

func init() {
	proto.RegisterType((*EventUpdateParams)(nil), "rollapp.dividends.EventUpdateParams")
	proto.RegisterType((*EventCreateGauge)(nil), "rollapp.dividends.EventCreateGauge")
	proto.RegisterType((*EventUpdateGauge)(nil), "rollapp.dividends.EventUpdateGauge")
	proto.RegisterType((*EventDeactivateGauge)(nil), "rollapp.dividends.EventDeactivateGauge")
}

func init() { proto.RegisterFile("dividends/events.proto", fileDescriptor_7a463702b1028004) }

var fileDescriptor_7a463702b1028004 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xdb, 0xf0, 0x91, 0x45, 0x4a, 0x1a, 0x2b, 0xa0, 0xa4, 0x07, 0x13, 0xc2, 0x81, 0x5c,
	0x6a, 0x8b, 0x22, 0xc1, 0xad, 0x12, 0x69, 0x00, 0x71, 0x4b, 0x5d, 0xc1, 0x81, 0x8b, 0xb5, 0xf5,
	0x0e, 0xee, 0x8a, 0x64, 0xc7, 0xd9, 0x5d, 0xbb, 0x35, 0xbf, 0x82, 0x1f, 0xc3, 0x8f, 0xa8, 0xc4,
	0x81, 0x8a, 0x13, 0x27, 0x84, 0x92, 0x3f, 0x82, 0xbc, 0xb6, 0x6b, 0x55, 0x14, 0xa9, 0x12, 0xd7,
	0xde, 0x3c, 0x6f, 0xde, 0xbe, 0x79, 0xf3, 0xe4, 0x21, 0x0f, 0x18, 0x4f, 0x39, 0x03, 0xc1, 0x94,
	0x07, 0x29, 0x08, 0xad, 0xdc, 0x58, 0xa2, 0x46, 0xbb, 0x2b, 0x71, 0x3e, 0xa7, 0x71, 0xec, 0x5e,
	0xf4, 0xb7, 0x7b, 0x11, 0x46, 0x68, 0xba, 0x5e, 0xfe, 0x55, 0x10, 0xb7, 0x07, 0x21, 0xaa, 0x05,
	0xaa, 0xa0, 0x68, 0x14, 0x45, 0xd9, 0xba, 0x5f, 0x6b, 0x47, 0x34, 0x89, 0xa0, 0x80, 0x47, 0xdf,
	0x2c, 0xd2, 0x7d, 0x95, 0xcf, 0x7a, 0x17, 0x33, 0xaa, 0x61, 0x46, 0x25, 0x5d, 0x28, 0xfb, 0x39,
	0x69, 0xd1, 0x44, 0x1f, 0xa3, 0xe4, 0x3a, 0xeb, 0x5b, 0x43, 0x6b, 0xdc, 0x9a, 0xf4, 0x7f, 0x7c,
	0xdd, 0xe9, 0x95, 0x8a, 0x2f, 0x19, 0x93, 0xa0, 0xd4, 0xa1, 0x96, 0x5c, 0x44, 0x7e, 0x4d, 0xb5,
	0xf7, 0x08, 0x11, 0x70, 0x12, 0xc4, 0x46, 0xa5, 0xbf, 0x31, 0xb4, 0xc6, 0xf7, 0x76, 0x07, 0xee,
	0x5f, 0xee, 0xdd, 0x62, 0xcc, 0xa4, 0x79, 0xf6, 0xeb, 0x61, 0xc3, 0x6f, 0x09, 0x38, 0x29, 0xe7,
	0xee, 0x11, 0x82, 0x73, 0x56, 0xbd, 0xdf, 0xbc, 0xe6, 0x7b, 0x9c, 0xb3, 0x02, 0x18, 0x7d, 0xdf,
	0x20, 0x5b, 0x66, 0x9b, 0x7d, 0x09, 0x54, 0xc3, 0x9b, 0x7c, 0x51, 0x7b, 0x40, 0xee, 0x9a, 0x8d,
	0x03, 0xce, 0xcc, 0x2e, 0x4d, 0xff, 0x8e, 0xa9, 0xdf, 0x32, 0xfb, 0x09, 0xe9, 0xd0, 0x38, 0x96,
	0x98, 0x02, 0x0b, 0x18, 0x08, 0x34, 0xa6, 0x37, 0xc7, 0x2d, 0xbf, 0x5d, 0xc1, 0x53, 0x83, 0xda,
	0x33, 0xd2, 0x59, 0x26, 0x20, 0xb3, 0x20, 0x44, 0xc1, 0xb8, 0xe6, 0x28, 0x4a, 0x77, 0x8f, 0xae,
	0x70, 0x77, 0x90, 0x33, 0xf7, 0x2b, 0x62, 0xe9, 0xb2, 0xbd, 0xbc, 0x84, 0xda, 0x87, 0x64, 0x2b,
	0x05, 0xa5, 0xb9, 0x88, 0x02, 0x96, 0x48, 0x6a, 0x24, 0x9b, 0x46, 0x72, 0x74, 0x85, 0xe4, 0xfb,
	0x82, 0x3a, 0x2d, 0x99, 0xa5, 0x66, 0x27, 0xbd, 0x0c, 0xdb, 0x33, 0xd2, 0xad, 0x44, 0x3f, 0x4a,
	0x58, 0x26, 0x20, 0xc2, 0xac, 0x7f, 0x6b, 0x68, 0x8d, 0xdb, 0xbb, 0x8f, 0xff, 0xad, 0xfa, 0xba,
	0xa2, 0xfa, 0x95, 0xa5, 0x0b, 0xa4, 0x4e, 0xb4, 0xf8, 0x3f, 0x6e, 0x12, 0xfd, 0xef, 0x44, 0x9f,
	0x92, 0x9e, 0x09, 0x74, 0x0a, 0x34, 0xd4, 0x3c, 0xbd, 0x46, 0xa8, 0x93, 0x83, 0xb3, 0x95, 0x63,
	0x9d, 0xaf, 0x1c, 0xeb, 0xf7, 0xca, 0xb1, 0xbe, 0xac, 0x9d, 0xc6, 0xf9, 0xda, 0x69, 0xfc, 0x5c,
	0x3b, 0x8d, 0x0f, 0x2f, 0x22, 0xae, 0x8f, 0x93, 0x23, 0x37, 0xc4, 0x85, 0xc7, 0xb2, 0x05, 0x08,
	0xc5, 0x51, 0x9c, 0x66, 0x9f, 0xeb, 0x62, 0x47, 0xb2, 0x4f, 0xde, 0xa9, 0x57, 0x5f, 0xbf, 0xce,
	0x62, 0x50, 0x47, 0xb7, 0xcd, 0xf9, 0x3f, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x23, 0x54, 0xbb,
	0x45, 0x73, 0x04, 0x00, 0x00,
}

func (m *EventUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OldParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.NewParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateGauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateGauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateGauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VestingFrequency != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.VestingFrequency))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.VestingDuration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.QueryCondition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ApprovedDenoms) > 0 {
		for iNdEx := len(m.ApprovedDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApprovedDenoms[iNdEx])
			copy(dAtA[i:], m.ApprovedDenoms[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.ApprovedDenoms[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.GaugeId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GaugeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateGauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateGauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateGauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VestingFrequency != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.VestingFrequency))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.VestingDuration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.QueryCondition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ApprovedDenoms) > 0 {
		for iNdEx := len(m.ApprovedDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApprovedDenoms[iNdEx])
			copy(dAtA[i:], m.ApprovedDenoms[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.ApprovedDenoms[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.GaugeId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GaugeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDeactivateGauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeactivateGauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeactivateGauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GaugeId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GaugeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.NewParams.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.OldParams.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCreateGauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GaugeId != 0 {
		n += 1 + sovEvents(uint64(m.GaugeId))
	}
	if len(m.ApprovedDenoms) > 0 {
		for _, s := range m.ApprovedDenoms {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = m.QueryCondition.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.VestingDuration.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.VestingFrequency != 0 {
		n += 1 + sovEvents(uint64(m.VestingFrequency))
	}
	return n
}

func (m *EventUpdateGauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GaugeId != 0 {
		n += 1 + sovEvents(uint64(m.GaugeId))
	}
	if len(m.ApprovedDenoms) > 0 {
		for _, s := range m.ApprovedDenoms {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = m.QueryCondition.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.VestingDuration.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.VestingFrequency != 0 {
		n += 1 + sovEvents(uint64(m.VestingFrequency))
	}
	return n
}

func (m *EventDeactivateGauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GaugeId != 0 {
		n += 1 + sovEvents(uint64(m.GaugeId))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OldParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateGauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateGauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateGauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
			}
			m.GaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedDenoms = append(m.ApprovedDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QueryCondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingFrequency", wireType)
			}
			m.VestingFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingFrequency |= VestingFrequency(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateGauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateGauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateGauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
			}
			m.GaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedDenoms = append(m.ApprovedDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QueryCondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingFrequency", wireType)
			}
			m.VestingFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingFrequency |= VestingFrequency(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeactivateGauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeactivateGauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeactivateGauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
			}
			m.GaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
