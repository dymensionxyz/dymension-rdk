// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sequencers/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventUpsertSequencer struct {
	// Operator is the bech32-encoded address of the actor sending the update
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// ConsAddr is a tendermint consensus address
	ConsAddr string `protobuf:"bytes,2,opt,name=cons_addr,json=consAddr,proto3" json:"cons_addr,omitempty"`
	// RewardAddr is the bech32-encoded sequencer's reward address
	RewardAddr string `protobuf:"bytes,3,opt,name=reward_addr,json=rewardAddr,proto3" json:"reward_addr,omitempty"`
}

func (m *EventUpsertSequencer) Reset()         { *m = EventUpsertSequencer{} }
func (m *EventUpsertSequencer) String() string { return proto.CompactTextString(m) }
func (*EventUpsertSequencer) ProtoMessage()    {}
func (*EventUpsertSequencer) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f991c7cadf9a70, []int{0}
}
func (m *EventUpsertSequencer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpsertSequencer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpsertSequencer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpsertSequencer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpsertSequencer.Merge(m, src)
}
func (m *EventUpsertSequencer) XXX_Size() int {
	return m.Size()
}
func (m *EventUpsertSequencer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpsertSequencer.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpsertSequencer proto.InternalMessageInfo

func (m *EventUpsertSequencer) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *EventUpsertSequencer) GetConsAddr() string {
	if m != nil {
		return m.ConsAddr
	}
	return ""
}

func (m *EventUpsertSequencer) GetRewardAddr() string {
	if m != nil {
		return m.RewardAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*EventUpsertSequencer)(nil), "rollapp.sequencers.types.EventUpsertSequencer")
}

func init() { proto.RegisterFile("sequencers/events.proto", fileDescriptor_56f991c7cadf9a70) }

var fileDescriptor_56f991c7cadf9a70 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x13, 0x90, 0x10, 0x35, 0x5b, 0x54, 0xa9, 0x21, 0x48, 0x06, 0x21, 0x06, 0x16, 0x62,
	0x55, 0x2c, 0xac, 0x20, 0xf1, 0x02, 0x45, 0x2c, 0x2c, 0xc8, 0x89, 0x0f, 0x13, 0x35, 0xf1, 0x19,
	0xdb, 0x29, 0x0d, 0x4f, 0xc1, 0x63, 0x31, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0x20, 0x27, 0x29, 0x65,
	0xb2, 0xff, 0xfb, 0xbe, 0xe1, 0xee, 0x27, 0x33, 0x0b, 0x6f, 0x35, 0xa8, 0x1c, 0x8c, 0x65, 0xb0,
	0x02, 0xe5, 0x6c, 0xaa, 0x0d, 0x3a, 0x8c, 0x62, 0x83, 0x65, 0xc9, 0xb5, 0x4e, 0x77, 0x42, 0xea,
	0x1a, 0x0d, 0x36, 0x99, 0x4a, 0x94, 0xd8, 0x4b, 0xcc, 0xff, 0x06, 0x3f, 0xb9, 0xc8, 0xd1, 0x56,
	0x68, 0x99, 0x75, 0x7c, 0x59, 0x28, 0xc9, 0x56, 0xf3, 0x0c, 0x1c, 0x9f, 0x6f, 0xf3, 0x68, 0xcd,
	0x46, 0xab, 0xb2, 0xde, 0xf0, 0xcf, 0x08, 0x8e, 0x25, 0xa2, 0x2c, 0x81, 0xf5, 0x29, 0xab, 0x5f,
	0x18, 0x57, 0xcd, 0x80, 0xce, 0x35, 0x99, 0xde, 0xfb, 0xcd, 0x1e, 0xb5, 0x05, 0xe3, 0x1e, 0xb6,
	0xeb, 0x44, 0x09, 0x39, 0x44, 0x0d, 0x86, 0x3b, 0x34, 0x71, 0x78, 0x16, 0x5e, 0x4e, 0x16, 0x7f,
	0x39, 0x3a, 0x21, 0x93, 0x1c, 0x95, 0x7d, 0xe6, 0x42, 0x98, 0x78, 0x6f, 0x80, 0x7e, 0x70, 0x2b,
	0x84, 0x89, 0x4e, 0xc9, 0x91, 0x81, 0x77, 0x6e, 0xc4, 0x80, 0xf7, 0x7b, 0x4c, 0x86, 0x91, 0x17,
	0xee, 0x16, 0x5f, 0x2d, 0x0d, 0x37, 0x2d, 0x0d, 0x7f, 0x5a, 0x1a, 0x7e, 0x76, 0x34, 0xd8, 0x74,
	0x34, 0xf8, 0xee, 0x68, 0xf0, 0x74, 0x23, 0x0b, 0xf7, 0x5a, 0x67, 0x69, 0x8e, 0x15, 0x13, 0x4d,
	0x05, 0xca, 0x16, 0xa8, 0xd6, 0xcd, 0xc7, 0x2e, 0x5c, 0x19, 0xb1, 0x64, 0x6b, 0xf6, 0xaf, 0xd6,
	0xbe, 0xb5, 0xec, 0xa0, 0x3f, 0xe6, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xc9, 0x1a, 0xf0,
	0x71, 0x01, 0x00, 0x00,
}

func (m *EventUpsertSequencer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpsertSequencer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpsertSequencer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAddr) > 0 {
		i -= len(m.RewardAddr)
		copy(dAtA[i:], m.RewardAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConsAddr) > 0 {
		i -= len(m.ConsAddr)
		copy(dAtA[i:], m.ConsAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ConsAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventUpsertSequencer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ConsAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RewardAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventUpsertSequencer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpsertSequencer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpsertSequencer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
