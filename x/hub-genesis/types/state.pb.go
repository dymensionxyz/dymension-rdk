// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hub-genesis/state.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// State holds the state of the genesis event
type State struct {
	// are outboundTransfersEnabled? This is only true if the genesis protocol has
	// finished
	OutboundTransfersEnabled bool `protobuf:"varint,6,opt,name=outbound_transfers_enabled,json=outboundTransfersEnabled,proto3" json:"outbound_transfers_enabled,omitempty"`
	// the canonical transfer port and channel for the hub
	HubPortAndChannel *PortAndChannel `protobuf:"bytes,7,opt,name=hub_port_and_channel,json=hubPortAndChannel,proto3" json:"hub_port_and_channel,omitempty"`
	// are we awaiting a timeout or ack for the sent genesis transfer?
	InFlight bool `protobuf:"varint,8,opt,name=in_flight,json=inFlight,proto3" json:"in_flight,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad65c2fe0d953ab, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetOutboundTransfersEnabled() bool {
	if m != nil {
		return m.OutboundTransfersEnabled
	}
	return false
}

func (m *State) GetHubPortAndChannel() *PortAndChannel {
	if m != nil {
		return m.HubPortAndChannel
	}
	return nil
}

func (m *State) GetInFlight() bool {
	if m != nil {
		return m.InFlight
	}
	return false
}

type PortAndChannel struct {
	// port
	Port string `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	// channel
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *PortAndChannel) Reset()         { *m = PortAndChannel{} }
func (m *PortAndChannel) String() string { return proto.CompactTextString(m) }
func (*PortAndChannel) ProtoMessage()    {}
func (*PortAndChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad65c2fe0d953ab, []int{1}
}
func (m *PortAndChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortAndChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortAndChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PortAndChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortAndChannel.Merge(m, src)
}
func (m *PortAndChannel) XXX_Size() int {
	return m.Size()
}
func (m *PortAndChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_PortAndChannel.DiscardUnknown(m)
}

var xxx_messageInfo_PortAndChannel proto.InternalMessageInfo

func (m *PortAndChannel) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *PortAndChannel) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func init() {
	proto.RegisterType((*State)(nil), "rollapp.hub_genesis.State")
	proto.RegisterType((*PortAndChannel)(nil), "rollapp.hub_genesis.PortAndChannel")
}

func init() { proto.RegisterFile("hub-genesis/state.proto", fileDescriptor_1ad65c2fe0d953ab) }

var fileDescriptor_1ad65c2fe0d953ab = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4d, 0x4b, 0xf3, 0x40,
	0x10, 0xc7, 0xbb, 0x0f, 0x7d, 0xda, 0x74, 0x05, 0xd1, 0x58, 0x30, 0x54, 0x08, 0xa5, 0x5e, 0x7a,
	0x69, 0x02, 0x7a, 0x12, 0x44, 0x50, 0xd1, 0x83, 0x27, 0x69, 0x7b, 0xf2, 0x12, 0xb2, 0xdd, 0x6d,
	0x76, 0x31, 0x9d, 0x0d, 0xfb, 0x02, 0xad, 0x9f, 0xc2, 0x4f, 0xe4, 0xd9, 0x63, 0x8f, 0x1e, 0xa5,
	0xfd, 0x22, 0x92, 0x8d, 0xc1, 0x17, 0xbc, 0xcd, 0x7f, 0xe6, 0x37, 0xec, 0x8f, 0x1d, 0x7c, 0xc8,
	0x2d, 0x19, 0x65, 0x0c, 0x98, 0x16, 0x3a, 0xd6, 0x26, 0x35, 0x2c, 0x2a, 0x94, 0x34, 0xd2, 0x3f,
	0x50, 0x32, 0xcf, 0xd3, 0xa2, 0x88, 0xb8, 0x25, 0xc9, 0x27, 0xd0, 0xeb, 0x66, 0x32, 0x93, 0x6e,
	0x1e, 0x97, 0x55, 0x85, 0x0e, 0x5e, 0x10, 0xfe, 0x3f, 0x29, 0x57, 0xfd, 0x73, 0xdc, 0x93, 0xd6,
	0x10, 0x69, 0x81, 0x26, 0x46, 0xa5, 0xa0, 0xe7, 0x4c, 0xe9, 0x84, 0x41, 0x4a, 0x72, 0x46, 0x83,
	0x56, 0x1f, 0x0d, 0xbd, 0x71, 0x50, 0x13, 0xd3, 0x1a, 0xb8, 0xa9, 0xe6, 0xfe, 0x14, 0x77, 0xcb,
	0xc7, 0x0a, 0xa9, 0x4c, 0x92, 0x02, 0x4d, 0x66, 0x3c, 0x05, 0x60, 0x79, 0xd0, 0xee, 0xa3, 0xe1,
	0xce, 0xc9, 0x71, 0xf4, 0x87, 0x51, 0x74, 0x2f, 0x95, 0xb9, 0x04, 0x7a, 0x5d, 0xa1, 0xe3, 0x7d,
	0x6e, 0xc9, 0xcf, 0x96, 0x7f, 0x84, 0x3b, 0x02, 0x92, 0x79, 0x2e, 0x32, 0x6e, 0x02, 0xcf, 0x29,
	0x78, 0x02, 0x6e, 0x5d, 0xbe, 0x6b, 0x7a, 0x68, 0xaf, 0x35, 0xb8, 0xc0, 0xbb, 0xbf, 0x96, 0x7c,
	0xdc, 0x2c, 0x35, 0x02, 0xd4, 0x47, 0xc3, 0xce, 0xd8, 0xd5, 0x7e, 0x80, 0xdb, 0xb5, 0xd1, 0x3f,
	0xd7, 0xae, 0xe3, 0xd5, 0xe4, 0x75, 0x13, 0xa2, 0xf5, 0x26, 0x44, 0xef, 0x9b, 0x10, 0x3d, 0x6f,
	0xc3, 0xc6, 0x7a, 0x1b, 0x36, 0xde, 0xb6, 0x61, 0xe3, 0xe1, 0x2c, 0x13, 0x86, 0x5b, 0x12, 0xcd,
	0xe4, 0x22, 0xa6, 0xab, 0x05, 0x03, 0x2d, 0x24, 0x2c, 0x57, 0x4f, 0x5f, 0x61, 0xa4, 0xe8, 0x63,
	0xbc, 0x8c, 0xbf, 0x9f, 0xc1, 0xac, 0x0a, 0xa6, 0x49, 0xcb, 0x7d, 0xee, 0xe9, 0x47, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x8d, 0x45, 0xe1, 0x21, 0xa2, 0x01, 0x00, 0x00,
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InFlight {
		i--
		if m.InFlight {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.HubPortAndChannel != nil {
		{
			size, err := m.HubPortAndChannel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OutboundTransfersEnabled {
		i--
		if m.OutboundTransfersEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	return len(dAtA) - i, nil
}

func (m *PortAndChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortAndChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortAndChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintState(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintState(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutboundTransfersEnabled {
		n += 2
	}
	if m.HubPortAndChannel != nil {
		l = m.HubPortAndChannel.Size()
		n += 1 + l + sovState(uint64(l))
	}
	if m.InFlight {
		n += 2
	}
	return n
}

func (m *PortAndChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTransfersEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutboundTransfersEnabled = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubPortAndChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HubPortAndChannel == nil {
				m.HubPortAndChannel = &PortAndChannel{}
			}
			if err := m.HubPortAndChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFlight", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InFlight = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortAndChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortAndChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortAndChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
