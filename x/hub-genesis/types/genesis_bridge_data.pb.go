// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hub-genesis/genesis_bridge_data.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	types1 "github.com/cosmos/ibc-go/v6/modules/apps/transfer/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisBridgeData is the data struct that is passed to the hub for the genesis bridge flow
type GenesisBridgeData struct {
	// genesis_info is the genesis info of the rollapp. used for hub validation
	GenesisInfo GenesisInfo `protobuf:"bytes,1,opt,name=genesis_info,json=genesisInfo,proto3" json:"genesis_info"`
	// native_denom is the native denom of the rollapp. registered on the hub
	NativeDenom types.Metadata `protobuf:"bytes,2,opt,name=native_denom,json=nativeDenom,proto3" json:"native_denom"`
	// optional genesis transfer packet data
	GenesisTransfer *types1.FungibleTokenPacketData `protobuf:"bytes,3,opt,name=genesis_transfer,json=genesisTransfer,proto3" json:"genesis_transfer,omitempty"`
}

func (m *GenesisBridgeData) Reset()         { *m = GenesisBridgeData{} }
func (m *GenesisBridgeData) String() string { return proto.CompactTextString(m) }
func (*GenesisBridgeData) ProtoMessage()    {}
func (*GenesisBridgeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b92d08aeaaf6feb0, []int{0}
}
func (m *GenesisBridgeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisBridgeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisBridgeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisBridgeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisBridgeData.Merge(m, src)
}
func (m *GenesisBridgeData) XXX_Size() int {
	return m.Size()
}
func (m *GenesisBridgeData) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisBridgeData.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisBridgeData proto.InternalMessageInfo

func (m *GenesisBridgeData) GetGenesisInfo() GenesisInfo {
	if m != nil {
		return m.GenesisInfo
	}
	return GenesisInfo{}
}

func (m *GenesisBridgeData) GetNativeDenom() types.Metadata {
	if m != nil {
		return m.NativeDenom
	}
	return types.Metadata{}
}

func (m *GenesisBridgeData) GetGenesisTransfer() *types1.FungibleTokenPacketData {
	if m != nil {
		return m.GenesisTransfer
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisBridgeData)(nil), "rollapp.hub_genesis.GenesisBridgeData")
}

func init() {
	proto.RegisterFile("hub-genesis/genesis_bridge_data.proto", fileDescriptor_b92d08aeaaf6feb0)
}

var fileDescriptor_b92d08aeaaf6feb0 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x41, 0x4b, 0xeb, 0x40,
	0x18, 0x4c, 0xfa, 0x1e, 0xef, 0x90, 0x16, 0x9e, 0x46, 0xc1, 0x52, 0x30, 0x16, 0x41, 0xd0, 0x43,
	0x77, 0x69, 0xc5, 0x83, 0xd7, 0x52, 0x2a, 0x3d, 0x08, 0x52, 0x7b, 0xf2, 0x12, 0x77, 0x93, 0x6d,
	0xba, 0x24, 0xd9, 0x5d, 0xb2, 0x9b, 0xd0, 0xfa, 0x0b, 0x3c, 0xfa, 0xb3, 0x7a, 0xec, 0xd1, 0x93,
	0x48, 0xfb, 0x47, 0x24, 0x9b, 0x0d, 0xed, 0xc1, 0xd3, 0xee, 0xf7, 0x7d, 0x33, 0xc3, 0xcc, 0x38,
	0x57, 0x8b, 0x1c, 0xf7, 0x22, 0xc2, 0x88, 0xa4, 0x12, 0x9a, 0xd7, 0xc7, 0x19, 0x0d, 0x23, 0xe2,
	0x87, 0x48, 0x21, 0x20, 0x32, 0xae, 0xb8, 0x7b, 0x92, 0xf1, 0x24, 0x41, 0x42, 0x80, 0x45, 0x8e,
	0x7d, 0x03, 0xeb, 0x9c, 0x46, 0x3c, 0xe2, 0xfa, 0x0e, 0xcb, 0x5f, 0x05, 0xed, 0x78, 0x01, 0x97,
	0x29, 0x97, 0x10, 0x23, 0x16, 0xc3, 0xa2, 0x8f, 0x89, 0x42, 0x7d, 0x3d, 0x98, 0xfb, 0x0d, 0xc5,
	0x01, 0x44, 0x42, 0x24, 0x34, 0x40, 0x8a, 0x72, 0x26, 0xa1, 0xca, 0x10, 0x93, 0x73, 0x92, 0xc1,
	0x62, 0x00, 0x05, 0x0a, 0x62, 0xa2, 0x0c, 0xf4, 0xec, 0xd0, 0x9c, 0x54, 0x48, 0x91, 0xea, 0x70,
	0xf9, 0xde, 0x70, 0x8e, 0x1f, 0xaa, 0xfd, 0x50, 0x7b, 0x1d, 0x21, 0x85, 0xdc, 0x89, 0xd3, 0xaa,
	0x13, 0x50, 0x36, 0xe7, 0x6d, 0xbb, 0x6b, 0x5f, 0x37, 0x07, 0x5d, 0xf0, 0x8b, 0x77, 0x60, 0xd8,
	0x13, 0x36, 0xe7, 0xc3, 0xbf, 0xeb, 0xaf, 0x0b, 0x6b, 0xda, 0x8c, 0xf6, 0x2b, 0x77, 0xec, 0xb4,
	0x18, 0x52, 0xb4, 0x20, 0x7e, 0x48, 0x18, 0x4f, 0xdb, 0x0d, 0x2d, 0x75, 0x0e, 0xaa, 0x6c, 0x40,
	0xc7, 0x31, 0xd9, 0xc0, 0x23, 0x51, 0xa8, 0xac, 0xaa, 0xd6, 0xa9, 0x88, 0xa3, 0x92, 0xe7, 0xbe,
	0x3a, 0x47, 0xb5, 0xa5, 0x3a, 0x65, 0xfb, 0x8f, 0xd6, 0xba, 0x03, 0x14, 0x07, 0xe0, 0xb0, 0x07,
	0x50, 0x23, 0x40, 0x31, 0x00, 0xe3, 0x9c, 0x45, 0x14, 0x27, 0x64, 0xc6, 0x63, 0xc2, 0x9e, 0x74,
	0x29, 0x65, 0xc6, 0xe9, 0x7f, 0x23, 0x37, 0x33, 0xd8, 0xe1, 0xf3, 0x7a, 0xeb, 0xd9, 0x9b, 0xad,
	0x67, 0x7f, 0x6f, 0x3d, 0xfb, 0x63, 0xe7, 0x59, 0x9b, 0x9d, 0x67, 0x7d, 0xee, 0x3c, 0xeb, 0xe5,
	0x3e, 0xa2, 0x6a, 0x91, 0x63, 0x10, 0xf0, 0x14, 0x86, 0xab, 0x94, 0x30, 0x49, 0x39, 0x5b, 0xae,
	0xde, 0xf6, 0x43, 0x2f, 0x0b, 0x63, 0xb8, 0x84, 0x87, 0x2d, 0xab, 0x95, 0x20, 0x12, 0xff, 0xd3,
	0x35, 0xdf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xa4, 0xa2, 0xe0, 0x1e, 0x02, 0x00, 0x00,
}

func (m *GenesisBridgeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisBridgeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisBridgeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GenesisTransfer != nil {
		{
			size, err := m.GenesisTransfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesisBridgeData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.NativeDenom.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesisBridgeData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.GenesisInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesisBridgeData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesisBridgeData(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesisBridgeData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisBridgeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GenesisInfo.Size()
	n += 1 + l + sovGenesisBridgeData(uint64(l))
	l = m.NativeDenom.Size()
	n += 1 + l + sovGenesisBridgeData(uint64(l))
	if m.GenesisTransfer != nil {
		l = m.GenesisTransfer.Size()
		n += 1 + l + sovGenesisBridgeData(uint64(l))
	}
	return n
}

func sovGenesisBridgeData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesisBridgeData(x uint64) (n int) {
	return sovGenesisBridgeData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisBridgeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesisBridgeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisBridgeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisBridgeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenesisInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenesisTransfer == nil {
				m.GenesisTransfer = &types1.FungibleTokenPacketData{}
			}
			if err := m.GenesisTransfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesisBridgeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesisBridgeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesisBridgeData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesisBridgeData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesisBridgeData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesisBridgeData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesisBridgeData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesisBridgeData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesisBridgeData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesisBridgeData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesisBridgeData = fmt.Errorf("proto: unexpected end of group")
)
