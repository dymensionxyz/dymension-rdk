// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: governors/staking.proto

package types

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BondStatus is the status of a validator.
type BondStatus int32

const (
	// UNSPECIFIED defines an invalid validator status.
	Unspecified BondStatus = 0
	// UNBONDED defines a validator that is not bonded.
	Unbonded BondStatus = 1
	// UNBONDING defines a validator that is unbonding.
	Unbonding BondStatus = 2
	// BONDED defines a validator that is bonded.
	Bonded BondStatus = 3
)

var BondStatus_name = map[int32]string{
	0: "BOND_STATUS_UNSPECIFIED",
	1: "BOND_STATUS_UNBONDED",
	2: "BOND_STATUS_UNBONDING",
	3: "BOND_STATUS_BONDED",
}

var BondStatus_value = map[string]int32{
	"BOND_STATUS_UNSPECIFIED": 0,
	"BOND_STATUS_UNBONDED":    1,
	"BOND_STATUS_UNBONDING":   2,
	"BOND_STATUS_BONDED":      3,
}

func (x BondStatus) String() string {
	return proto.EnumName(BondStatus_name, int32(x))
}

func (BondStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2db9452d1a6f27fc, []int{0}
}

// CommissionRates defines the initial commission rates to be used for creating
// a validator.
type CommissionRates struct {
	// rate is the commission rate charged to delegators, as a fraction.
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
	// max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
	MaxRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=max_rate,json=maxRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_rate"`
	// max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
	MaxChangeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=max_change_rate,json=maxChangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_change_rate"`
}

func (m *CommissionRates) Reset()      { *m = CommissionRates{} }
func (*CommissionRates) ProtoMessage() {}
func (*CommissionRates) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db9452d1a6f27fc, []int{0}
}
func (m *CommissionRates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommissionRates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommissionRates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommissionRates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommissionRates.Merge(m, src)
}
func (m *CommissionRates) XXX_Size() int {
	return m.Size()
}
func (m *CommissionRates) XXX_DiscardUnknown() {
	xxx_messageInfo_CommissionRates.DiscardUnknown(m)
}

var xxx_messageInfo_CommissionRates proto.InternalMessageInfo

// Commission defines commission parameters for a given validator.
type Commission struct {
	// commission_rates defines the initial commission rates to be used for creating a validator.
	CommissionRates `protobuf:"bytes,1,opt,name=commission_rates,json=commissionRates,proto3,embedded=commission_rates" json:"commission_rates"`
	// update_time is the last time the commission rate was changed.
	UpdateTime time.Time `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3,stdtime" json:"update_time"`
}

func (m *Commission) Reset()      { *m = Commission{} }
func (*Commission) ProtoMessage() {}
func (*Commission) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db9452d1a6f27fc, []int{1}
}
func (m *Commission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commission.Merge(m, src)
}
func (m *Commission) XXX_Size() int {
	return m.Size()
}
func (m *Commission) XXX_DiscardUnknown() {
	xxx_messageInfo_Commission.DiscardUnknown(m)
}

var xxx_messageInfo_Commission proto.InternalMessageInfo

func (m *Commission) GetUpdateTime() time.Time {
	if m != nil {
		return m.UpdateTime
	}
	return time.Time{}
}

// Description defines a validator description.
type Description struct {
	// moniker defines a human-readable name for the validator.
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// website defines an optional website link.
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	// security_contact defines an optional email for security contact.
	SecurityContact string `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	// details define other optional details.
	Details string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *Description) Reset()      { *m = Description{} }
func (*Description) ProtoMessage() {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db9452d1a6f27fc, []int{2}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Description) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Description) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Description) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *Description) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

// Validator defines a validator, together with the total amount of the
// Validator's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this validator, the validator is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
type Governor struct {
	// operator_address defines the address of the validator's operator; bech encoded in JSON.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// status is the validator status (bonded/unbonding/unbonded).
	Status BondStatus `protobuf:"varint,2,opt,name=status,proto3,enum=rollapp.governors.types.BondStatus" json:"status,omitempty"`
	// jailed defined whether the validator has been jailed from bonded status or not.
	Jailed bool `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed,omitempty"`
	// tokens define the delegated tokens (incl. self-delegation).
	Tokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens"`
	// delegator_shares defines total shares issued to a validator's delegators.
	DelegatorShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=delegator_shares,json=delegatorShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"delegator_shares"`
	// description defines the description terms for the validator.
	Description Description `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	// unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
	UnbondingHeight int64 `protobuf:"varint,7,opt,name=unbonding_height,json=unbondingHeight,proto3" json:"unbonding_height,omitempty"`
	// unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
	UnbondingTime time.Time `protobuf:"bytes,8,opt,name=unbonding_time,json=unbondingTime,proto3,stdtime" json:"unbonding_time"`
	// commission defines the commission parameters.
	Commission Commission `protobuf:"bytes,9,opt,name=commission,proto3" json:"commission"`
	// min_self_delegation is the validator's self declared minimum self delegation.
	//
	// Since: cosmos-sdk 0.46
	MinSelfDelegation github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=min_self_delegation,json=minSelfDelegation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_self_delegation"`
}

func (m *Governor) Reset()      { *m = Governor{} }
func (*Governor) ProtoMessage() {}
func (*Governor) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db9452d1a6f27fc, []int{3}
}
func (m *Governor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Governor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Governor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Governor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Governor.Merge(m, src)
}
func (m *Governor) XXX_Size() int {
	return m.Size()
}
func (m *Governor) XXX_DiscardUnknown() {
	xxx_messageInfo_Governor.DiscardUnknown(m)
}

var xxx_messageInfo_Governor proto.InternalMessageInfo

// Params defines the parameters for the staking module.
type Params struct {
	// unbonding_time is the time duration of unbonding.
	UnbondingTime time.Duration `protobuf:"bytes,1,opt,name=unbonding_time,json=unbondingTime,proto3,stdduration" json:"unbonding_time"`
	// max_validators is the maximum number of validators.
	MaxValidators uint32 `protobuf:"varint,2,opt,name=max_validators,json=maxValidators,proto3" json:"max_validators,omitempty"`
	// max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
	MaxEntries uint32 `protobuf:"varint,3,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty"`
	// bond_denom defines the bondable coin denomination.
	BondDenom string `protobuf:"bytes,4,opt,name=bond_denom,json=bondDenom,proto3" json:"bond_denom,omitempty"`
	// min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators
	MinCommissionRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=min_commission_rate,json=minCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_commission_rate" yaml:"min_commission_rate"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db9452d1a6f27fc, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetUnbondingTime() time.Duration {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *Params) GetMaxValidators() uint32 {
	if m != nil {
		return m.MaxValidators
	}
	return 0
}

func (m *Params) GetMaxEntries() uint32 {
	if m != nil {
		return m.MaxEntries
	}
	return 0
}

func (m *Params) GetBondDenom() string {
	if m != nil {
		return m.BondDenom
	}
	return ""
}

// Pool is used for tracking bonded and not-bonded token supply of the bond
// denomination.
type Pool struct {
	NotBondedTokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=not_bonded_tokens,json=notBondedTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"not_bonded_tokens"`
	BondedTokens    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=bonded_tokens,json=bondedTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bonded_tokens"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db9452d1a6f27fc, []int{5}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("rollapp.governors.types.BondStatus", BondStatus_name, BondStatus_value)
	proto.RegisterType((*CommissionRates)(nil), "rollapp.governors.types.CommissionRates")
	proto.RegisterType((*Commission)(nil), "rollapp.governors.types.Commission")
	proto.RegisterType((*Description)(nil), "rollapp.governors.types.Description")
	proto.RegisterType((*Governor)(nil), "rollapp.governors.types.Governor")
	proto.RegisterType((*Params)(nil), "rollapp.governors.types.Params")
	proto.RegisterType((*Pool)(nil), "rollapp.governors.types.Pool")
}

func init() { proto.RegisterFile("governors/staking.proto", fileDescriptor_2db9452d1a6f27fc) }

var fileDescriptor_2db9452d1a6f27fc = []byte{
	// 1056 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xa6, 0xa9, 0xeb, 0x3c, 0xd7, 0xb1, 0x3b, 0x04, 0xe2, 0x5a, 0xc2, 0x6b, 0xb9, 0x50,
	0x05, 0x44, 0x6c, 0x29, 0x1c, 0x90, 0x02, 0x97, 0x3a, 0x0e, 0xc5, 0x50, 0x42, 0xba, 0x4e, 0x40,
	0x42, 0x42, 0xab, 0xf1, 0xee, 0x64, 0x33, 0x64, 0x77, 0xc6, 0xda, 0x19, 0x17, 0x1b, 0xc1, 0x89,
	0x4b, 0x95, 0x53, 0x8f, 0xbd, 0x44, 0x8a, 0xc4, 0xb5, 0xc7, 0x8a, 0x13, 0x37, 0x2e, 0x3d, 0x46,
	0x3d, 0x21, 0x0e, 0x01, 0x25, 0x17, 0xc4, 0xa9, 0xe2, 0x2f, 0x40, 0x33, 0xb3, 0xfe, 0x91, 0xa4,
	0x41, 0x44, 0xe4, 0x94, 0xbc, 0x37, 0x6f, 0xbe, 0x37, 0xf3, 0x7d, 0xdf, 0xbc, 0x35, 0xcc, 0x07,
	0xfc, 0x01, 0x89, 0x19, 0x8f, 0x45, 0x5d, 0x48, 0xbc, 0x43, 0x59, 0x50, 0xeb, 0xc6, 0x5c, 0x72,
	0x34, 0x1f, 0xf3, 0x30, 0xc4, 0xdd, 0x6e, 0x6d, 0x54, 0x50, 0x93, 0x83, 0x2e, 0x11, 0xa5, 0xb9,
	0x80, 0x07, 0x5c, 0xd7, 0xd4, 0xd5, 0x7f, 0xa6, 0xbc, 0x54, 0x0e, 0x38, 0x0f, 0x42, 0x52, 0xd7,
	0x51, 0xa7, 0xb7, 0x55, 0xf7, 0x7b, 0x31, 0x96, 0x94, 0xb3, 0x64, 0xdd, 0x3e, 0xbd, 0x2e, 0x69,
	0x44, 0x84, 0xc4, 0x51, 0x37, 0x29, 0xb8, 0xe9, 0x71, 0x11, 0x71, 0xe1, 0x1a, 0x64, 0x13, 0x98,
	0xa5, 0xea, 0x93, 0x29, 0xc8, 0xaf, 0xf0, 0x28, 0xa2, 0x42, 0x50, 0xce, 0x1c, 0x2c, 0x89, 0x40,
	0xeb, 0x30, 0x1d, 0x63, 0x49, 0x8a, 0x56, 0xc5, 0x5a, 0x98, 0x69, 0x7c, 0xf0, 0xec, 0xd0, 0x4e,
	0xfd, 0x76, 0x68, 0xdf, 0x0e, 0xa8, 0xdc, 0xee, 0x75, 0x6a, 0x1e, 0x8f, 0x12, 0x88, 0xe4, 0xcf,
	0xa2, 0xf0, 0x77, 0xea, 0xfa, 0xfc, 0xb5, 0x26, 0xf1, 0x9e, 0x3f, 0x5d, 0x84, 0xa4, 0x43, 0x93,
	0x78, 0x8e, 0x46, 0x42, 0x5f, 0x40, 0x26, 0xc2, 0x7d, 0x57, 0xa3, 0x4e, 0x5d, 0x02, 0xea, 0xb5,
	0x08, 0xf7, 0xd5, 0x59, 0x91, 0x0f, 0x79, 0x05, 0xec, 0x6d, 0x63, 0x16, 0x10, 0x83, 0x7f, 0xe5,
	0x12, 0xf0, 0x73, 0x11, 0xee, 0xaf, 0x68, 0x4c, 0xd5, 0x65, 0x39, 0xf3, 0x78, 0xdf, 0x4e, 0xfd,
	0xb9, 0x6f, 0x5b, 0xd5, 0x9f, 0x2d, 0x80, 0x31, 0x5d, 0xe8, 0x2b, 0x28, 0x78, 0xa3, 0x48, 0xb7,
	0x17, 0x9a, 0xb5, 0xec, 0xd2, 0x42, 0xed, 0x1c, 0x8d, 0x6b, 0xa7, 0xd8, 0x6e, 0x64, 0xd4, 0x49,
	0x0f, 0x0e, 0x6d, 0xcb, 0xc9, 0x7b, 0xa7, 0x84, 0x58, 0x85, 0x6c, 0xaf, 0xeb, 0x63, 0x49, 0x5c,
	0xa5, 0xa8, 0x66, 0x2e, 0xbb, 0x54, 0xaa, 0x19, 0xb9, 0x6b, 0x43, 0xb9, 0x6b, 0x1b, 0x43, 0xb9,
	0x0d, 0xd6, 0xa3, 0xdf, 0x6d, 0xcb, 0x01, 0xb3, 0x51, 0x2d, 0x4d, 0x1c, 0xff, 0x89, 0x05, 0xd9,
	0x26, 0x11, 0x5e, 0x4c, 0xbb, 0xca, 0x3f, 0xa8, 0x08, 0xd7, 0x22, 0xce, 0xe8, 0x0e, 0x89, 0x8d,
	0xd8, 0xce, 0x30, 0x44, 0x25, 0xc8, 0x50, 0x9f, 0x30, 0x49, 0xe5, 0xc0, 0x28, 0xe6, 0x8c, 0x62,
	0xb5, 0xeb, 0x1b, 0xd2, 0x11, 0x74, 0x48, 0xb6, 0x33, 0x0c, 0xd1, 0x5b, 0x50, 0x10, 0xc4, 0xeb,
	0xc5, 0x54, 0x0e, 0x5c, 0x8f, 0x33, 0x89, 0x3d, 0x59, 0x9c, 0xd6, 0x25, 0xf9, 0x61, 0x7e, 0xc5,
	0xa4, 0x15, 0x88, 0x4f, 0x24, 0xa6, 0xa1, 0x28, 0x5e, 0x35, 0x20, 0x49, 0x38, 0x71, 0xdc, 0x17,
	0x57, 0x21, 0x73, 0x37, 0xa1, 0x0f, 0xad, 0x40, 0x81, 0x77, 0x49, 0x8c, 0x25, 0x8f, 0x5d, 0xec,
	0xfb, 0x31, 0x11, 0x22, 0x71, 0x68, 0xf1, 0xf9, 0xd3, 0xc5, 0xb9, 0x44, 0xbd, 0x3b, 0x66, 0xa5,
	0x2d, 0x63, 0xca, 0x02, 0x27, 0x3f, 0xdc, 0x91, 0xa4, 0xd1, 0xfb, 0x90, 0x16, 0x12, 0xcb, 0x9e,
	0xd0, 0x97, 0x9a, 0x5d, 0xba, 0x75, 0xae, 0x4c, 0x0d, 0xce, 0xfc, 0xb6, 0x2e, 0x75, 0x92, 0x2d,
	0xe8, 0x35, 0x48, 0x7f, 0x8d, 0x69, 0x48, 0x7c, 0x7d, 0xed, 0x8c, 0x93, 0x44, 0x68, 0x03, 0xd2,
	0x92, 0xef, 0x10, 0x26, 0xcc, 0x5d, 0x2f, 0xe4, 0xbd, 0x16, 0x93, 0x13, 0xde, 0x6b, 0x31, 0xe9,
	0x24, 0x58, 0x28, 0x80, 0x82, 0x4f, 0x42, 0x12, 0xe8, 0x0b, 0x8b, 0x6d, 0x1c, 0x93, 0x84, 0xa9,
	0xff, 0xe9, 0xed, 0xfc, 0x08, 0xb5, 0xad, 0x41, 0xd1, 0x3d, 0xc8, 0xfa, 0x63, 0x4f, 0x14, 0xd3,
	0xda, 0x65, 0x6f, 0x9c, 0x4b, 0xcc, 0x84, 0x7f, 0x1a, 0xd3, 0xea, 0x24, 0xce, 0xe4, 0x76, 0x65,
	0x81, 0x1e, 0xeb, 0x70, 0xe6, 0x53, 0x16, 0xb8, 0xdb, 0x84, 0x06, 0xdb, 0xb2, 0x78, 0xad, 0x62,
	0x2d, 0x5c, 0x71, 0xf2, 0xa3, 0xfc, 0x47, 0x3a, 0x8d, 0x3e, 0x81, 0xd9, 0x71, 0xa9, 0x76, 0x78,
	0xe6, 0x02, 0x0e, 0xcf, 0x8d, 0xf6, 0xaa, 0x55, 0xd4, 0x02, 0x18, 0x3f, 0x9f, 0xe2, 0x8c, 0x06,
	0xba, 0xf5, 0x1f, 0x1e, 0x61, 0x72, 0x87, 0x89, 0xcd, 0x28, 0x84, 0x57, 0x22, 0xca, 0x5c, 0x41,
	0xc2, 0x2d, 0x37, 0x21, 0x4b, 0x61, 0xc2, 0x25, 0x88, 0x7b, 0x23, 0xa2, 0xac, 0x4d, 0xc2, 0xad,
	0xe6, 0x08, 0x76, 0xf9, 0xfa, 0xc3, 0x7d, 0x3b, 0x95, 0x58, 0x3e, 0x55, 0xfd, 0x65, 0x0a, 0xd2,
	0xeb, 0x38, 0xc6, 0x91, 0x40, 0x1f, 0x9f, 0xa1, 0xc7, 0x8c, 0x96, 0x9b, 0x67, 0xe8, 0x69, 0x26,
	0xdf, 0x03, 0xc3, 0xce, 0xe3, 0x97, 0xb0, 0xf3, 0x26, 0xcc, 0xaa, 0x39, 0xf9, 0x00, 0x87, 0xd4,
	0x57, 0xd2, 0x1b, 0xff, 0xe7, 0xf4, 0xa0, 0xfb, 0x7c, 0x94, 0x44, 0x36, 0x64, 0x55, 0x19, 0x61,
	0x32, 0xa6, 0x44, 0x68, 0x9b, 0xe7, 0x1c, 0x88, 0x70, 0x7f, 0xd5, 0x64, 0xd0, 0xeb, 0x00, 0x0a,
	0xd6, 0xf5, 0x09, 0xe3, 0x51, 0xf2, 0xb4, 0x67, 0x54, 0xa6, 0xa9, 0x12, 0xe8, 0x3b, 0xc3, 0xdc,
	0xa9, 0x99, 0x98, 0xd8, 0xf6, 0xde, 0xc5, 0x6c, 0xfb, 0xf7, 0xa1, 0x5d, 0x1a, 0xe0, 0x28, 0x5c,
	0xae, 0xbe, 0x04, 0xb2, 0xaa, 0x99, 0x3c, 0x39, 0x4a, 0x27, 0x06, 0xc7, 0x0f, 0x53, 0x30, 0xbd,
	0xce, 0x79, 0x88, 0xbe, 0x87, 0x1b, 0x8c, 0x4b, 0x57, 0x9d, 0x90, 0xf8, 0x6e, 0xf2, 0x4a, 0xcd,
	0xd4, 0xb8, 0x7f, 0x31, 0x21, 0xff, 0x3a, 0xb4, 0xcf, 0x42, 0x9d, 0x52, 0x37, 0xcf, 0xb8, 0x6c,
	0xe8, 0xf5, 0x0d, 0xf3, 0x86, 0x63, 0xc8, 0x9d, 0x6c, 0x6d, 0x3e, 0x7e, 0x9f, 0x5e, 0xb8, 0x75,
	0xee, 0xdf, 0xda, 0x5e, 0xef, 0x4c, 0xf4, 0x5c, 0xce, 0x28, 0x06, 0x5e, 0xec, 0xdb, 0xd6, 0xdb,
	0x3f, 0x59, 0x00, 0xe3, 0x31, 0x86, 0xde, 0x81, 0xf9, 0xc6, 0x67, 0x6b, 0x4d, 0xb7, 0xbd, 0x71,
	0x67, 0x63, 0xb3, 0xed, 0x6e, 0xae, 0xb5, 0xd7, 0x57, 0x57, 0x5a, 0x1f, 0xb6, 0x56, 0x9b, 0x85,
	0x54, 0x29, 0xbf, 0xbb, 0x57, 0xc9, 0x6e, 0x32, 0xd1, 0x25, 0x1e, 0xdd, 0xa2, 0xc4, 0x47, 0xb7,
	0x61, 0xee, 0x64, 0xb5, 0x8a, 0x56, 0x9b, 0x05, 0xab, 0x74, 0x7d, 0x77, 0xaf, 0x92, 0xd9, 0x64,
	0xa6, 0x29, 0x5a, 0x80, 0x57, 0xcf, 0xd6, 0xb5, 0xd6, 0xee, 0x16, 0xa6, 0x4a, 0xb9, 0xdd, 0xbd,
	0xca, 0xcc, 0xe6, 0xd0, 0x87, 0xa8, 0x0a, 0x68, 0xb2, 0x32, 0xc1, 0xbb, 0x52, 0x82, 0xdd, 0xbd,
	0x4a, 0xda, 0xd0, 0x56, 0x9a, 0x7e, 0xf8, 0x63, 0x39, 0xd5, 0xb8, 0xff, 0xec, 0xa8, 0x6c, 0x1d,
	0x1c, 0x95, 0xad, 0x3f, 0x8e, 0xca, 0xd6, 0xa3, 0xe3, 0x72, 0xea, 0xe0, 0xb8, 0x9c, 0xfa, 0xf5,
	0xb8, 0x9c, 0xfa, 0xf2, 0xbd, 0x09, 0xc6, 0xfc, 0x41, 0x44, 0x98, 0x12, 0xbf, 0x3f, 0xf8, 0x76,
	0x1c, 0x2c, 0xc6, 0xfe, 0x4e, 0xbd, 0x5f, 0x1f, 0xff, 0xf4, 0xd2, 0x34, 0x76, 0xd2, 0xfa, 0xb1,
	0xbc, 0xfb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x5c, 0x0a, 0x32, 0x94, 0x09, 0x00, 0x00,
}

func (this *Pool) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return StakingDescription()
}
func StakingDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 10498 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x6b, 0x70, 0x24, 0xd7,
		0x75, 0x18, 0x8c, 0x9e, 0x07, 0x30, 0x73, 0xf0, 0x1a, 0x5c, 0x60, 0x77, 0x67, 0x87, 0x5c, 0x00,
		0x6c, 0x52, 0xe4, 0x72, 0x49, 0xce, 0x92, 0x4b, 0x2e, 0x97, 0x9c, 0x35, 0x45, 0x63, 0x80, 0x59,
		0x2c, 0x76, 0xf1, 0x62, 0x03, 0xe0, 0x4b, 0x92, 0xa7, 0x1a, 0x33, 0x17, 0x83, 0x26, 0x66, 0xba,
		0x9b, 0xdd, 0x3d, 0xbb, 0x0b, 0x5a, 0xfe, 0x8a, 0x7a, 0xd8, 0x9f, 0x44, 0xc7, 0xb1, 0x68, 0xb9,
		0xa2, 0xe7, 0x2a, 0x94, 0x14, 0x5b, 0xb2, 0xac, 0xc4, 0x7a, 0x59, 0x89, 0x1d, 0xc7, 0x96, 0x93,
		0x72, 0x22, 0xcb, 0x55, 0x29, 0xca, 0xa9, 0xc4, 0xb2, 0x4b, 0x59, 0x39, 0x92, 0x2a, 0x96, 0x15,
		0xc5, 0x66, 0x28, 0x39, 0xe5, 0x2a, 0x55, 0x2a, 0xa9, 0xfb, 0xea, 0xd7, 0x3c, 0x7a, 0x06, 0xdc,
		0x95, 0xa9, 0x38, 0xbf, 0x30, 0x7d, 0xef, 0x39, 0xe7, 0x9e, 0x7b, 0xee, 0xb9, 0xe7, 0x9c, 0xfb,
		0x38, 0x17, 0xf0, 0xbe, 0x18, 0xcc, 0xd4, 0x0c, 0xa3, 0x56, 0xc7, 0x27, 0x4d, 0xcb, 0x70, 0x8c,
		0xed, 0xe6, 0xce, 0x49, 0x47, 0x6b, 0x60, 0xdb, 0x51, 0x1b, 0x66, 0x9e, 0x16, 0xa1, 0x71, 0x06,
		0x90, 0x17, 0x00, 0xf2, 0x59, 0x48, 0x6f, 0x0a, 0x18, 0x94, 0x85, 0x21, 0x1b, 0x57, 0x0c, 0xbd,
		0x6a, 0x67, 0xa5, 0x59, 0xe9, 0x78, 0x5c, 0x11, 0x9f, 0x68, 0x0a, 0x92, 0xba, 0xaa, 0x1b, 0x76,
		0x36, 0x36, 0x2b, 0x1d, 0x4f, 0x2a, 0xec, 0xa3, 0x78, 0x55, 0xfa, 0xf2, 0x37, 0xa7, 0xa5, 0x97,
		0xbf, 0x39, 0x2d, 0xfd, 0xf9, 0x37, 0xa7, 0xa5, 0xf7, 0x7c, 0x6b, 0x7a, 0xe0, 0xe5, 0x6f, 0x4d,
		0x0f, 0x7c, 0xed, 0x5b, 0xd3, 0x03, 0x30, 0x59, 0x31, 0x1a, 0xf9, 0x50, 0x63, 0xc5, 0x31, 0xb7,
		0xa9, 0x75, 0x52, 0xb4, 0x2e, 0x3d, 0x7d, 0x8a, 0x83, 0xd4, 0x8c, 0xba, 0xaa, 0xd7, 0xf2, 0x86,
		0x55, 0xf3, 0xf1, 0xbe, 0x6f, 0x62, 0xfb, 0xe4, 0x9e, 0x6e, 0x5c, 0xd6, 0xbd, 0x7e, 0x98, 0xdb,
		0x7f, 0x2b, 0x49, 0x1f, 0x8b, 0xc5, 0x17, 0xd7, 0x8b, 0x9f, 0x8a, 0x4d, 0x2f, 0x32, 0xec, 0x75,
		0x8e, 0x92, 0x7f, 0x02, 0xd7, 0xeb, 0x17, 0x09, 0xc2, 0x26, 0xc1, 0xdd, 0x1e, 0xa4, 0xb4, 0xee,
		0x87, 0xef, 0x9f, 0x85, 0xd9, 0xb0, 0x64, 0xaa, 0xd8, 0xae, 0x58, 0x9a, 0xe9, 0x18, 0x56, 0x27,
		0xd1, 0xac, 0xc0, 0xc4, 0x39, 0xad, 0x8e, 0x17, 0x5c, 0xc0, 0x0d, 0xec, 0xa0, 0x87, 0x20, 0xb1,
		0xa3, 0xd5, 0x71, 0x56, 0x9a, 0x8d, 0x1f, 0x1f, 0x3e, 0x75, 0x5b, 0xb8, 0x8b, 0xf9, 0x20, 0x06,
		0x65, 0x4c, 0xa1, 0x18, 0xf2, 0xb7, 0x13, 0x30, 0xd9, 0xa6, 0x16, 0x21, 0x48, 0xe8, 0x6a, 0x03,
		0x53, 0x89, 0xa7, 0x15, 0xfa, 0x9b, 0x0c, 0x84, 0xa9, 0x56, 0xf6, 0xd4, 0x1a, 0xa6, 0x02, 0x4f,
		0x2b, 0xe2, 0x13, 0x4d, 0x03, 0x54, 0xb1, 0x89, 0xf5, 0x2a, 0xd6, 0x2b, 0xfb, 0xd9, 0xf8, 0x6c,
		0xfc, 0x78, 0x5a, 0xf1, 0x95, 0xa0, 0xbb, 0x60, 0xc2, 0x6c, 0x6e, 0xd7, 0xb5, 0x4a, 0xd9, 0x07,
		0x06, 0xb3, 0xf1, 0xe3, 0x49, 0x25, 0xc3, 0x2a, 0x16, 0x3c, 0xe0, 0x3b, 0x60, 0xfc, 0x32, 0x56,
		0xf7, 0xfc, 0xa0, 0xc3, 0x14, 0x74, 0x8c, 0x14, 0xfb, 0x00, 0xe7, 0x61, 0xa4, 0x81, 0x6d, 0x5b,
		0xad, 0xe1, 0x32, 0x19, 0x95, 0x6c, 0x82, 0xf6, 0x7e, 0xb6, 0xa5, 0xf7, 0xe1, 0x9e, 0x0f, 0x73,
		0x2c, 0x32, 0x1c, 0x68, 0x0e, 0xd2, 0x58, 0x6f, 0x36, 0x18, 0x85, 0x64, 0x07, 0xf9, 0x95, 0xf4,
		0x66, 0x23, 0x4c, 0x25, 0x45, 0xd0, 0x38, 0x89, 0x21, 0x1b, 0x5b, 0x97, 0xb4, 0x0a, 0xce, 0x0e,
		0x52, 0x02, 0x77, 0xb4, 0x10, 0xd8, 0x60, 0xf5, 0x61, 0x1a, 0x02, 0x0f, 0xcd, 0x43, 0x1a, 0x5f,
		0x71, 0xb0, 0x6e, 0x6b, 0x86, 0x9e, 0x1d, 0xa2, 0x44, 0xde, 0xd0, 0x66, 0x14, 0x71, 0xbd, 0x1a,
		0x26, 0xe1, 0xe1, 0xa1, 0x07, 0x61, 0xc8, 0x30, 0x1d, 0xcd, 0xd0, 0xed, 0x6c, 0x6a, 0x56, 0x3a,
		0x3e, 0x7c, 0xea, 0xe6, 0xb6, 0x8a, 0xb0, 0xc6, 0x60, 0x14, 0x01, 0x8c, 0x96, 0x20, 0x63, 0x1b,
		0x4d, 0xab, 0x82, 0xcb, 0x15, 0xa3, 0x8a, 0xcb, 0x9a, 0xbe, 0x63, 0x64, 0xd3, 0x94, 0xc0, 0x4c,
		0x6b, 0x47, 0x28, 0xe0, 0xbc, 0x51, 0xc5, 0x4b, 0xfa, 0x8e, 0xa1, 0x8c, 0xd9, 0x81, 0x6f, 0x74,
		0x18, 0x06, 0xed, 0x7d, 0xdd, 0x51, 0xaf, 0x64, 0x47, 0xa8, 0x86, 0xf0, 0x2f, 0xf9, 0xb7, 0x06,
		0x61, 0xbc, 0x17, 0x15, 0x3b, 0x0b, 0xc9, 0x1d, 0xd2, 0xcb, 0x6c, 0xac, 0x1f, 0x19, 0x30, 0x9c,
		0xa0, 0x10, 0x07, 0x0f, 0x28, 0xc4, 0x39, 0x18, 0xd6, 0xb1, 0xed, 0xe0, 0x2a, 0xd3, 0x88, 0x78,
		0x8f, 0x3a, 0x05, 0x0c, 0xa9, 0x55, 0xa5, 0x12, 0x07, 0x52, 0xa9, 0x27, 0x61, 0xdc, 0x65, 0xa9,
		0x6c, 0xa9, 0x7a, 0x4d, 0xe8, 0xe6, 0xc9, 0x28, 0x4e, 0xf2, 0x25, 0x81, 0xa7, 0x10, 0x34, 0x65,
		0x0c, 0x07, 0xbe, 0xd1, 0x02, 0x80, 0xa1, 0x63, 0x63, 0xa7, 0x5c, 0xc5, 0x95, 0x7a, 0x36, 0xd5,
		0x41, 0x4a, 0x6b, 0x04, 0xa4, 0x45, 0x4a, 0x06, 0x2b, 0xad, 0xd4, 0xd1, 0xc3, 0x9e, 0xaa, 0x0d,
		0x75, 0xd0, 0x94, 0x15, 0x36, 0xc9, 0x5a, 0xb4, 0x6d, 0x0b, 0xc6, 0x2c, 0x4c, 0xf4, 0x1e, 0x57,
		0x79, 0xcf, 0xd2, 0x94, 0x89, 0x7c, 0x64, 0xcf, 0x14, 0x8e, 0xc6, 0x3a, 0x36, 0x6a, 0xf9, 0x3f,
		0xd1, 0xad, 0xe0, 0x16, 0x94, 0xa9, 0x5a, 0x01, 0xb5, 0x42, 0x23, 0xa2, 0x70, 0x55, 0x6d, 0xe0,
		0xdc, 0x73, 0x30, 0x16, 0x14, 0x0f, 0x71, 0x21, 0xb6, 0xa3, 0x5a, 0x0e, 0xd5, 0xc2, 0xa4, 0xc2,
		0x3e, 0x50, 0x06, 0xe2, 0x58, 0xaf, 0x72, 0xb7, 0x42, 0x7e, 0xa2, 0x9f, 0xf4, 0x3a, 0x1c, 0xa7,
		0x1d, 0xbe, 0xbd, 0x75, 0x44, 0x03, 0x94, 0xc3, 0xfd, 0xce, 0x9d, 0x81, 0xd1, 0x40, 0x07, 0x7a,
		0x6d, 0x5a, 0x7e, 0x2b, 0x1c, 0x6a, 0x4b, 0x1a, 0x3d, 0x09, 0x53, 0x4d, 0x5d, 0xd3, 0x1d, 0x6c,
		0x99, 0x16, 0x26, 0x1a, 0xcb, 0x9a, 0xca, 0xfe, 0xc5, 0x50, 0x07, 0x9d, 0xdb, 0xf2, 0x43, 0x33,
		0x2a, 0xca, 0x64, 0xb3, 0xb5, 0xf0, 0x44, 0x3a, 0xf5, 0x9d, 0xa1, 0xcc, 0xf3, 0xcf, 0x3f, 0xff,
		0x7c, 0x4c, 0xfe, 0xfd, 0x41, 0x98, 0x6a, 0x37, 0x67, 0xda, 0x4e, 0xdf, 0xc3, 0x30, 0xa8, 0x37,
		0x1b, 0xdb, 0xd8, 0xa2, 0x42, 0x4a, 0x2a, 0xfc, 0x0b, 0xcd, 0x41, 0xb2, 0xae, 0x6e, 0xe3, 0x7a,
		0x36, 0x31, 0x2b, 0x1d, 0x1f, 0x3b, 0x75, 0x57, 0x4f, 0xb3, 0x32, 0xbf, 0x4c, 0x50, 0x14, 0x86,
		0x89, 0xde, 0x08, 0x09, 0x6e, 0xa2, 0x09, 0x85, 0x13, 0xbd, 0x51, 0x20, 0x73, 0x49, 0xa1, 0x78,
		0xe8, 0x26, 0x48, 0x93, 0xbf, 0x4c, 0x37, 0x06, 0x29, 0xcf, 0x29, 0x52, 0x40, 0xf4, 0x02, 0xe5,
		0x20, 0x45, 0xa7, 0x49, 0x15, 0x0b, 0xd7, 0xe6, 0x7e, 0x13, 0xc5, 0xaa, 0xe2, 0x1d, 0xb5, 0x59,
		0x77, 0xca, 0x97, 0xd4, 0x7a, 0x13, 0x53, 0x85, 0x4f, 0x2b, 0x23, 0xbc, 0xf0, 0x71, 0x52, 0x86,
		0x66, 0x60, 0x98, 0xcd, 0x2a, 0x4d, 0xaf, 0xe2, 0x2b, 0xd4, 0x7a, 0x26, 0x15, 0x36, 0xd1, 0x96,
		0x48, 0x09, 0x69, 0xfe, 0x19, 0xdb, 0xd0, 0x85, 0x6a, 0xd2, 0x26, 0x48, 0x01, 0x6d, 0xfe, 0x4c,
		0xd8, 0x70, 0x1f, 0x6b, 0xdf, 0xbd, 0x96, 0xb9, 0x74, 0x07, 0x8c, 0xb3, 0x60, 0x82, 0x0f, 0xbd,
		0x5a, 0xcf, 0x4e, 0xcc, 0x4a, 0xc7, 0x53, 0xca, 0x18, 0x2b, 0x5e, 0xe3, 0xa5, 0xf2, 0x17, 0x63,
		0x90, 0xa0, 0x86, 0x65, 0x1c, 0x86, 0x37, 0x9f, 0x5a, 0x2f, 0x95, 0x17, 0xd6, 0xb6, 0x8a, 0xcb,
		0xa5, 0x8c, 0x84, 0xc6, 0x00, 0x68, 0xc1, 0xb9, 0xe5, 0xb5, 0xb9, 0xcd, 0x4c, 0xcc, 0xfd, 0x5e,
		0x5a, 0xdd, 0x7c, 0xf0, 0x81, 0x4c, 0xdc, 0x45, 0xd8, 0x62, 0x05, 0x09, 0x3f, 0xc0, 0xfd, 0xa7,
		0x32, 0x49, 0x94, 0x81, 0x11, 0x46, 0x60, 0xe9, 0xc9, 0xd2, 0xc2, 0x83, 0x0f, 0x64, 0x06, 0x83,
		0x25, 0xf7, 0x9f, 0xca, 0x0c, 0xa1, 0x51, 0x48, 0xd3, 0x92, 0xe2, 0xda, 0xda, 0x72, 0x26, 0xe5,
		0xd2, 0xdc, 0xd8, 0x54, 0x96, 0x56, 0x17, 0x33, 0x69, 0x97, 0xe6, 0xa2, 0xb2, 0xb6, 0xb5, 0x9e,
		0x01, 0x97, 0xc2, 0x4a, 0x69, 0x63, 0x63, 0x6e, 0xb1, 0x94, 0x19, 0x76, 0x21, 0x8a, 0x4f, 0x6d,
		0x96, 0x36, 0x32, 0x23, 0x01, 0xb6, 0xee, 0x3f, 0x95, 0x19, 0x75, 0x9b, 0x28, 0xad, 0x6e, 0xad,
		0x64, 0xc6, 0xd0, 0x04, 0x8c, 0xb2, 0x26, 0x04, 0x13, 0xe3, 0xa1, 0xa2, 0x07, 0x1f, 0xc8, 0x64,
		0x3c, 0x46, 0x18, 0x95, 0x89, 0x40, 0xc1, 0x83, 0x0f, 0x64, 0x90, 0x3c, 0x0f, 0x49, 0xaa, 0x86,
		0x08, 0xc1, 0xd8, 0xf2, 0x5c, 0xb1, 0xb4, 0x5c, 0x5e, 0x5b, 0xdf, 0x5c, 0x5a, 0x5b, 0x9d, 0x5b,
		0xce, 0x48, 0x5e, 0x99, 0x52, 0x7a, 0x6c, 0x6b, 0x49, 0x29, 0x2d, 0x64, 0x62, 0xfe, 0xb2, 0xf5,
		0xd2, 0xdc, 0x66, 0x69, 0x21, 0x13, 0x97, 0x2b, 0x30, 0xd5, 0xce, 0xa0, 0xb6, 0x9d, 0x42, 0x3e,
		0x5d, 0x88, 0x75, 0xd0, 0x05, 0x4a, 0x2b, 0xac, 0x0b, 0xf2, 0xb7, 0x62, 0x30, 0xd9, 0xc6, 0xa9,
		0xb4, 0x6d, 0xe4, 0x51, 0x48, 0x32, 0x5d, 0x66, 0x6e, 0xf6, 0xce, 0xb6, 0xde, 0x89, 0x6a, 0x76,
		0x8b, 0xab, 0xa5, 0x78, 0xfe, 0x50, 0x23, 0xde, 0x21, 0xd4, 0x20, 0x24, 0x5a, 0x14, 0xf6, 0x2d,
		0x2d, 0xc6, 0x9f, 0xf9, 0xc7, 0x07, 0x7b, 0xf1, 0x8f, 0xb4, 0xac, 0x3f, 0x27, 0x90, 0x6c, 0xe3,
		0x04, 0xce, 0xc2, 0x44, 0x0b, 0xa1, 0x9e, 0x8d, 0xf1, 0x3b, 0x24, 0xc8, 0x76, 0x12, 0x4e, 0x84,
		0x49, 0x8c, 0x05, 0x4c, 0xe2, 0xd9, 0xb0, 0x04, 0x6f, 0xe9, 0x3c, 0x08, 0x2d, 0x63, 0xfd, 0x09,
		0x09, 0x0e, 0xb7, 0x0f, 0x29, 0xdb, 0xf2, 0xf0, 0x46, 0x18, 0x6c, 0x60, 0x67, 0xd7, 0x10, 0x61,
		0xd5, 0xed, 0x6d, 0x9c, 0x35, 0xa9, 0x0e, 0x0f, 0x36, 0xc7, 0xf2, 0x7b, 0xfb, 0x78, 0xa7, 0xb8,
		0x90, 0x71, 0xd3, 0xc2, 0xe9, 0xbb, 0x63, 0x70, 0xa8, 0x2d, 0xf1, 0xb6, 0x8c, 0x1e, 0x03, 0xd0,
		0x74, 0xb3, 0xe9, 0xb0, 0xd0, 0x89, 0x59, 0xe2, 0x34, 0x2d, 0xa1, 0xc6, 0x8b, 0x58, 0xd9, 0xa6,
		0xe3, 0xd6, 0xc7, 0x69, 0x3d, 0xb0, 0x22, 0x0a, 0xf0, 0x90, 0xc7, 0x68, 0x82, 0x32, 0x3a, 0xdd,
		0xa1, 0xa7, 0x2d, 0x8a, 0x79, 0x2f, 0x64, 0x2a, 0x75, 0x0d, 0xeb, 0x4e, 0xd9, 0x76, 0x2c, 0xac,
		0x36, 0x34, 0xbd, 0x46, 0x5d, 0x4d, 0xaa, 0x90, 0xdc, 0x51, 0xeb, 0x36, 0x56, 0xc6, 0x59, 0xf5,
		0x86, 0xa8, 0x25, 0x18, 0x54, 0x81, 0x2c, 0x1f, 0xc6, 0x60, 0x00, 0x83, 0x55, 0xbb, 0x18, 0xf2,
		0x8b, 0x69, 0x18, 0xf6, 0x05, 0xe0, 0xe8, 0x16, 0x18, 0x79, 0x46, 0xbd, 0xa4, 0x96, 0xc5, 0xa2,
		0x8a, 0x49, 0x62, 0x98, 0x94, 0xad, 0xf3, 0x85, 0xd5, 0xbd, 0x30, 0x45, 0x41, 0x8c, 0xa6, 0x83,
		0xad, 0x72, 0xa5, 0xae, 0xda, 0x36, 0x15, 0x5a, 0x8a, 0x82, 0x22, 0x52, 0xb7, 0x46, 0xaa, 0xe6,
		0x45, 0x0d, 0x3a, 0x0d, 0x93, 0x14, 0xa3, 0xd1, 0xac, 0x3b, 0x9a, 0x59, 0xc7, 0x65, 0xb2, 0xcc,
		0xb3, 0xa9, 0xcb, 0x71, 0x39, 0x9b, 0x20, 0x10, 0x2b, 0x1c, 0x80, 0x70, 0x64, 0xa3, 0x05, 0x38,
		0x46, 0xd1, 0x6a, 0x58, 0xc7, 0x96, 0xea, 0xe0, 0x32, 0x7e, 0xb6, 0xa9, 0xd6, 0xed, 0xb2, 0xaa,
		0x57, 0xcb, 0xbb, 0xaa, 0xbd, 0x9b, 0x9d, 0x22, 0x04, 0x8a, 0xb1, 0xac, 0xa4, 0x1c, 0x25, 0x80,
		0x8b, 0x1c, 0xae, 0x44, 0xc1, 0xe6, 0xf4, 0xea, 0x79, 0xd5, 0xde, 0x45, 0x05, 0x38, 0x4c, 0xa9,
		0xd8, 0x8e, 0xa5, 0xe9, 0xb5, 0x72, 0x65, 0x17, 0x57, 0xf6, 0xca, 0x4d, 0x67, 0xe7, 0xa1, 0xec,
		0x4d, 0xfe, 0xf6, 0x29, 0x87, 0x1b, 0x14, 0x66, 0x9e, 0x80, 0x6c, 0x39, 0x3b, 0x0f, 0xa1, 0x0d,
		0x18, 0x21, 0x83, 0xd1, 0xd0, 0x9e, 0xc3, 0xe5, 0x1d, 0xc3, 0xa2, 0x3e, 0x74, 0xac, 0x8d, 0x69,
		0xf2, 0x49, 0x30, 0xbf, 0xc6, 0x11, 0x56, 0x8c, 0x2a, 0x2e, 0x24, 0x37, 0xd6, 0x4b, 0xa5, 0x05,
		0x65, 0x58, 0x50, 0x39, 0x67, 0x58, 0x44, 0xa1, 0x6a, 0x86, 0x2b, 0xe0, 0x61, 0xa6, 0x50, 0x35,
		0x43, 0x88, 0xf7, 0x34, 0x4c, 0x56, 0x2a, 0xac, 0xcf, 0x5a, 0xa5, 0xcc, 0x17, 0x63, 0x76, 0x36,
		0x13, 0x10, 0x56, 0xa5, 0xb2, 0xc8, 0x00, 0xb8, 0x8e, 0xdb, 0xe8, 0x61, 0x38, 0xe4, 0x09, 0xcb,
		0x8f, 0x38, 0xd1, 0xd2, 0xcb, 0x30, 0xea, 0x69, 0x98, 0x34, 0xf7, 0x5b, 0x11, 0x51, 0xa0, 0x45,
		0x73, 0x3f, 0x8c, 0x76, 0x06, 0xa6, 0xcc, 0x5d, 0xb3, 0x15, 0xef, 0x84, 0x1f, 0x0f, 0x99, 0xbb,
		0x66, 0x18, 0xf1, 0x0d, 0x74, 0x65, 0x6e, 0xe1, 0x8a, 0xea, 0xe0, 0x6a, 0xf6, 0x88, 0x1f, 0xdc,
		0x57, 0x81, 0xf2, 0x90, 0xa9, 0x54, 0xca, 0x58, 0x57, 0xb7, 0xeb, 0xb8, 0xac, 0x5a, 0x58, 0x57,
		0xed, 0xec, 0x0c, 0x05, 0x4e, 0x38, 0x56, 0x13, 0x2b, 0x63, 0x95, 0x4a, 0x89, 0x56, 0xce, 0xd1,
		0x3a, 0x74, 0x02, 0x26, 0x8c, 0xed, 0x67, 0x2a, 0x4c, 0x23, 0xcb, 0xa6, 0x85, 0x77, 0xb4, 0x2b,
		0xd9, 0xdb, 0xa8, 0x78, 0xc7, 0x49, 0x05, 0xd5, 0xc7, 0x75, 0x5a, 0x8c, 0xee, 0x84, 0x4c, 0xc5,
		0xde, 0x55, 0x2d, 0x93, 0x9a, 0x64, 0xdb, 0x54, 0x2b, 0x38, 0xfb, 0x06, 0x06, 0xca, 0xca, 0x57,
		0x45, 0x31, 0x99, 0x11, 0xf6, 0x65, 0x6d, 0xc7, 0x11, 0x14, 0xef, 0x60, 0x33, 0x82, 0x96, 0x71,
		0x6a, 0xc7, 0x21, 0x43, 0x24, 0x11, 0x68, 0xf8, 0x38, 0x05, 0x1b, 0x33, 0x77, 0x4d, 0x7f, 0xbb,
		0xb7, 0xc2, 0x28, 0x81, 0xf4, 0x1a, 0xbd, 0x93, 0x05, 0x6e, 0xe6, 0xae, 0xaf, 0xc5, 0x07, 0xe0,
		0x30, 0x01, 0x6a, 0x60, 0x47, 0xad, 0xaa, 0x8e, 0xea, 0x83, 0xbe, 0x9b, 0x42, 0x13, 0xb1, 0xaf,
		0xf0, 0xca, 0x00, 0x9f, 0x56, 0x73, 0x7b, 0xdf, 0x55, 0xac, 0x7b, 0x18, 0x9f, 0xa4, 0x4c, 0xa8,
		0xd6, 0x0d, 0x0b, 0xce, 0xe5, 0x02, 0x8c, 0xf8, 0xf5, 0x1e, 0xa5, 0x81, 0x69, 0x7e, 0x46, 0x22,
		0x41, 0xd0, 0xfc, 0xda, 0x02, 0x09, 0x5f, 0x9e, 0x2e, 0x65, 0x62, 0x24, 0x8c, 0x5a, 0x5e, 0xda,
		0x2c, 0x95, 0x95, 0xad, 0xd5, 0xcd, 0xa5, 0x95, 0x52, 0x26, 0xee, 0x0b, 0xec, 0x2f, 0x24, 0x52,
		0xb7, 0x67, 0xee, 0x20, 0x51, 0xc3, 0x58, 0x70, 0xa5, 0x86, 0x7e, 0x02, 0x8e, 0x88, 0x6d, 0x15,
		0x1b, 0x3b, 0xe5, 0xcb, 0x9a, 0x45, 0x27, 0x64, 0x43, 0x65, 0xce, 0xd1, 0xd5, 0x9f, 0x29, 0x0e,
		0xb5, 0x81, 0x9d, 0x27, 0x34, 0x8b, 0x4c, 0xb7, 0x86, 0xea, 0xa0, 0x65, 0x98, 0xd1, 0x8d, 0xb2,
		0xed, 0xa8, 0x7a, 0x55, 0xb5, 0xaa, 0x65, 0x6f, 0x43, 0xab, 0xac, 0x56, 0x2a, 0xd8, 0xb6, 0x0d,
		0xe6, 0x08, 0x5d, 0x2a, 0x37, 0xeb, 0xc6, 0x06, 0x07, 0xf6, 0x3c, 0xc4, 0x1c, 0x07, 0x0d, 0xa9,
		0x6f, 0xbc, 0x93, 0xfa, 0xde, 0x04, 0xe9, 0x86, 0x6a, 0x96, 0xb1, 0xee, 0x58, 0xfb, 0x34, 0x3e,
		0x4f, 0x29, 0xa9, 0x86, 0x6a, 0x96, 0xc8, 0xf7, 0x8f, 0x64, 0x99, 0x74, 0x21, 0x91, 0x4a, 0x64,
		0x92, 0x17, 0x12, 0xa9, 0x64, 0x66, 0xf0, 0x42, 0x22, 0x35, 0x98, 0x19, 0xba, 0x90, 0x48, 0xa5,
		0x32, 0xe9, 0x0b, 0x89, 0x54, 0x3a, 0x03, 0xf2, 0x2f, 0x25, 0x60, 0xc4, 0x1f, 0xc1, 0x93, 0x05,
		0x51, 0x85, 0xfa, 0x30, 0x89, 0x5a, 0xb9, 0x5b, 0xbb, 0xc6, 0xfb, 0xf9, 0x79, 0xe2, 0xdc, 0x0a,
		0x83, 0x2c, 0x5c, 0x56, 0x18, 0x26, 0x09, 0x2c, 0x88, 0xfa, 0x61, 0x16, 0x9e, 0xa4, 0x14, 0xfe,
		0x85, 0x16, 0x61, 0xf0, 0x19, 0x9b, 0xd2, 0x1e, 0xa4, 0xb4, 0x6f, 0xeb, 0x4e, 0xfb, 0xc2, 0x06,
		0x25, 0x9e, 0xbe, 0xb0, 0x51, 0x5e, 0x5d, 0x53, 0x56, 0xe6, 0x96, 0x15, 0x8e, 0x8e, 0x8e, 0x42,
		0xa2, 0xae, 0x3e, 0xb7, 0x1f, 0x74, 0x83, 0xb4, 0x08, 0xe5, 0x61, 0xbc, 0xa9, 0x5f, 0xc2, 0x96,
		0xb6, 0xa3, 0xe1, 0x6a, 0x99, 0x42, 0x8d, 0xfb, 0xa1, 0xc6, 0xbc, 0xda, 0x65, 0x02, 0xdf, 0xe3,
		0x30, 0x1e, 0x85, 0xc4, 0x65, 0xac, 0xee, 0x05, 0x9d, 0x15, 0x2d, 0xba, 0x81, 0xd3, 0xe9, 0x24,
		0x24, 0xa9, 0x7c, 0x11, 0x00, 0x97, 0x70, 0x66, 0x00, 0xa5, 0x20, 0x31, 0xbf, 0xa6, 0x90, 0x29,
		0x95, 0x81, 0x11, 0x56, 0x5a, 0x5e, 0x5f, 0x2a, 0xcd, 0x97, 0x32, 0x31, 0xf9, 0x34, 0x0c, 0x32,
		0xa1, 0x91, 0xe9, 0xe6, 0x8a, 0x2d, 0x33, 0xc0, 0x3f, 0x39, 0x0d, 0x49, 0xd4, 0x6e, 0xad, 0x14,
		0x4b, 0x4a, 0x26, 0xd6, 0xa2, 0x2c, 0xb2, 0x0d, 0x23, 0xfe, 0x48, 0xfe, 0x47, 0xb3, 0x9c, 0xff,
		0x92, 0x04, 0xc3, 0xbe, 0xc8, 0x9c, 0x84, 0x54, 0x6a, 0xbd, 0x6e, 0x5c, 0x2e, 0xab, 0x75, 0x4d,
		0xb5, 0xb9, 0x2a, 0x01, 0x2d, 0x9a, 0x23, 0x25, 0xbd, 0x0e, 0xdd, 0x8f, 0x68, 0x92, 0x25, 0x33,
		0x83, 0xf2, 0x47, 0x24, 0xc8, 0x84, 0x43, 0xe3, 0x10, 0x9b, 0xd2, 0xdf, 0x25, 0x9b, 0xf2, 0x87,
		0x25, 0x18, 0x0b, 0xc6, 0xc3, 0x21, 0xf6, 0x6e, 0xf9, 0x3b, 0x65, 0xef, 0xcf, 0x63, 0x30, 0x1a,
		0x88, 0x82, 0x7b, 0xe5, 0xee, 0x59, 0x98, 0xd0, 0xaa, 0xb8, 0x61, 0x1a, 0x0e, 0xd6, 0x2b, 0xfb,
		0xe5, 0x3a, 0xbe, 0x84, 0xeb, 0x59, 0x99, 0x1a, 0x99, 0x93, 0xdd, 0xe3, 0xec, 0xfc, 0x92, 0x87,
		0xb7, 0x4c, 0xd0, 0x0a, 0x93, 0x4b, 0x0b, 0xa5, 0x95, 0xf5, 0xb5, 0xcd, 0xd2, 0xea, 0xfc, 0x53,
		0xe5, 0xad, 0xd5, 0x8b, 0xab, 0x6b, 0x4f, 0xac, 0x2a, 0x19, 0x2d, 0x04, 0x76, 0x03, 0xa7, 0xfd,
		0x3a, 0x64, 0xc2, 0x4c, 0xa1, 0x23, 0xd0, 0x8e, 0xad, 0xcc, 0x00, 0x9a, 0x84, 0xf1, 0xd5, 0xb5,
		0xf2, 0xc6, 0xd2, 0x42, 0xa9, 0x5c, 0x3a, 0x77, 0xae, 0x34, 0xbf, 0xb9, 0xc1, 0x76, 0x4e, 0x5c,
		0xe8, 0xcd, 0xc0, 0x04, 0x97, 0x3f, 0x18, 0x87, 0xc9, 0x36, 0x9c, 0xa0, 0x39, 0xbe, 0xe6, 0x61,
		0xcb, 0xb0, 0x7b, 0x7a, 0xe1, 0x3e, 0x4f, 0xa2, 0x8e, 0x75, 0xd5, 0x72, 0xf8, 0x12, 0xe9, 0x4e,
		0x20, 0x52, 0xd2, 0x1d, 0x62, 0x5c, 0x2d, 0xbe, 0x23, 0xc5, 0x16, 0x42, 0xe3, 0x5e, 0x39, 0xdb,
		0x94, 0xba, 0x1b, 0x90, 0x69, 0xd8, 0x9a, 0xa3, 0x5d, 0xc2, 0x65, 0x4d, 0x17, 0xdb, 0x57, 0x64,
		0x61, 0x94, 0x50, 0x32, 0xa2, 0x66, 0x49, 0x77, 0x5c, 0x68, 0x1d, 0xd7, 0xd4, 0x10, 0x74, 0x92,
		0x9e, 0xb8, 0x65, 0x44, 0x8d, 0x0b, 0x7d, 0x0b, 0x8c, 0x54, 0x8d, 0x26, 0x89, 0x16, 0x19, 0x1c,
		0xf1, 0x35, 0x92, 0x32, 0xcc, 0xca, 0x5c, 0x10, 0xbe, 0x0e, 0xf0, 0xf6, 0xcd, 0x46, 0x94, 0x61,
		0x56, 0xc6, 0x40, 0xee, 0x80, 0x71, 0xb5, 0x56, 0xb3, 0x08, 0x71, 0x41, 0x88, 0xad, 0x6c, 0xc6,
		0xdc, 0x62, 0x0a, 0x98, 0xbb, 0x00, 0x29, 0x21, 0x07, 0xe2, 0xec, 0x89, 0x24, 0xca, 0x26, 0x5b,
		0xae, 0xc7, 0x8e, 0xa7, 0x95, 0x94, 0x2e, 0x2a, 0x6f, 0x81, 0x11, 0xcd, 0x2e, 0x7b, 0xc7, 0x00,
		0xb1, 0xd9, 0xd8, 0xf1, 0x94, 0x32, 0xac, 0xd9, 0xee, 0x16, 0xaa, 0xfc, 0x89, 0x18, 0x8c, 0x05,
		0x8f, 0x31, 0xd0, 0x02, 0xa4, 0xea, 0x46, 0x45, 0xa5, 0xaa, 0xc5, 0xce, 0xd0, 0x8e, 0x47, 0x9c,
		0x7c, 0xe4, 0x97, 0x39, 0xbc, 0xe2, 0x62, 0xe6, 0xfe, 0xbd, 0x04, 0x29, 0x51, 0x8c, 0x0e, 0x43,
		0xc2, 0x54, 0x9d, 0x5d, 0x4a, 0x2e, 0x59, 0x8c, 0x65, 0x24, 0x85, 0x7e, 0x93, 0x72, 0xdb, 0x54,
		0x75, 0xaa, 0x02, 0xbc, 0x9c, 0x7c, 0x93, 0x71, 0xad, 0x63, 0xb5, 0x4a, 0x97, 0x4d, 0x46, 0xa3,
		0x81, 0x75, 0xc7, 0x16, 0xe3, 0xca, 0xcb, 0xe7, 0x79, 0x31, 0xba, 0x0b, 0x26, 0x1c, 0x4b, 0xd5,
		0xea, 0x01, 0xd8, 0x04, 0x85, 0xcd, 0x88, 0x0a, 0x17, 0xb8, 0x00, 0x47, 0x05, 0xdd, 0x2a, 0x76,
		0xd4, 0xca, 0x2e, 0xae, 0x7a, 0x48, 0x83, 0x74, 0x7b, 0xe4, 0x08, 0x07, 0x58, 0xe0, 0xf5, 0x02,
		0x57, 0xfe, 0xaa, 0x04, 0x13, 0x62, 0xa1, 0x57, 0x75, 0x85, 0xb5, 0x02, 0xa0, 0xea, 0xba, 0xe1,
		0xf8, 0xc5, 0xd5, 0xaa, 0xca, 0x2d, 0x78, 0xf9, 0x39, 0x17, 0x49, 0xf1, 0x11, 0xc8, 0x35, 0x00,
		0xbc, 0x9a, 0x8e, 0x62, 0x9b, 0x81, 0x61, 0x7e, 0x46, 0x45, 0x0f, 0x3a, 0xd9, 0xd6, 0x00, 0xb0,
		0x22, 0xb2, 0x22, 0x44, 0x53, 0x90, 0xdc, 0xc6, 0x35, 0x4d, 0xe7, 0x3b, 0xcf, 0xec, 0x43, 0x6c,
		0xe0, 0x24, 0xdc, 0x0d, 0x9c, 0xe2, 0xff, 0xd7, 0xfe, 0x10, 0x38, 0x13, 0xda, 0x9e, 0xb0, 0xcf,
		0x4b, 0x4f, 0xdf, 0x13, 0x79, 0x0c, 0xec, 0x45, 0xb7, 0x81, 0x13, 0xe0, 0x5c, 0xf8, 0x04, 0x58,
		0xc1, 0x3b, 0x75, 0x5c, 0x21, 0x1d, 0x84, 0xef, 0xde, 0x05, 0x53, 0x35, 0xa3, 0x66, 0x50, 0x4a,
		0x27, 0xc9, 0x2f, 0x7e, 0xd2, 0x9b, 0x76, 0x4b, 0x73, 0x91, 0xc7, 0xc2, 0x85, 0x55, 0x98, 0xe4,
		0xc0, 0x65, 0x7a, 0xd4, 0xc4, 0x16, 0x42, 0xa8, 0xeb, 0x2e, 0x5c, 0xf6, 0xb3, 0xdf, 0xa6, 0xee,
		0x5b, 0x99, 0xe0, 0xa8, 0xa4, 0x8e, 0xad, 0x95, 0x0a, 0x0a, 0x1c, 0x0a, 0xd0, 0x63, 0x93, 0x14,
		0x5b, 0x11, 0x14, 0xff, 0x80, 0x53, 0x9c, 0xf4, 0x51, 0xdc, 0xe0, 0xa8, 0x85, 0x79, 0x18, 0xed,
		0x87, 0xd6, 0xbf, 0xe5, 0xb4, 0x46, 0xb0, 0x9f, 0xc8, 0x22, 0x8c, 0x53, 0x22, 0x95, 0xa6, 0xed,
		0x18, 0x0d, 0x6a, 0x01, 0xbb, 0x93, 0xf9, 0x77, 0xdf, 0x66, 0xb3, 0x66, 0x8c, 0xa0, 0xcd, 0xbb,
		0x58, 0x85, 0x02, 0xd0, 0xd3, 0xb5, 0x2a, 0xae, 0xd4, 0x23, 0x28, 0x7c, 0x99, 0x33, 0xe2, 0xc2,
		0x17, 0x1e, 0x87, 0x29, 0xf2, 0x9b, 0x1a, 0x28, 0x3f, 0x27, 0xd1, 0x5b, 0x76, 0xd9, 0xaf, 0xbe,
		0x83, 0x4d, 0xcc, 0x49, 0x97, 0x80, 0x8f, 0x27, 0xdf, 0x28, 0xd6, 0xb0, 0xe3, 0x60, 0xcb, 0x2e,
		0xab, 0xf5, 0x76, 0xec, 0xf9, 0xf6, 0x3c, 0xb2, 0x1f, 0xf8, 0x5e, 0x70, 0x14, 0x17, 0x19, 0xe6,
		0x5c, 0xbd, 0x5e, 0xd8, 0x82, 0x23, 0x6d, 0xb4, 0xa2, 0x07, 0x9a, 0x1f, 0xe4, 0x34, 0xa7, 0x5a,
		0x34, 0x83, 0x90, 0x5d, 0x07, 0x51, 0xee, 0x8e, 0x65, 0x0f, 0x34, 0x3f, 0xc4, 0x69, 0x22, 0x8e,
		0x2b, 0x86, 0x94, 0x50, 0xbc, 0x00, 0x13, 0x97, 0xb0, 0xb5, 0x6d, 0xd8, 0x7c, 0x9f, 0xa9, 0x07,
		0x72, 0x1f, 0xe6, 0xe4, 0xc6, 0x39, 0x22, 0xdd, 0x78, 0x22, 0xb4, 0x1e, 0x86, 0xd4, 0x8e, 0x5a,
		0xc1, 0x3d, 0x90, 0xb8, 0xca, 0x49, 0x0c, 0x11, 0x78, 0x82, 0x3a, 0x07, 0x23, 0x35, 0x83, 0xfb,
		0xa8, 0x68, 0xf4, 0x8f, 0x70, 0xf4, 0x61, 0x81, 0xc3, 0x49, 0x98, 0x86, 0xd9, 0xac, 0x13, 0x07,
		0x16, 0x4d, 0xe2, 0x1f, 0x0b, 0x12, 0x02, 0x87, 0x93, 0xe8, 0x43, 0xac, 0x2f, 0x09, 0x12, 0xb6,
		0x4f, 0x9e, 0x8f, 0xc2, 0xb0, 0xa1, 0xd7, 0xf7, 0x0d, 0xbd, 0x17, 0x26, 0x3e, 0xca, 0x29, 0x00,
		0x47, 0x21, 0x04, 0xce, 0x42, 0xba, 0xd7, 0x81, 0xf8, 0x95, 0xef, 0x89, 0xe9, 0x21, 0x46, 0x60,
		0x11, 0xc6, 0x85, 0x81, 0xd2, 0x0c, 0xbd, 0x07, 0x12, 0xbf, 0xca, 0x49, 0x8c, 0xf9, 0xd0, 0x78,
		0x37, 0x1c, 0x6c, 0x3b, 0x35, 0xdc, 0x0b, 0x91, 0x4f, 0x88, 0x6e, 0x70, 0x14, 0x2e, 0xca, 0x6d,
		0xac, 0x57, 0x76, 0x7b, 0xa3, 0xf0, 0x49, 0x21, 0x4a, 0x81, 0x43, 0x48, 0xcc, 0xc3, 0x68, 0x43,
		0xb5, 0xec, 0x5d, 0xb5, 0xde, 0xd3, 0x70, 0xfc, 0x1a, 0xa7, 0x31, 0xe2, 0x22, 0x71, 0x89, 0x34,
		0xf5, 0x7e, 0xc8, 0x7c, 0x4a, 0x48, 0xc4, 0x87, 0xc6, 0xa7, 0x9e, 0xed, 0xd0, 0x4d, 0xb9, 0x7e,
		0xa8, 0xfd, 0xba, 0x98, 0x7a, 0x0c, 0x77, 0xc5, 0x4f, 0xf1, 0x2c, 0xa4, 0x6d, 0xed, 0xb9, 0x9e,
		0xc8, 0x7c, 0x5a, 0x8c, 0x34, 0x45, 0x20, 0xc8, 0x4f, 0xc1, 0xd1, 0xb6, 0x6e, 0xa2, 0x07, 0x62,
		0xff, 0x94, 0x13, 0x3b, 0xdc, 0xc6, 0x55, 0x70, 0x93, 0xd0, 0x2f, 0xc9, 0x7f, 0x26, 0x4c, 0x02,
		0x0e, 0xd1, 0x5a, 0x27, 0xab, 0x06, 0x5b, 0xdd, 0xe9, 0x4f, 0x6a, 0xbf, 0x21, 0xa4, 0xc6, 0x70,
		0x03, 0x52, 0xdb, 0x84, 0xc3, 0x9c, 0x62, 0x7f, 0xe3, 0xfa, 0x19, 0x61, 0x58, 0x19, 0xf6, 0x56,
		0x70, 0x74, 0xdf, 0x04, 0x39, 0x57, 0x9c, 0x22, 0x3c, 0xb5, 0xcb, 0x0d, 0xd5, 0xec, 0x81, 0xf2,
		0x67, 0x39, 0x65, 0x61, 0xf1, 0xdd, 0xf8, 0xd6, 0x5e, 0x51, 0x4d, 0x42, 0xfc, 0x49, 0xc8, 0x0a,
		0xe2, 0x4d, 0xdd, 0xc2, 0x15, 0xa3, 0xa6, 0x6b, 0xcf, 0xe1, 0x6a, 0x0f, 0xa4, 0x3f, 0x17, 0x1a,
		0xaa, 0x2d, 0x1f, 0x3a, 0xa1, 0xbc, 0x04, 0x19, 0x37, 0x56, 0x29, 0x6b, 0x0d, 0xd3, 0xb0, 0x9c,
		0x08, 0x8a, 0x9f, 0x17, 0x23, 0xe5, 0xe2, 0x2d, 0x51, 0xb4, 0x42, 0x09, 0xd8, 0x49, 0x75, 0xaf,
		0x2a, 0xf9, 0x05, 0x4e, 0x68, 0xd4, 0xc3, 0xe2, 0x86, 0xa3, 0x62, 0x34, 0x4c, 0xd5, 0xea, 0xc5,
		0xfe, 0xfd, 0xa6, 0x30, 0x1c, 0x1c, 0x85, 0x1b, 0x0e, 0x12, 0xd1, 0x11, 0x6f, 0xdf, 0x03, 0x85,
		0x2f, 0x0a, 0xc3, 0x21, 0x70, 0x38, 0x09, 0x11, 0x30, 0xf4, 0x40, 0xe2, 0x9f, 0x0b, 0x12, 0x02,
		0x87, 0x90, 0x78, 0xcc, 0x73, 0xb4, 0x16, 0xae, 0x69, 0xb6, 0x63, 0xb1, 0xa0, 0xb8, 0x3b, 0xa9,
		0x7f, 0xf1, 0xbd, 0x60, 0x10, 0xa6, 0xf8, 0x50, 0x89, 0x25, 0xe2, 0xdb, 0xb4, 0x74, 0xcd, 0x14,
		0xcd, 0xd8, 0x6f, 0x09, 0x4b, 0xe4, 0x43, 0x23, 0xbc, 0xf9, 0x22, 0x44, 0x22, 0xf6, 0x0a, 0x59,
		0x29, 0xf4, 0x40, 0xee, 0xb7, 0x43, 0xcc, 0x6d, 0x08, 0x5c, 0x42, 0xd3, 0x17, 0xff, 0x34, 0xf5,
		0x3d, 0xbc, 0xdf, 0x93, 0x76, 0xfe, 0xcb, 0x50, 0xfc, 0xb3, 0xc5, 0x30, 0x99, 0x0d, 0x19, 0x0f,
		0xc5, 0x53, 0x28, 0xea, 0x5e, 0x52, 0xf6, 0x6d, 0x3f, 0xe0, 0xfd, 0x0d, 0x86, 0x53, 0x85, 0x65,
		0xa2, 0xe4, 0xc1, 0xa0, 0x27, 0x9a, 0xd8, 0x3b, 0x7e, 0xe0, 0xea, 0x79, 0x20, 0xe6, 0x29, 0x9c,
		0x83, 0xd1, 0x40, 0xc0, 0x13, 0x4d, 0xea, 0x9d, 0x9c, 0xd4, 0x88, 0x3f, 0xde, 0x29, 0x9c, 0x86,
		0x04, 0x09, 0x5e, 0xa2, 0xd1, 0x7f, 0x96, 0xa3, 0x53, 0xf0, 0xc2, 0x23, 0x90, 0x12, 0x41, 0x4b,
		0x34, 0xea, 0xcf, 0x71, 0x54, 0x17, 0x85, 0xa0, 0x8b, 0x80, 0x25, 0x1a, 0xfd, 0xff, 0x17, 0xe8,
		0x02, 0x85, 0xa0, 0xf7, 0x2e, 0xc2, 0x2f, 0xfd, 0x7c, 0x82, 0x3b, 0x1d, 0x21, 0xbb, 0xb3, 0x30,
		0xc4, 0x23, 0x95, 0x68, 0xec, 0x77, 0xf3, 0xc6, 0x05, 0x46, 0xe1, 0x0c, 0x24, 0x7b, 0x14, 0xf8,
		0x2f, 0x70, 0x54, 0x06, 0x5f, 0x98, 0x87, 0x61, 0x5f, 0x74, 0x12, 0x8d, 0xfe, 0x0f, 0x39, 0xba,
		0x1f, 0x8b, 0xb0, 0xce, 0xa3, 0x93, 0x68, 0x02, 0xbf, 0x28, 0x58, 0xe7, 0x18, 0x44, 0x6c, 0x22,
		0x30, 0x89, 0xc6, 0x7e, 0x8f, 0x90, 0xba, 0x40, 0x29, 0x3c, 0x0a, 0x69, 0xd7, 0xd9, 0x44, 0xe3,
		0xbf, 0xc8, 0xf1, 0x3d, 0x1c, 0x22, 0x01, 0x9f, 0xb3, 0x8b, 0x26, 0xf1, 0x4b, 0x42, 0x02, 0x3e,
		0x2c, 0x32, 0x8d, 0xc2, 0x01, 0x4c, 0x34, 0xa5, 0xf7, 0x8a, 0x69, 0x14, 0x8a, 0x5f, 0xc8, 0x68,
		0x52, 0x9b, 0x1f, 0x4d, 0xe2, 0x97, 0xc5, 0x68, 0x52, 0x78, 0xc2, 0x46, 0x38, 0x22, 0x88, 0xa6,
		0xf1, 0x3e, 0xc1, 0x46, 0x28, 0x20, 0x28, 0xac, 0x03, 0x6a, 0x8d, 0x06, 0xa2, 0xe9, 0xbd, 0x9f,
		0xd3, 0x9b, 0x68, 0x09, 0x06, 0x0a, 0x4f, 0xc0, 0xe1, 0xf6, 0x91, 0x40, 0x34, 0xd5, 0x0f, 0xfc,
		0x20, 0xb4, 0x76, 0xf3, 0x07, 0x02, 0x85, 0x4d, 0xcf, 0xa5, 0xf8, 0xa3, 0x80, 0x68, 0xb2, 0x1f,
		0xfc, 0x41, 0xd0, 0x70, 0xfb, 0x83, 0x80, 0xc2, 0x1c, 0x80, 0xe7, 0x80, 0xa3, 0x69, 0x7d, 0x98,
		0xd3, 0xf2, 0x21, 0x91, 0xa9, 0xc1, 0xfd, 0x6f, 0x34, 0xfe, 0x55, 0x31, 0x35, 0x38, 0x06, 0x99,
		0x1a, 0xc2, 0xf5, 0x46, 0x63, 0x7f, 0x44, 0x4c, 0x0d, 0x81, 0x42, 0x34, 0xdb, 0xe7, 0xdd, 0xa2,
		0x29, 0x7c, 0x54, 0x68, 0xb6, 0x0f, 0xab, 0xb0, 0x0a, 0x13, 0x2d, 0x0e, 0x31, 0x9a, 0xd4, 0xc7,
		0x38, 0xa9, 0x4c, 0xd8, 0x1f, 0xfa, 0x9d, 0x17, 0x77, 0x86, 0xd1, 0xd4, 0x3e, 0x1e, 0x72, 0x5e,
		0xdc, 0x17, 0x16, 0xce, 0x42, 0x4a, 0x6f, 0xd6, 0xeb, 0x64, 0xf2, 0xa0, 0xee, 0x77, 0x09, 0xb3,
		0x7f, 0xf9, 0x43, 0x2e, 0x1d, 0x81, 0x50, 0x38, 0x0d, 0x49, 0xdc, 0xd8, 0xc6, 0xd5, 0x28, 0xcc,
		0xef, 0xfe, 0x50, 0x18, 0x4c, 0x02, 0x5d, 0x78, 0x14, 0x80, 0x6d, 0x8d, 0xd0, 0xc3, 0xc3, 0x08,
		0xdc, 0xff, 0xf6, 0x43, 0x7e, 0x79, 0xc7, 0x43, 0xf1, 0x08, 0xb0, 0xab, 0x40, 0xdd, 0x09, 0x7c,
		0x2f, 0x48, 0x80, 0x8e, 0xc8, 0xc3, 0x30, 0xf4, 0x8c, 0x6d, 0xe8, 0x8e, 0x5a, 0x8b, 0xc2, 0xfe,
		0xef, 0x1c, 0x5b, 0xc0, 0x13, 0x81, 0x35, 0x0c, 0x0b, 0x3b, 0x6a, 0xcd, 0x8e, 0xc2, 0xfd, 0x2b,
		0x8e, 0xeb, 0x22, 0x10, 0xe4, 0x8a, 0x6a, 0x3b, 0xbd, 0xf4, 0xfb, 0xaf, 0x05, 0xb2, 0x40, 0x20,
		0x4c, 0x93, 0xdf, 0x7b, 0x78, 0x3f, 0x0a, 0xf7, 0x15, 0xc1, 0x34, 0x87, 0x2f, 0x3c, 0x02, 0x69,
		0xf2, 0x93, 0xdd, 0xc8, 0x8b, 0x40, 0xfe, 0x1f, 0x1c, 0xd9, 0xc3, 0x20, 0x2d, 0xdb, 0x4e, 0xd5,
		0xd1, 0xa2, 0x85, 0xfd, 0x2a, 0x1f, 0x69, 0x01, 0x5f, 0x98, 0x83, 0x61, 0xdb, 0xa9, 0x56, 0x9b,
		0x3c, 0x3e, 0x8d, 0x40, 0xff, 0xfe, 0x0f, 0xdd, 0x2d, 0x0b, 0x17, 0x87, 0x8c, 0xf6, 0xe5, 0x3d,
		0xc7, 0x34, 0xe8, 0x81, 0x47, 0x14, 0x85, 0x1f, 0x70, 0x0a, 0x3e, 0x94, 0xc2, 0x3c, 0x8c, 0x90,
		0xbe, 0x58, 0xd8, 0xc4, 0xf4, 0x74, 0x2a, 0x82, 0xc4, 0xdf, 0x70, 0x01, 0x04, 0x90, 0x8a, 0x6f,
		0xe9, 0x2f, 0x55, 0x08, 0x16, 0x8d, 0x45, 0x83, 0xed, 0x0f, 0x3f, 0x2d, 0xd7, 0x34, 0x67, 0xb7,
		0xb9, 0x9d, 0xaf, 0x18, 0x0d, 0xba, 0x8d, 0xeb, 0xed, 0xd6, 0xba, 0x8b, 0x1c, 0xf8, 0x50, 0x1a,
		0x8e, 0x56, 0x0c, 0xbb, 0x61, 0xd8, 0x65, 0xb6, 0xdf, 0xcb, 0x3e, 0xf8, 0x8e, 0xef, 0x88, 0xbf,
		0x2a, 0x7a, 0xd3, 0x57, 0xbe, 0x08, 0x93, 0x4b, 0xa4, 0xeb, 0x24, 0xa4, 0xf3, 0xb6, 0xab, 0xdb,
		0x5e, 0xa4, 0x9b, 0x0d, 0x44, 0x2f, 0x7c, 0xbb, 0xdc, 0x5f, 0x24, 0xbf, 0x4d, 0x82, 0xcc, 0x46,
		0x45, 0xad, 0xab, 0xd6, 0x6b, 0x25, 0x85, 0xce, 0x00, 0xd0, 0x04, 0x0c, 0x2f, 0x63, 0x62, 0xec,
		0x54, 0x36, 0xef, 0xef, 0x5c, 0x9e, 0xb5, 0x44, 0xaf, 0x63, 0xa7, 0x29, 0x2c, 0xf9, 0x79, 0xe2,
		0x49, 0x00, 0xaf, 0x02, 0xdd, 0x04, 0x47, 0x36, 0xe6, 0xe7, 0x96, 0xe7, 0x94, 0x32, 0xbb, 0xd9,
		0xbb, 0xba, 0xb1, 0x5e, 0x9a, 0x5f, 0x3a, 0xb7, 0x54, 0x5a, 0xc8, 0x0c, 0xa0, 0xc3, 0x80, 0xfc,
		0x95, 0xee, 0x21, 0xfb, 0x21, 0x98, 0xf0, 0x97, 0xb3, 0xeb, 0xc1, 0xb1, 0xc2, 0x79, 0xb2, 0xec,
		0x71, 0x76, 0x8d, 0x6a, 0x59, 0xad, 0x56, 0x71, 0xb5, 0xac, 0xe9, 0x28, 0xe2, 0x2a, 0x60, 0xf6,
		0x0f, 0xff, 0x53, 0x92, 0x76, 0x6d, 0x94, 0x21, 0xce, 0x11, 0xbc, 0x25, 0x9d, 0x38, 0x50, 0xad,
		0x61, 0xd6, 0x31, 0x3d, 0x11, 0x29, 0x6b, 0x42, 0xfe, 0xd1, 0xb6, 0x99, 0xd0, 0x8b, 0x1f, 0x4f,
		0x2b, 0x93, 0x1e, 0xba, 0x3b, 0x7a, 0x85, 0x8b, 0x90, 0x11, 0x77, 0x6c, 0x5c, 0x06, 0x23, 0x29,
		0x7e, 0x85, 0x73, 0x28, 0x96, 0x66, 0x82, 0xc5, 0x65, 0x98, 0x50, 0x2b, 0x15, 0x6c, 0x06, 0xf8,
		0x8b, 0x98, 0x0e, 0xa2, 0xb7, 0x19, 0x8e, 0xe9, 0xb1, 0x76, 0x06, 0x06, 0x6d, 0x3a, 0x28, 0x51,
		0x24, 0x04, 0x3b, 0x1c, 0x9c, 0xac, 0xe5, 0x99, 0x1a, 0xb8, 0x3d, 0x8a, 0x20, 0xf0, 0x47, 0x9c,
		0xc0, 0x08, 0x45, 0x13, 0xbd, 0xd1, 0x61, 0x82, 0x38, 0x69, 0xb2, 0x96, 0xf7, 0x7a, 0xd3, 0x7d,
		0x49, 0xf8, 0xaf, 0x3e, 0x7f, 0x2f, 0x3d, 0x85, 0xba, 0x25, 0xa8, 0x74, 0x6d, 0x26, 0x8b, 0x92,
		0xe1, 0xb4, 0xbd, 0xfe, 0x62, 0x18, 0x13, 0xed, 0xf1, 0x7e, 0x77, 0x6f, 0xec, 0x77, 0x79, 0x63,
		0xd3, 0xed, 0x34, 0xdc, 0xd7, 0xd2, 0x28, 0xa7, 0xca, 0x2a, 0x0a, 0x45, 0x18, 0xdd, 0xd1, 0xea,
		0xbe, 0xe1, 0xee, 0xde, 0xca, 0xef, 0x7d, 0xfe, 0x5e, 0x36, 0xd1, 0x08, 0x12, 0x17, 0x4d, 0xb1,
		0xd4, 0xc9, 0x5a, 0x3d, 0x7d, 0x97, 0xcf, 0x18, 0x31, 0xb6, 0xf8, 0x9f, 0x7b, 0x28, 0xf5, 0xb3,
		0x7e, 0x56, 0xdd, 0x04, 0xc4, 0x77, 0xc6, 0x61, 0x9a, 0x03, 0x6f, 0xab, 0x36, 0x3e, 0x79, 0xe9,
		0xbe, 0x6d, 0xec, 0xa8, 0xf7, 0x9d, 0xac, 0x18, 0x9a, 0xce, 0x4d, 0xd4, 0x24, 0x37, 0x58, 0xa4,
		0x3e, 0xcf, 0xeb, 0x73, 0x6d, 0xcf, 0xaf, 0xe4, 0x45, 0x48, 0xcc, 0x1b, 0x9a, 0x8e, 0xa6, 0x20,
		0x59, 0xc5, 0xba, 0xd1, 0xe0, 0x46, 0x84, 0x7d, 0xa0, 0x5b, 0x61, 0x50, 0x6d, 0x18, 0x4d, 0xdd,
		0x61, 0x06, 0xa4, 0x38, 0xfc, 0xe5, 0x6b, 0x33, 0x03, 0x7f, 0x76, 0x6d, 0x26, 0xbe, 0xa4, 0x3b,
		0x0a, 0xaf, 0x2a, 0x24, 0xbe, 0xf3, 0xd2, 0x8c, 0x24, 0x5f, 0x80, 0xa1, 0x05, 0x5c, 0x39, 0x08,
		0xad, 0x05, 0x5c, 0x09, 0xd1, 0xba, 0x13, 0x52, 0x4b, 0xba, 0xc3, 0x2e, 0x1c, 0x1f, 0x83, 0xb8,
		0xa6, 0xb3, 0x3b, 0x6c, 0xa1, 0xf6, 0x49, 0x39, 0x01, 0x5d, 0xc0, 0x15, 0x17, 0xb4, 0x8a, 0x2b,
		0x61, 0x50, 0x42, 0x9e, 0x94, 0x17, 0x17, 0xbe, 0xf6, 0x5f, 0xa6, 0x07, 0x9e, 0xff, 0xe6, 0xf4,
		0x40, 0xc7, 0xf1, 0x90, 0x3b, 0x8e, 0x87, 0x5d, 0xdd, 0x63, 0x87, 0x87, 0xee, 0x30, 0xbc, 0x37,
		0x06, 0xd3, 0x2d, 0xb6, 0x9f, 0xbb, 0xc9, 0x4e, 0x59, 0xa0, 0x05, 0x48, 0x2d, 0x08, 0xef, 0xdb,
		0x6f, 0x7e, 0xec, 0x87, 0xfa, 0xcc, 0x8f, 0x1d, 0x15, 0x2d, 0x89, 0xf4, 0xd8, 0xfb, 0x7a, 0x4c,
		0x8f, 0x15, 0x9d, 0x38, 0x50, 0x76, 0xec, 0x2f, 0x4f, 0xc2, 0x91, 0x9a, 0x71, 0x09, 0x5b, 0xba,
		0x61, 0xd9, 0x27, 0x6d, 0x47, 0xdd, 0xd3, 0xf4, 0x1a, 0x17, 0xc7, 0x11, 0xcb, 0xa8, 0xd7, 0x55,
		0xd3, 0xcc, 0xbb, 0x00, 0x79, 0xda, 0x6e, 0x7b, 0xcd, 0xcc, 0x45, 0x48, 0x37, 0x17, 0x95, 0x9f,
		0x9c, 0xeb, 0xec, 0xc3, 0xe5, 0x4f, 0xc7, 0x60, 0x7c, 0xde, 0x68, 0x34, 0x34, 0x9b, 0xa5, 0x67,
		0x39, 0xd8, 0x46, 0xeb, 0x90, 0xb0, 0x54, 0x87, 0x7b, 0xd1, 0xe2, 0x4f, 0x70, 0xf5, 0xb9, 0x3d,
		0x5a, 0x25, 0xf2, 0x0b, 0xb8, 0xf2, 0xc7, 0x5f, 0xb8, 0x07, 0x78, 0x0b, 0x44, 0xdf, 0x28, 0x25,
		0xf4, 0x04, 0xa4, 0x1a, 0xea, 0x95, 0x32, 0xa5, 0x1a, 0xbb, 0x0e, 0x54, 0x87, 0x1a, 0xea, 0x15,
		0xc2, 0x2b, 0xaa, 0xc2, 0x38, 0x21, 0x5c, 0xd9, 0x55, 0xf5, 0x1a, 0x66, 0xf4, 0xe3, 0xd7, 0x81,
		0xfe, 0x68, 0x43, 0xbd, 0x32, 0x4f, 0x69, 0x92, 0x56, 0x0a, 0xa9, 0xf7, 0xbf, 0x34, 0x33, 0x40,
		0xe7, 0xe3, 0xef, 0x48, 0x00, 0x9e, 0xb8, 0xd0, 0x5b, 0x20, 0x53, 0x71, 0xbf, 0x68, 0xf3, 0x4c,
		0x87, 0x87, 0x4f, 0x1d, 0xcf, 0x77, 0x18, 0xe3, 0x7c, 0x48, 0xda, 0xc5, 0x14, 0xe1, 0xf4, 0xe5,
		0x6b, 0x33, 0x92, 0x32, 0x5e, 0x09, 0x0d, 0x44, 0x09, 0x86, 0x9b, 0x66, 0x55, 0x75, 0x70, 0x99,
		0x8c, 0x28, 0xcf, 0xa7, 0xc9, 0xb5, 0xd8, 0x5d, 0x37, 0xff, 0x9b, 0xd1, 0x7a, 0xcf, 0x37, 0x66,
		0x24, 0x05, 0x18, 0x22, 0xa9, 0xf2, 0xb1, 0xff, 0x69, 0x09, 0x86, 0x17, 0x7c, 0x91, 0x4f, 0x16,
		0x86, 0x1a, 0x86, 0xae, 0xed, 0x61, 0x8b, 0x5b, 0x28, 0xf1, 0x89, 0x72, 0x90, 0x62, 0xd7, 0x71,
		0x9c, 0x7d, 0x91, 0x51, 0x26, 0xbe, 0x09, 0xd6, 0x65, 0xbc, 0x6d, 0x6b, 0x42, 0xd8, 0x8a, 0xf8,
		0x44, 0x77, 0x42, 0xc6, 0xc6, 0x95, 0xa6, 0xa5, 0x39, 0xfb, 0xe5, 0x0a, 0x59, 0x99, 0x54, 0x1c,
		0x7e, 0xb1, 0x63, 0x5c, 0x94, 0xcf, 0xb3, 0x62, 0x42, 0xa4, 0x8a, 0x1d, 0x55, 0xab, 0xdb, 0x59,
		0xe6, 0x45, 0xc5, 0xa7, 0x8f, 0xdd, 0x57, 0x92, 0x90, 0x5a, 0xe4, 0xe2, 0x43, 0xf3, 0x90, 0x31,
		0x4c, 0x6c, 0xa9, 0xf4, 0x2a, 0x6e, 0xb5, 0x6a, 0x61, 0xdb, 0xe6, 0x1a, 0x9a, 0xfd, 0xe3, 0x2f,
		0xdc, 0x33, 0xc5, 0x47, 0x6f, 0x8e, 0xd5, 0xb0, 0x8d, 0x4b, 0x65, 0x5c, 0x60, 0xf0, 0x62, 0x74,
		0x16, 0x06, 0x6d, 0x47, 0x75, 0x9a, 0xcc, 0xa4, 0x8c, 0x9d, 0xba, 0xb5, 0xe3, 0x30, 0x15, 0x0d,
		0xbd, 0xba, 0x41, 0x41, 0x15, 0x8e, 0x82, 0x0e, 0xc3, 0xe0, 0x33, 0xaa, 0x56, 0x17, 0xd7, 0x08,
		0x15, 0xfe, 0x85, 0x36, 0x61, 0xd0, 0x31, 0xf6, 0x30, 0x4f, 0xda, 0xe8, 0x4f, 0xf7, 0x96, 0x74,
		0xc7, 0xa7, 0x7b, 0xd4, 0x99, 0x30, 0x5a, 0xa8, 0x06, 0x99, 0x2a, 0xae, 0xe3, 0x1a, 0xed, 0xb0,
		0xbd, 0xab, 0x5a, 0x98, 0x4b, 0xea, 0x35, 0xea, 0xf6, 0xb8, 0x4b, 0x75, 0x83, 0x12, 0x45, 0xcb,
		0xc1, 0x00, 0x79, 0x90, 0x6a, 0xd9, 0x6d, 0x1d, 0x05, 0xe3, 0xd3, 0x9f, 0x62, 0x82, 0x70, 0x12,
		0x0c, 0xa6, 0xef, 0x84, 0x4c, 0x53, 0xdf, 0x36, 0x74, 0x7a, 0x63, 0x67, 0x17, 0x6b, 0xb5, 0x5d,
		0x87, 0xde, 0x9c, 0x8a, 0x2b, 0xe3, 0x6e, 0xf9, 0x79, 0x5a, 0x8c, 0x2e, 0xc2, 0x98, 0x07, 0x4a,
		0x35, 0x3c, 0xd5, 0x87, 0x86, 0x8f, 0xba, 0xb8, 0xa4, 0x16, 0x2d, 0x01, 0x78, 0xd3, 0x87, 0xa7,
		0x7f, 0xdf, 0xda, 0xc3, 0x24, 0xe4, 0x7d, 0xf0, 0x21, 0xa3, 0x3a, 0x4c, 0x36, 0x34, 0xbd, 0x6c,
		0xe3, 0xfa, 0x4e, 0x99, 0x0b, 0x8b, 0xd0, 0x84, 0xeb, 0x30, 0xb8, 0x13, 0x0d, 0x4d, 0xdf, 0xc0,
		0xf5, 0x9d, 0x05, 0x97, 0x6c, 0x61, 0xe4, 0x5d, 0x2f, 0xcd, 0x0c, 0x70, 0x95, 0x1f, 0x90, 0xff,
		0x4d, 0x0c, 0x06, 0xd7, 0x55, 0x4b, 0x6d, 0xd8, 0xe8, 0x42, 0x8b, 0x78, 0x98, 0x69, 0x39, 0xda,
		0x9a, 0x68, 0xcc, 0xfd, 0x01, 0x93, 0xce, 0xfb, 0xdb, 0x48, 0xe7, 0x0d, 0x30, 0x46, 0xec, 0xe4,
		0x25, 0xb5, 0xae, 0x55, 0xc9, 0xd0, 0x33, 0xfd, 0x1f, 0xa5, 0x86, 0xee, 0x71, 0xb7, 0x10, 0xcd,
		0xc0, 0x30, 0x01, 0xc3, 0xba, 0x63, 0x69, 0x98, 0xdd, 0xdf, 0x1a, 0x55, 0xa0, 0xa1, 0x5e, 0x29,
		0xb1, 0x12, 0x74, 0x0c, 0x80, 0x90, 0x2d, 0xb3, 0xa8, 0x86, 0x4d, 0xed, 0x34, 0x29, 0x59, 0xa0,
		0x91, 0xcd, 0x5b, 0x99, 0xe4, 0x42, 0x36, 0x91, 0xab, 0xed, 0x72, 0x7f, 0x6a, 0xfb, 0xea, 0xb5,
		0x99, 0xdc, 0xbe, 0xda, 0xa8, 0x17, 0xe4, 0x36, 0x24, 0x65, 0x2a, 0xc9, 0xa0, 0x29, 0xf5, 0x19,
		0x8e, 0x77, 0xc4, 0x20, 0xb1, 0x6e, 0x18, 0x75, 0xf4, 0x33, 0x30, 0xa1, 0x1b, 0x4e, 0x99, 0x70,
		0x88, 0xab, 0x65, 0x3e, 0x4b, 0x99, 0xd5, 0x78, 0xac, 0xbf, 0x81, 0xfc, 0xee, 0xb5, 0x99, 0x56,
		0x52, 0xa1, 0xd1, 0x1d, 0xd7, 0x0d, 0xa7, 0x48, 0xeb, 0x37, 0xd9, 0x1c, 0xb6, 0x60, 0x34, 0xd8,
		0x34, 0x73, 0x7e, 0x2b, 0x7d, 0x37, 0x3d, 0xda, 0xad, 0xd9, 0x91, 0x6d, 0x5f, 0x9b, 0x85, 0x14,
		0x91, 0xc0, 0x2b, 0x2f, 0xcd, 0x48, 0x27, 0xbe, 0x28, 0x01, 0x78, 0x66, 0x0c, 0xdd, 0x0d, 0x47,
		0x8a, 0x6b, 0xab, 0x0b, 0xe5, 0x8d, 0xcd, 0xb9, 0xcd, 0xad, 0x8d, 0xe0, 0xfa, 0x34, 0x37, 0xfe,
		0xc2, 0xd5, 0xd9, 0xe1, 0x2d, 0xdd, 0x36, 0x71, 0x85, 0x5e, 0x7b, 0x47, 0xb7, 0xc3, 0x54, 0x10,
		0x9a, 0x7c, 0x95, 0x16, 0x32, 0x52, 0x6e, 0xe4, 0x85, 0xab, 0xb3, 0xa9, 0x2d, 0x9d, 0x35, 0x8a,
		0x8e, 0xc3, 0xa1, 0x56, 0x38, 0xb2, 0xb6, 0x8d, 0xe5, 0x46, 0x5f, 0xb8, 0x3a, 0x9b, 0xde, 0x12,
		0x7a, 0x88, 0x64, 0x40, 0x7e, 0x48, 0x4e, 0x2f, 0x9e, 0x83, 0x17, 0xae, 0xce, 0x0e, 0x32, 0xb1,
		0xe5, 0x12, 0xef, 0xfa, 0xf8, 0xf4, 0x40, 0xf1, 0xb1, 0x8e, 0x71, 0xe9, 0x19, 0x9f, 0xc4, 0xaa,
		0xfb, 0x0d, 0xb6, 0x51, 0x7c, 0x65, 0xff, 0x39, 0xef, 0xe3, 0x1e, 0xab, 0xba, 0x77, 0xf2, 0xca,
		0x49, 0x2f, 0xf4, 0x0a, 0x06, 0xab, 0x7f, 0x22, 0xc1, 0x11, 0x2e, 0xea, 0x86, 0x5d, 0x3b, 0x79,
		0xe9, 0x3e, 0xf2, 0x87, 0x87, 0x65, 0xa3, 0x5c, 0xa6, 0xa4, 0xe4, 0xd2, 0x7d, 0x3d, 0xdc, 0x62,
		0x2b, 0xc0, 0xa0, 0xad, 0xd5, 0xf4, 0x5e, 0xb6, 0x90, 0x5f, 0xf9, 0x07, 0xbf, 0xca, 0x96, 0xd3,
		0x1c, 0xa3, 0xb8, 0xd8, 0xb1, 0x8f, 0xf7, 0x44, 0x6b, 0x05, 0x61, 0x9a, 0xe7, 0x50, 0xb9, 0x3d,
		0xfb, 0x42, 0x0e, 0x90, 0xaf, 0xd7, 0x57, 0xa2, 0x62, 0xcd, 0xc8, 0xa8, 0xb1, 0x7d, 0x30, 0xda,
		0x39, 0x96, 0xcc, 0x45, 0x2c, 0xc6, 0x72, 0x9d, 0xe2, 0xe1, 0x5c, 0xa7, 0x11, 0x91, 0xdf, 0x97,
		0x80, 0x89, 0x15, 0xbb, 0x36, 0x6f, 0x61, 0xd5, 0xc1, 0x6e, 0x24, 0x10, 0x72, 0x58, 0xd2, 0x6b,
		0x73, 0x58, 0xab, 0x01, 0xc7, 0x11, 0xeb, 0x33, 0x7a, 0xeb, 0xd9, 0x7b, 0xc4, 0x6f, 0x88, 0xf7,
		0x40, 0x25, 0x98, 0xf0, 0xa2, 0x04, 0x11, 0x16, 0x25, 0x22, 0xc2, 0x22, 0x2f, 0xb0, 0x10, 0x71,
		0xd1, 0x3c, 0x64, 0x44, 0x4f, 0x5d, 0x2a, 0xc9, 0xa8, 0xe0, 0x4a, 0x60, 0x08, 0x22, 0xa7, 0x45,
		0x56, 0xf6, 0x20, 0xf7, 0x53, 0x6d, 0x16, 0xdf, 0x79, 0xb2, 0x2e, 0xe6, 0x52, 0x63, 0xd0, 0x85,
		0xfb, 0xdf, 0xc5, 0x9d, 0xdf, 0xdb, 0xff, 0xe2, 0x33, 0x27, 0x5a, 0x7b, 0x43, 0x4a, 0x5b, 0x98,
		0x93, 0x6f, 0x82, 0xa3, 0x2d, 0x8a, 0xa1, 0x60, 0xdb, 0x34, 0x74, 0x1b, 0xcb, 0xef, 0x89, 0xc3,
		0xf8, 0x8a, 0x5d, 0x2b, 0x55, 0x35, 0xe7, 0x06, 0x29, 0x4d, 0x3b, 0x79, 0xc5, 0xfa, 0x95, 0x97,
		0x0a, 0xe3, 0x61, 0x4f, 0xc9, 0xb4, 0xe4, 0xa1, 0x03, 0x07, 0x77, 0x63, 0xc1, 0x25, 0x04, 0xda,
		0x6d, 0xaf, 0x8c, 0x89, 0xbe, 0x9a, 0xe9, 0x29, 0x8c, 0x39, 0xe6, 0x1f, 0xc5, 0xd6, 0xf1, 0x3a,
		0x0a, 0x47, 0x42, 0x23, 0xe2, 0x8e, 0xd6, 0x5f, 0x49, 0x30, 0xbc, 0x62, 0xd7, 0x38, 0x2d, 0xdc,
		0x5e, 0xa5, 0xa5, 0xeb, 0xa2, 0xd2, 0x7d, 0x0f, 0xd1, 0x19, 0x77, 0xab, 0x26, 0xde, 0x9b, 0x4e,
		0x8b, 0xed, 0x9b, 0x5c, 0x67, 0x85, 0x96, 0x0f, 0xc1, 0xa4, 0xaf, 0xbf, 0xae, 0x1c, 0xbe, 0x1c,
		0x03, 0xb4, 0x62, 0xd7, 0x8a, 0xb8, 0xa6, 0xe9, 0x0a, 0xae, 0x5e, 0x67, 0x71, 0x5c, 0x80, 0x29,
		0x57, 0x1c, 0xb6, 0x55, 0xe9, 0x59, 0x24, 0xae, 0x4f, 0xd9, 0xb0, 0x2a, 0xed, 0x68, 0x55, 0x6d,
		0xc7, 0xa5, 0x15, 0xef, 0x95, 0xd6, 0x82, 0xed, 0xb4, 0x4a, 0x38, 0x71, 0xfd, 0x24, 0xbc, 0x07,
		0xb9, 0x56, 0x49, 0x0a, 0x41, 0xa3, 0x15, 0x3a, 0xef, 0xcc, 0x3a, 0xa6, 0xd7, 0x3d, 0x7d, 0x91,
		0x75, 0x6f, 0x0b, 0x8f, 0x31, 0x0f, 0x99, 0x54, 0xcb, 0xaf, 0x48, 0x30, 0xba, 0x62, 0xd7, 0xb6,
		0xf4, 0xea, 0xdf, 0x1b, 0x0d, 0xde, 0x81, 0x43, 0x81, 0x1e, 0xdf, 0x28, 0xd1, 0x7e, 0x32, 0x06,
		0x37, 0x13, 0x33, 0xaf, 0xea, 0x15, 0x5c, 0x77, 0x23, 0xc9, 0x28, 0xf7, 0xf7, 0x63, 0x26, 0x69,
		0x74, 0x07, 0x8c, 0x57, 0x88, 0x23, 0x23, 0x22, 0xe3, 0x2b, 0xe6, 0x04, 0x5d, 0x31, 0x8f, 0x89,
		0x62, 0xb6, 0x60, 0xee, 0x3a, 0x24, 0xb7, 0xc3, 0x6d, 0xdd, 0x24, 0x25, 0x46, 0xe8, 0xd4, 0xe7,
		0x92, 0x10, 0x5f, 0xb1, 0x6b, 0xc8, 0x84, 0xb1, 0x50, 0x58, 0x75, 0xa2, 0xa3, 0x33, 0x6c, 0xf1,
		0xb4, 0xb9, 0x53, 0xbd, 0xc3, 0xba, 0xba, 0xf1, 0x0c, 0x8c, 0x04, 0x3c, 0xf2, 0xf1, 0x6e, 0x34,
		0xfc, 0x90, 0xb9, 0x7b, 0x7b, 0x85, 0x74, 0xdb, 0xfa, 0x29, 0x48, 0xb9, 0xfe, 0xe4, 0xb6, 0x6e,
		0xd8, 0x02, 0x2a, 0x77, 0x77, 0x2f, 0x50, 0x2e, 0x7d, 0x1b, 0xc6, 0xc3, 0x76, 0xfa, 0xae, 0x6e,
		0x04, 0x42, 0xc0, 0xb9, 0xfb, 0xfb, 0x00, 0x76, 0x1b, 0xad, 0x02, 0xf8, 0x8c, 0xcc, 0xed, 0xdd,
		0x48, 0x78, 0x70, 0xb9, 0x7c, 0x6f, 0x70, 0x6e, 0x2b, 0x2f, 0x4a, 0x70, 0xb4, 0xf3, 0x84, 0x3b,
		0xdd, 0x75, 0xe0, 0x3b, 0xa1, 0xe5, 0x1e, 0x39, 0x10, 0x9a, 0xe0, 0xe9, 0x46, 0x2e, 0x08, 0xbf,
		0x11, 0x83, 0x13, 0xfe, 0x75, 0xcb, 0xb3, 0x4d, 0x6c, 0xed, 0xbb, 0xab, 0x17, 0x53, 0xad, 0x69,
		0xba, 0xff, 0x24, 0xe3, 0xa8, 0x7f, 0x4e, 0x53, 0x58, 0x31, 0xb3, 0xe5, 0x77, 0x49, 0x30, 0xbc,
		0xae, 0xd6, 0xb0, 0x82, 0x9f, 0x6d, 0x62, 0x9b, 0x3e, 0xbe, 0xb3, 0x87, 0xf7, 0xa9, 0x35, 0x1a,
		0x51, 0xc8, 0x4f, 0x74, 0x18, 0x06, 0x8d, 0x9d, 0x1d, 0x1b, 0xb3, 0x83, 0x9f, 0x84, 0xc2, 0xbf,
		0xd0, 0x14, 0x24, 0xeb, 0x5a, 0x43, 0x63, 0x86, 0x23, 0xa1, 0xb0, 0x0f, 0x34, 0x03, 0xc3, 0x15,
		0x62, 0x1f, 0xca, 0x8e, 0xe1, 0xa8, 0xec, 0xe9, 0x31, 0x7a, 0xe9, 0xb7, 0xa9, 0x3b, 0x9b, 0xa4,
		0x04, 0x65, 0x61, 0xc8, 0xc2, 0x97, 0xb0, 0x65, 0xb3, 0x1d, 0x96, 0x94, 0x22, 0x3e, 0xe5, 0x47,
		0x61, 0x84, 0x71, 0xc2, 0xc7, 0xf4, 0x28, 0xa4, 0x74, 0x7c, 0xc5, 0x29, 0x7b, 0xfc, 0x0c, 0x91,
		0xef, 0x8b, 0x78, 0x9f, 0xb4, 0xcd, 0xe8, 0x33, 0x96, 0xd8, 0x47, 0xb1, 0xd8, 0x51, 0xe0, 0xc7,
		0x7b, 0x58, 0x9d, 0x52, 0xb9, 0xb8, 0x12, 0xfe, 0x83, 0x24, 0x1c, 0xe2, 0x6b, 0x4d, 0xd5, 0xd4,
		0x4e, 0xee, 0x3a, 0x8e, 0x78, 0x37, 0x15, 0xb8, 0x4f, 0x50, 0x4d, 0x4d, 0xde, 0x87, 0xc4, 0x79,
		0xc7, 0x31, 0xd1, 0x09, 0x48, 0x5a, 0xcd, 0x3a, 0xdd, 0x47, 0x8f, 0x1f, 0x1f, 0x3e, 0x35, 0x95,
		0xf7, 0x60, 0xf2, 0x04, 0x40, 0x69, 0xd6, 0xb1, 0xc2, 0x40, 0x50, 0x09, 0x66, 0x76, 0x9a, 0xf5,
		0xfa, 0x7e, 0xb9, 0x8a, 0xe9, 0xcb, 0x8f, 0xee, 0xdb, 0x49, 0xf8, 0x8a, 0xa9, 0xea, 0xee, 0x7a,
		0x2e, 0xa5, 0xdc, 0x4c, 0xc1, 0x16, 0x28, 0x94, 0x78, 0x37, 0xa9, 0x24, 0x60, 0xe4, 0x3f, 0x8b,
		0x41, 0x4a, 0x90, 0x46, 0x39, 0x48, 0xd9, 0xb8, 0x8e, 0x2b, 0x8e, 0x21, 0xf6, 0xc4, 0xdd, 0x6f,
		0x84, 0x20, 0x5e, 0xe3, 0x83, 0x97, 0x3e, 0x3f, 0xa0, 0x90, 0x0f, 0x52, 0x66, 0x36, 0xd9, 0xc8,
		0xd1, 0x32, 0xb3, 0x49, 0xc6, 0x33, 0x61, 0x1a, 0x36, 0xdf, 0xfa, 0x3e, 0x3f, 0xa0, 0xd0, 0x2f,
		0x94, 0x85, 0x41, 0x32, 0xd9, 0xc4, 0x7e, 0xd8, 0xf9, 0x01, 0x85, 0x7f, 0xa3, 0xc3, 0x90, 0x34,
		0x55, 0xa7, 0xb2, 0xcb, 0xde, 0x75, 0x3b, 0x3f, 0xa0, 0xb0, 0x4f, 0xe2, 0x51, 0xd8, 0xf5, 0xa0,
		0xf0, 0xb3, 0x6a, 0x44, 0x18, 0x2c, 0x0f, 0x8b, 0xf0, 0xbd, 0xae, 0x3a, 0x0e, 0xb6, 0x74, 0x42,
		0x90, 0x81, 0x23, 0x04, 0x89, 0x6d, 0xa3, 0xba, 0xcf, 0x9f, 0x7a, 0xa3, 0xbf, 0xf9, 0xdb, 0x52,
		0x54, 0x1f, 0xca, 0xb4, 0x92, 0xbd, 0x70, 0x39, 0x22, 0x0a, 0x8b, 0x04, 0xa8, 0x04, 0x93, 0x6a,
		0xb5, 0xaa, 0xb1, 0x57, 0xd7, 0xca, 0xdb, 0x1a, 0x9d, 0x90, 0x36, 0x7d, 0xbf, 0xb4, 0xd3, 0x58,
		0x20, 0x0f, 0xa1, 0xc8, 0xe1, 0x8b, 0x69, 0x18, 0x32, 0x19, 0x53, 0xf2, 0x59, 0x98, 0x68, 0xe1,
		0x94, 0xf0, 0xb7, 0xa7, 0xe9, 0x55, 0x71, 0x4f, 0x83, 0xfc, 0x26, 0x65, 0x34, 0x73, 0x92, 0x9d,
		0x36, 0xd0, 0xdf, 0xc5, 0xb7, 0x77, 0x3e, 0xea, 0x1b, 0xf3, 0x1d, 0xf5, 0xa9, 0xa6, 0x56, 0x4c,
		0x53, 0xfa, 0xfc, 0x84, 0x6f, 0xae, 0xf5, 0x84, 0xaf, 0x86, 0x75, 0xb1, 0x97, 0x41, 0xaa, 0x54,
		0x53, 0xb3, 0xa9, 0x3a, 0x7a, 0x99, 0x9c, 0xf6, 0x59, 0xdf, 0x6f, 0x7a, 0xe2, 0x97, 0x58, 0x9c,
		0x5b, 0x5f, 0x72, 0xf5, 0xf8, 0xf7, 0x63, 0x70, 0xb3, 0x4f, 0x8f, 0x7d, 0xc0, 0xad, 0xea, 0x9c,
		0x6b, 0xaf, 0xf1, 0x3d, 0xec, 0x29, 0x5d, 0x84, 0x04, 0x81, 0x8f, 0xbc, 0xee, 0xf1, 0x99, 0xaf,
		0xfc, 0x8e, 0x4c, 0x95, 0xa2, 0xfd, 0xa8, 0x50, 0x22, 0xc5, 0x9f, 0xeb, 0x5d, 0x7e, 0x19, 0x2f,
		0x89, 0xd5, 0xbe, 0x7e, 0x62, 0x0c, 0xcb, 0xf0, 0x6d, 0x31, 0x38, 0x1a, 0x16, 0x81, 0xaa, 0xef,
		0x77, 0x38, 0x26, 0xee, 0x70, 0x52, 0x7f, 0x1e, 0xe2, 0x73, 0xfa, 0x3e, 0x31, 0x6a, 0xf4, 0x45,
		0xc4, 0xa6, 0x55, 0x17, 0xa7, 0x57, 0xe4, 0x7b, 0xcb, 0xaa, 0x13, 0xa3, 0x26, 0xde, 0x87, 0x23,
		0xc6, 0x8e, 0x6f, 0x34, 0x64, 0xde, 0xff, 0xd2, 0xcc, 0xc0, 0x67, 0x5e, 0x9a, 0x19, 0x78, 0xe5,
		0xa3, 0x33, 0x03, 0xcf, 0x7f, 0x7d, 0x76, 0xa0, 0xb8, 0x17, 0x16, 0xcf, 0x97, 0x22, 0x4f, 0x93,
		0x53, 0x73, 0xfa, 0xbe, 0x90, 0x4f, 0x92, 0x9a, 0xbb, 0x7e, 0x4f, 0x86, 0x3f, 0x95, 0x80, 0x63,
		0xf4, 0x6d, 0x46, 0xab, 0xa1, 0xe9, 0xce, 0xc9, 0x8a, 0xb5, 0x6f, 0x3a, 0xf4, 0xf6, 0x95, 0xb1,
		0xc3, 0xe5, 0x30, 0xe1, 0x55, 0xe7, 0x59, 0x75, 0x07, 0x49, 0xec, 0x40, 0x72, 0x9d, 0xe0, 0x79,
		0x56, 0x9c, 0x9d, 0xa0, 0xb3, 0x0f, 0x52, 0xca, 0xde, 0x73, 0x8c, 0xb1, 0x52, 0x4d, 0x3c, 0xe5,
		0x58, 0xc7, 0xea, 0x0e, 0x7b, 0x16, 0x2b, 0x4e, 0x05, 0x94, 0x22, 0x05, 0xf4, 0x05, 0xac, 0x29,
		0x48, 0xaa, 0x4d, 0x96, 0x8f, 0x1d, 0x27, 0x92, 0xa3, 0x1f, 0xf2, 0x45, 0x18, 0xe2, 0x59, 0xa1,
		0x6d, 0xbc, 0x5a, 0x1e, 0x92, 0x94, 0x79, 0xbe, 0x77, 0x96, 0xcd, 0xb7, 0x70, 0x9f, 0xa7, 0x4c,
		0x2a, 0x0c, 0x4c, 0xbe, 0x00, 0xa9, 0x05, 0xa3, 0xa1, 0xe9, 0x46, 0x90, 0x5a, 0x9a, 0x51, 0xa3,
		0x3c, 0x13, 0x8b, 0xca, 0xec, 0x00, 0xfb, 0xa0, 0x9e, 0x93, 0x3e, 0x93, 0xc6, 0x4f, 0x1c, 0xf9,
		0x97, 0x3c, 0x0f, 0x43, 0x94, 0xf6, 0x9a, 0x49, 0xec, 0x87, 0xfb, 0x22, 0x4d, 0x9a, 0x3f, 0x9a,
		0xc9, 0xc9, 0xc7, 0x3c, 0x66, 0x11, 0x24, 0xaa, 0xaa, 0xa3, 0xf2, 0x7e, 0xd3, 0xdf, 0xf2, 0x1b,
		0x21, 0xc5, 0x89, 0xd8, 0xe8, 0x14, 0xc4, 0x0d, 0x53, 0x38, 0x9f, 0x5c, 0xa7, 0xae, 0xac, 0x99,
		0x3c, 0x84, 0x27, 0xc0, 0x45, 0xa5, 0xa3, 0xb3, 0x7c, 0xc8, 0xe7, 0x2c, 0x7d, 0x43, 0xee, 0xfb,
		0xc9, 0x86, 0xb4, 0x45, 0x1d, 0x5c, 0x65, 0xf9, 0x68, 0x0c, 0xa6, 0x7d, 0xb5, 0xc4, 0xbd, 0x6b,
		0x86, 0xce, 0x37, 0x66, 0x98, 0xb6, 0x20, 0x1f, 0x93, 0xbc, 0xbe, 0x83, 0xba, 0x3c, 0x02, 0xf1,
		0x39, 0xd3, 0x24, 0x2e, 0x8e, 0x7e, 0x57, 0x0c, 0xa6, 0x2f, 0x09, 0xc5, 0xfd, 0xa6, 0xee, 0xcf,
		0xd8, 0x71, 0x2e, 0xab, 0x96, 0xfb, 0x92, 0xa8, 0xf8, 0x96, 0x1f, 0x86, 0xf4, 0x3c, 0xf1, 0x14,
		0xba, 0xdd, 0xa4, 0x77, 0x33, 0xb6, 0xeb, 0x46, 0x65, 0x8f, 0x53, 0x60, 0x1f, 0x44, 0xe0, 0xaa,
		0x69, 0xf2, 0x58, 0x82, 0xfc, 0x64, 0xf7, 0x58, 0x8a, 0x1b, 0x1d, 0x45, 0xf4, 0x70, 0xff, 0x22,
		0xe2, 0x9d, 0x74, 0x65, 0xf4, 0xbf, 0x24, 0xb8, 0xb9, 0x75, 0x42, 0xed, 0xe1, 0x7d, 0xbb, 0xdf,
		0xf9, 0xf4, 0x24, 0xa4, 0xd7, 0xe9, 0x73, 0xde, 0x24, 0x32, 0xca, 0xc1, 0x10, 0xae, 0x9e, 0x3a,
		0x7d, 0xfa, 0xbe, 0x87, 0x99, 0xb6, 0x9f, 0x1f, 0x50, 0x44, 0x01, 0x9a, 0x86, 0xb4, 0x8d, 0x2b,
		0xe6, 0xa9, 0xd3, 0x0f, 0xee, 0xdd, 0xc7, 0xd4, 0xeb, 0xfc, 0x80, 0xe2, 0x15, 0xb1, 0x43, 0x98,
		0xef, 0x7c, 0x74, 0x46, 0x2a, 0x26, 0x21, 0x6e, 0x37, 0x1b, 0x37, 0x54, 0x47, 0x3e, 0x98, 0x84,
		0x59, 0x3f, 0x26, 0x8d, 0xc1, 0xdc, 0xa3, 0x3e, 0x2e, 0x83, 0x8c, 0x4f, 0x06, 0xdd, 0x2e, 0x9b,
		0x74, 0x95, 0xa4, 0xfc, 0x39, 0x09, 0x46, 0xdc, 0xf3, 0xc2, 0x0d, 0xec, 0xa0, 0xb3, 0x00, 0xbe,
		0x43, 0x45, 0x36, 0x6d, 0x6e, 0xca, 0x87, 0xdb, 0xca, 0xbb, 0x38, 0x8a, 0x0f, 0x1c, 0x9d, 0xa1,
		0x8a, 0x68, 0x1a, 0x36, 0x7f, 0x5d, 0x32, 0x02, 0xd5, 0x05, 0x46, 0x77, 0x03, 0xa2, 0x16, 0xae,
		0x7c, 0xc9, 0x70, 0x34, 0xbd, 0x56, 0x36, 0x8d, 0xcb, 0xfc, 0xcd, 0xde, 0xb8, 0x92, 0xa1, 0x35,
		0x8f, 0xd3, 0x8a, 0x75, 0x52, 0x4e, 0x98, 0x4e, 0xbb, 0x54, 0x48, 0xd4, 0xec, 0xdf, 0x28, 0x18,
		0x51, 0xc4, 0x27, 0x3a, 0x0b, 0x43, 0x66, 0x73, 0xbb, 0x2c, 0x2c, 0xc6, 0xf0, 0xa9, 0x9b, 0xdb,
		0xcd, 0x7f, 0xa1, 0x1f, 0x62, 0x11, 0x6f, 0x36, 0xb7, 0x89, 0xb6, 0xdc, 0x02, 0x23, 0x6d, 0x98,
		0x19, 0xbe, 0xe4, 0xf1, 0x41, 0x5f, 0x91, 0xe7, 0x3d, 0x28, 0x9b, 0x96, 0x66, 0x58, 0x9a, 0xb3,
		0xcf, 0x57, 0xfa, 0x19, 0x51, 0xb1, 0xce, 0xcb, 0xe5, 0x3d, 0x18, 0xdf, 0xa0, 0x37, 0x2f, 0x3d,
		0xce, 0x4f, 0x7b, 0xfc, 0x49, 0xd1, 0xfc, 0x75, 0xe4, 0x2c, 0xd6, 0xc2, 0x59, 0x8f, 0xeb, 0xab,
		0x1e, 0xb5, 0x33, 0xb8, 0xbe, 0xfa, 0xeb, 0xa3, 0x81, 0xc9, 0xc9, 0x94, 0xd3, 0x6f, 0xbe, 0x7a,
		0x55, 0xcc, 0xc8, 0xf3, 0xaa, 0xee, 0x4e, 0x35, 0x17, 0x61, 0x46, 0x73, 0x91, 0x53, 0x48, 0x7e,
		0x18, 0x46, 0xd7, 0x55, 0xcb, 0xd9, 0xc0, 0xce, 0x79, 0xac, 0x56, 0xb1, 0x15, 0xf4, 0xba, 0xa3,
		0xc2, 0xeb, 0x22, 0x48, 0x50, 0xd7, 0xca, 0xbc, 0x0e, 0xfd, 0x2d, 0xef, 0x42, 0x82, 0x3e, 0xef,
		0xe2, 0x7a, 0x64, 0x8e, 0xc1, 0x3c, 0x32, 0xb1, 0xa5, 0xfb, 0x0e, 0xb6, 0x45, 0xb8, 0x42, 0x3f,
		0xd0, 0x03, 0xc2, 0xaf, 0xc6, 0xbb, 0xfb, 0x55, 0x71, 0x9a, 0xc2, 0xbc, 0x6b, 0x1d, 0x86, 0x8a,
		0xc4, 0x14, 0x2f, 0x2d, 0xb8, 0x8c, 0x48, 0x1e, 0x23, 0x68, 0x05, 0xc6, 0x4d, 0xd5, 0x72, 0xe8,
		0xcb, 0x78, 0xbb, 0xb4, 0x17, 0x5c, 0xd7, 0x67, 0x5a, 0x67, 0x5e, 0xa0, 0xb3, 0xbc, 0x95, 0x51,
		0xd3, 0x5f, 0x28, 0xff, 0xd7, 0x04, 0x0c, 0x72, 0x61, 0x3c, 0x02, 0x43, 0x5c, 0xac, 0x5c, 0x3b,
		0x8f, 0xe5, 0x5b, 0x1d, 0x53, 0xde, 0x75, 0x20, 0x9c, 0x9e, 0xc0, 0x41, 0xb7, 0x43, 0xaa, 0xb2,
		0xab, 0x6a, 0x7a, 0x59, 0xab, 0x8a, 0x6b, 0x91, 0xdf, 0xbc, 0x36, 0x33, 0x34, 0x4f, 0xca, 0x96,
		0x16, 0x94, 0x21, 0x5a, 0xb9, 0x54, 0x25, 0x91, 0x00, 0xdf, 0x23, 0x63, 0x33, 0x8c, 0x7f, 0xa1,
		0x87, 0x20, 0x41, 0xb7, 0x1b, 0x13, 0x7d, 0x6c, 0x37, 0x52, 0x0c, 0x34, 0x0f, 0xa3, 0x75, 0xd5,
		0x76, 0xca, 0xd4, 0x83, 0x91, 0xe6, 0x93, 0x7c, 0xfb, 0xae, 0x45, 0x20, 0x5c, 0xb0, 0xe2, 0x40,
		0x88, 0x60, 0xb1, 0xa2, 0x2a, 0x3a, 0x0e, 0x19, 0x4a, 0x84, 0x9e, 0xbf, 0x38, 0x2c, 0xb6, 0x1a,
		0xa4, 0x72, 0x1f, 0x23, 0xe5, 0xf4, 0xd8, 0xd0, 0xa1, 0x11, 0xd6, 0x4d, 0x90, 0xa6, 0x2f, 0x35,
		0x52, 0x10, 0xf6, 0xa6, 0x50, 0x8a, 0x14, 0xd0, 0xca, 0x3b, 0x60, 0xdc, 0xb3, 0x8f, 0x0c, 0x24,
		0xc5, 0xa8, 0x78, 0xc5, 0x14, 0xf0, 0x5e, 0x98, 0xa2, 0x2b, 0xfa, 0x30, 0x74, 0x9a, 0x42, 0x23,
		0x52, 0xf7, 0x78, 0x10, 0xe3, 0x0d, 0x24, 0xe4, 0xe7, 0xc2, 0x67, 0xb0, 0x40, 0x61, 0x47, 0xdd,
		0x52, 0x0a, 0x76, 0x14, 0x52, 0xaa, 0x69, 0x32, 0x80, 0x61, 0x6e, 0x1f, 0x4d, 0x93, 0x56, 0x9d,
		0x80, 0x09, 0xda, 0x47, 0x0b, 0xdb, 0xcd, 0xba, 0xc3, 0x89, 0x8c, 0x50, 0x98, 0x71, 0x52, 0xa1,
		0xb0, 0x72, 0x0a, 0x7b, 0x2b, 0x8c, 0xe2, 0x4b, 0x5a, 0x15, 0xeb, 0x15, 0xcc, 0xe0, 0x46, 0x29,
		0xdc, 0x88, 0x28, 0xa4, 0x40, 0x77, 0x82, 0x6b, 0xf7, 0xdc, 0x6d, 0xd7, 0x31, 0x46, 0x4f, 0x94,
		0xf3, 0xcd, 0x55, 0x39, 0x0b, 0x89, 0x05, 0xd5, 0x51, 0x49, 0x80, 0xe1, 0x5c, 0x61, 0x8e, 0x66,
		0x44, 0x21, 0x3f, 0xe5, 0xef, 0xc4, 0x20, 0xf1, 0xb8, 0xe1, 0x60, 0x74, 0xbf, 0x2f, 0x00, 0x1c,
		0x6b, 0xa7, 0xcf, 0x1b, 0x5a, 0x4d, 0xc7, 0xd5, 0x15, 0xbb, 0xe6, 0x7b, 0x56, 0xdd, 0x53, 0xa7,
		0x58, 0x40, 0x9d, 0xa6, 0x20, 0x69, 0x19, 0x4d, 0xbd, 0x2a, 0x9e, 0xe3, 0xa1, 0x1f, 0xa8, 0x04,
		0x29, 0x57, 0x4b, 0x12, 0x51, 0x5a, 0x32, 0x4e, 0xb4, 0x84, 0xe8, 0x30, 0x2f, 0x50, 0x86, 0xb6,
		0xb9, 0xb2, 0x14, 0x21, 0xed, 0x1a, 0x2f, 0xae, 0x6d, 0xbd, 0x29, 0xac, 0x87, 0x46, 0x9c, 0x89,
		0x3b, 0xf6, 0xae, 0xf0, 0x98, 0xc6, 0x65, 0xdc, 0x0a, 0xb1, 0x35, 0xed, 0x57, 0x2b, 0xfe, 0xc4,
		0xfb, 0x10, 0xed, 0x97, 0xa7, 0x56, 0xec, 0x99, 0xf7, 0x9b, 0x21, 0x6d, 0x6b, 0x35, 0x5d, 0x75,
		0x9a, 0x16, 0xe6, 0x9a, 0xe7, 0x15, 0xc8, 0x5f, 0x92, 0x60, 0x90, 0x69, 0xb2, 0x4f, 0x6e, 0x52,
		0x7b, 0xb9, 0xc5, 0x3a, 0xc9, 0x2d, 0x7e, 0x70, 0xb9, 0xcd, 0x01, 0xb8, 0xcc, 0xd8, 0xfc, 0xe5,
		0xed, 0x36, 0x11, 0x03, 0x63, 0x71, 0x43, 0xab, 0x89, 0xd3, 0x79, 0x0f, 0x49, 0xfe, 0xcf, 0x12,
		0x09, 0x62, 0x79, 0x3d, 0x9a, 0x83, 0x51, 0xc1, 0x57, 0x79, 0xa7, 0xae, 0xd6, 0xb8, 0xee, 0x1c,
		0xeb, 0xc8, 0xdc, 0xb9, 0xba, 0x5a, 0x53, 0x86, 0x39, 0x3f, 0xe4, 0xa3, 0xfd, 0x38, 0xc4, 0x3a,
		0x8c, 0x43, 0x60, 0xe0, 0xe3, 0x07, 0x1b, 0xf8, 0xc0, 0x10, 0x25, 0xc2, 0x43, 0xf4, 0xf9, 0x18,
		0x5d, 0xcc, 0x98, 0x86, 0xad, 0xd6, 0x7f, 0x14, 0x33, 0xe2, 0x26, 0x48, 0x9b, 0x46, 0xbd, 0xcc,
		0x6a, 0xd8, 0x33, 0x55, 0x29, 0xd3, 0xa8, 0x2b, 0x2d, 0xc3, 0x9e, 0xbc, 0x4e, 0xd3, 0x65, 0xf0,
		0x3a, 0x48, 0x6d, 0x28, 0x2c, 0x35, 0x0b, 0x46, 0x98, 0x28, 0xb8, 0x2f, 0xbb, 0x97, 0xc8, 0x80,
		0x3a, 0x47, 0xa9, 0xd5, 0xf7, 0x32, 0xb6, 0x19, 0xa4, 0xc2, 0xe1, 0x08, 0x06, 0x33, 0xfd, 0xed,
		0x56, 0xc1, 0x7e, 0xb5, 0x54, 0x38, 0x9c, 0xfc, 0x8f, 0x24, 0x80, 0x65, 0x22, 0x59, 0xda, 0x5f,
		0xe2, 0x85, 0xe8, 0xcd, 0xa0, 0x6a, 0x39, 0xd0, 0xf2, 0x74, 0xa7, 0x41, 0xe3, 0xed, 0x8f, 0xd8,
		0x7e, 0xbe, 0xe7, 0x61, 0xd4, 0x53, 0x46, 0xb1, 0xcf, 0xdc, 0x96, 0x88, 0x3f, 0x88, 0x57, 0x46,
		0x2e, 0xf9, 0xbe, 0xe4, 0x7f, 0x2d, 0x41, 0x9a, 0xf2, 0xb4, 0x82, 0x1d, 0x35, 0x30, 0x86, 0xd2,
		0xc1, 0xc7, 0xf0, 0x18, 0x00, 0x23, 0x63, 0x6b, 0xcf, 0x61, 0xae, 0x59, 0x69, 0x5a, 0xb2, 0xa1,
		0x3d, 0x87, 0xd1, 0x83, 0xae, 0xc0, 0xe3, 0xdd, 0x05, 0x2e, 0xa2, 0x6e, 0x2e, 0xf6, 0x23, 0x30,
		0x44, 0xff, 0x53, 0xcd, 0x15, 0x9b, 0x07, 0xd2, 0x83, 0x7a, 0xb3, 0xb1, 0x79, 0xc5, 0x96, 0x9f,
		0x81, 0xa1, 0xcd, 0x2b, 0x6c, 0x6f, 0xe4, 0x26, 0x48, 0x5b, 0x86, 0xc1, 0x7d, 0x32, 0x8b, 0x85,
		0x52, 0xa4, 0x80, 0xba, 0x20, 0xb1, 0x1f, 0x10, 0xf3, 0xf6, 0x03, 0xbc, 0x0d, 0x8d, 0x78, 0x4f,
		0x1b, 0x1a, 0x27, 0xfe, 0x44, 0x82, 0x61, 0x9f, 0x7d, 0x40, 0xf7, 0xc1, 0xa1, 0xe2, 0xf2, 0xda,
		0xfc, 0xc5, 0xf2, 0xd2, 0x42, 0xf9, 0xdc, 0xf2, 0xdc, 0xa2, 0xf7, 0x10, 0x63, 0xee, 0xf0, 0x0b,
		0x57, 0x67, 0x91, 0x0f, 0x76, 0x4b, 0xa7, 0xa9, 0x06, 0xe8, 0x24, 0x4c, 0x05, 0x51, 0xe6, 0x8a,
		0x1b, 0xa5, 0xd5, 0xcd, 0x8c, 0x94, 0x3b, 0xf4, 0xc2, 0xd5, 0xd9, 0x09, 0x1f, 0xc6, 0xdc, 0xb6,
		0x8d, 0x75, 0xa7, 0x15, 0x61, 0x7e, 0x6d, 0x65, 0x65, 0x69, 0x33, 0x13, 0x6b, 0x41, 0xe0, 0x06,
		0xfb, 0x4e, 0x98, 0x08, 0x22, 0xac, 0x2e, 0x2d, 0x67, 0xe2, 0x39, 0xf4, 0xc2, 0xd5, 0xd9, 0x31,
		0x1f, 0xf4, 0xaa, 0x56, 0xcf, 0xa5, 0xde, 0xf5, 0xf1, 0xe9, 0x81, 0x4f, 0xfe, 0x93, 0x69, 0x89,
		0xf4, 0x6c, 0x34, 0x60, 0x23, 0xd0, 0xdd, 0x70, 0x64, 0x63, 0x69, 0x71, 0xb5, 0xb4, 0x50, 0x5e,
		0xd9, 0x58, 0x14, 0x89, 0x6e, 0xa2, 0x77, 0xfc, 0x12, 0xe1, 0x9e, 0xd8, 0xf3, 0x6a, 0x07, 0xbd,
		0xae, 0x94, 0x1e, 0x5f, 0xdb, 0x2c, 0x65, 0x24, 0x06, 0xbd, 0x6e, 0xe1, 0x4b, 0x86, 0xc3, 0xfe,
		0x95, 0xd5, 0xbd, 0x70, 0xb4, 0x0d, 0xb4, 0xdb, 0xb1, 0x89, 0x17, 0xae, 0xce, 0x8e, 0xae, 0x5b,
		0x98, 0xcd, 0x1f, 0x8a, 0x91, 0x87, 0x6c, 0x2b, 0xc6, 0xda, 0xfa, 0xda, 0xc6, 0xdc, 0x72, 0x66,
		0x36, 0x97, 0x79, 0xe1, 0xea, 0xec, 0x88, 0x30, 0x86, 0x04, 0xde, 0xeb, 0xd9, 0x8d, 0x5c, 0xf1,
		0x7c, 0xff, 0x1e, 0xb8, 0x8d, 0x9f, 0x8c, 0xf0, 0x6b, 0x6e, 0xee, 0x71, 0x52, 0x30, 0x0d, 0xe4,
		0x30, 0x3f, 0x4b, 0x12, 0xa5, 0x5d, 0xf3, 0x93, 0x72, 0x9d, 0xf7, 0x4d, 0x6f, 0x64, 0x82, 0x48,
		0xe4, 0xa5, 0xbe, 0xae, 0x8b, 0x3b, 0xf9, 0xdd, 0x12, 0x8c, 0x9d, 0xd7, 0x6c, 0xc7, 0xb0, 0xb4,
		0x8a, 0x5a, 0xa7, 0xcf, 0x2f, 0x3e, 0xd8, 0xab, 0x6d, 0x0d, 0x4d, 0xf5, 0x47, 0x61, 0xf0, 0x92,
		0x5a, 0x67, 0x46, 0xcd, 0x9f, 0x2c, 0x17, 0x16, 0x9f, 0x67, 0xda, 0x04, 0x01, 0x86, 0x26, 0xff,
		0x46, 0x9b, 0x54, 0x97, 0x62, 0x20, 0xd5, 0x25, 0xdf, 0xdf, 0x0d, 0x65, 0x9e, 0xdc, 0xf2, 0xe6,
		0x96, 0xe4, 0x96, 0xb9, 0xbe, 0x6f, 0x3a, 0x8f, 0xf3, 0x9b, 0xce, 0x9c, 0x8e, 0xec, 0x65, 0xb8,
		0x98, 0x9d, 0x32, 0x5c, 0xce, 0xf7, 0xdd, 0xc8, 0x61, 0xaf, 0x11, 0x1f, 0x39, 0xb9, 0x73, 0xb6,
		0xcb, 0x57, 0x83, 0xd9, 0x2e, 0x6f, 0xee, 0x98, 0xed, 0x72, 0x47, 0xa7, 0xb1, 0xe8, 0x23, 0xd9,
		0xe5, 0x4d, 0xfd, 0x26, 0xbb, 0x4c, 0x13, 0x5a, 0xaf, 0x5e, 0x9b, 0x41, 0xac, 0x5b, 0x3e, 0x64,
		0xb9, 0x4b, 0x0a, 0xcc, 0x1f, 0xde, 0xe0, 0x14, 0x98, 0x73, 0x9d, 0x52, 0x60, 0x8a, 0x37, 0xbd,
		0x7a, 0x6d, 0xe6, 0x08, 0xe3, 0x35, 0x0c, 0x21, 0x1f, 0x2c, 0x3f, 0xe6, 0xd3, 0x43, 0xfe, 0x8d,
		0xad, 0x73, 0x1d, 0x13, 0x64, 0x7c, 0x2d, 0x87, 0x21, 0xe4, 0xd6, 0x1c, 0x19, 0x87, 0x0c, 0xb3,
		0x58, 0x28, 0x9a, 0xcd, 0x6d, 0x6f, 0x3f, 0x6c, 0xaa, 0x65, 0x34, 0xe6, 0xf4, 0xfd, 0xe2, 0xfd,
		0x1e, 0xf5, 0x30, 0x9e, 0xfc, 0x15, 0xef, 0xf6, 0x8c, 0xb7, 0x3f, 0x75, 0x11, 0xef, 0x93, 0xe1,
		0xe7, 0xa0, 0xeb, 0x14, 0xb2, 0x63, 0x72, 0x4d, 0xc1, 0xcd, 0xd8, 0x61, 0xff, 0x7b, 0x4b, 0xee,
		0xa4, 0x6a, 0x6d, 0x12, 0x76, 0xce, 0xb9, 0x89, 0x39, 0xc9, 0xbe, 0xe7, 0xb7, 0x3f, 0x15, 0xc7,
		0x69, 0x93, 0x8a, 0x43, 0x8f, 0x6a, 0x8b, 0x4b, 0x7d, 0x4f, 0x42, 0x2e, 0xa9, 0x30, 0x3d, 0xb9,
		0x35, 0x2f, 0xe7, 0x62, 0xf0, 0xc6, 0xea, 0x10, 0x4f, 0x69, 0xe9, 0xd0, 0xfd, 0x88, 0x0b, 0xab,
		0xe7, 0xda, 0xa4, 0xe5, 0x90, 0xf5, 0x5d, 0xdc, 0xaf, 0x1c, 0x61, 0x08, 0xb9, 0x35, 0x67, 0xa7,
		0xda, 0x92, 0x94, 0x92, 0x8e, 0x9c, 0xa8, 0xb7, 0xf0, 0x89, 0x7a, 0x28, 0xdc, 0x8a, 0x37, 0x57,
		0x43, 0xe9, 0x2a, 0xe7, 0x03, 0x77, 0xb2, 0x81, 0xb6, 0x20, 0x47, 0xdb, 0x98, 0x36, 0xb7, 0xb1,
		0xdf, 0xda, 0xfe, 0x02, 0xec, 0x70, 0xdf, 0x19, 0x29, 0x4b, 0xba, 0x13, 0xcc, 0x48, 0x09, 0x91,
		0x94, 0xa3, 0x73, 0x7b, 0x1e, 0xa4, 0x7b, 0xe7, 0x7c, 0x9a, 0x61, 0x9b, 0xac, 0x49, 0x54, 0xf1,
		0x41, 0x77, 0x34, 0xd2, 0x8a, 0x57, 0xc0, 0xa6, 0xf9, 0xf3, 0x5f, 0x9f, 0xa5, 0x59, 0x7b, 0x83,
		0x0b, 0x8f, 0xaf, 0xab, 0x9a, 0x85, 0x96, 0x3a, 0xdf, 0x77, 0xbb, 0xf9, 0xd5, 0x6b, 0x33, 0xd9,
		0xb0, 0x72, 0xb9, 0xb3, 0xbc, 0xf5, 0xce, 0xdb, 0x52, 0xa7, 0x85, 0x6b, 0x80, 0x54, 0x0b, 0x88,
		0xdc, 0xba, 0xac, 0x0d, 0x75, 0xb3, 0x04, 0x43, 0x8c, 0x5b, 0x1b, 0x15, 0x20, 0x69, 0x92, 0x1f,
		0xfc, 0x60, 0x60, 0xba, 0xa3, 0xf2, 0x52, 0x78, 0x77, 0x23, 0x93, 0xa0, 0xc8, 0x2f, 0xc6, 0x00,
		0x16, 0x1e, 0x7f, 0x7c, 0xd3, 0xd2, 0xcc, 0x3a, 0x76, 0xae, 0x67, 0xcf, 0x37, 0xe1, 0x90, 0x6f,
		0x95, 0xd4, 0x72, 0x17, 0x76, 0xf6, 0xd5, 0x6b, 0x33, 0x37, 0x87, 0x7b, 0xef, 0x03, 0x93, 0x95,
		0x49, 0x6f, 0xbd, 0xe4, 0x5d, 0x8a, 0x0d, 0x50, 0x6d, 0xbd, 0x15, 0xdb, 0x96, 0xaa, 0x0f, 0xcc,
		0x4f, 0xd5, 0xbb, 0x1e, 0x1b, 0x12, 0xed, 0x06, 0x0c, 0x7b, 0x22, 0xb1, 0xd1, 0x02, 0xa4, 0x1c,
		0xfe, 0x9b, 0x4b, 0x58, 0xee, 0x2c, 0x61, 0x81, 0xc6, 0xa5, 0xec, 0x62, 0xca, 0x7f, 0x2b, 0x01,
		0xf8, 0x6e, 0x78, 0xbd, 0x2e, 0x55, 0x8c, 0x98, 0x72, 0x6e, 0x78, 0xe3, 0x07, 0x0a, 0xd5, 0x38,
		0x76, 0x48, 0x9e, 0x3f, 0x1f, 0x83, 0xc9, 0x76, 0xb7, 0xdc, 0x5e, 0x9f, 0x32, 0x58, 0x87, 0x21,
		0x2f, 0x33, 0x8f, 0x8c, 0xf6, 0xbd, 0x9d, 0x46, 0xbb, 0x4d, 0x9f, 0xe8, 0xff, 0x92, 0x11, 0x9b,
		0xee, 0x9c, 0x4c, 0x48, 0x1a, 0xbf, 0x18, 0x87, 0x6c, 0x27, 0x4c, 0x34, 0xdf, 0x7a, 0x49, 0x95,
		0xee, 0xfc, 0x15, 0x73, 0x5e, 0x64, 0x19, 0x02, 0x90, 0xc3, 0x17, 0x58, 0x51, 0xad, 0xf5, 0x7a,
		0x70, 0x74, 0x9c, 0x27, 0x73, 0xf7, 0x21, 0x1a, 0x09, 0x12, 0x90, 0xdb, 0x5d, 0x1c, 0x46, 0xcf,
		0xc2, 0xb8, 0xa6, 0x6b, 0x8e, 0xa6, 0xd6, 0xcb, 0xdb, 0x6a, 0x5d, 0xd5, 0x2b, 0x07, 0x89, 0x9a,
		0x99, 0xc9, 0xe7, 0xcd, 0x86, 0xc8, 0xc9, 0xca, 0x18, 0x2f, 0x29, 0xb2, 0x02, 0x74, 0x1e, 0x86,
		0x44, 0x53, 0x89, 0x03, 0x45, 0x1b, 0x02, 0xdd, 0x17, 0xe0, 0xfd, 0x42, 0x1c, 0x26, 0xdc, 0x8b,
		0xa0, 0xff, 0x6f, 0x28, 0x7a, 0x1d, 0x8a, 0x15, 0x00, 0x36, 0xdd, 0x89, 0x81, 0x3d, 0xc0, 0x68,
		0x10, 0x83, 0x91, 0x66, 0x14, 0x16, 0x6c, 0xc7, 0x37, 0x1e, 0xd7, 0x62, 0x30, 0xe2, 0x1f, 0x8f,
		0xbf, 0xa7, 0x5e, 0x09, 0x2d, 0x79, 0x96, 0x28, 0xc1, 0xff, 0x03, 0x67, 0x07, 0x4b, 0xd4, 0xa2,
		0xbd, 0xdd, 0x4d, 0xd0, 0xff, 0xf4, 0xd2, 0x9f, 0x2b, 0xfd, 0xa7, 0x3f, 0x77, 0x0f, 0x34, 0xdb,
		0xe5, 0x45, 0xff, 0x64, 0xfb, 0xbc, 0xe8, 0xe2, 0x51, 0x8f, 0x4a, 0xb0, 0x5e, 0x0e, 0xa7, 0x4c,
		0x9f, 0x69, 0x93, 0x32, 0x5d, 0x3c, 0xec, 0x2d, 0x4b, 0x7d, 0x95, 0x72, 0x20, 0x95, 0x7a, 0x19,
		0xd0, 0xae, 0xbb, 0x33, 0x52, 0xf6, 0xc4, 0x49, 0xf0, 0x8f, 0xbd, 0x7a, 0x6d, 0xe6, 0x28, 0xc3,
		0x6f, 0x85, 0x91, 0x95, 0x09, 0xaf, 0x50, 0x50, 0x7b, 0x20, 0x90, 0x98, 0xcd, 0x96, 0x3b, 0x87,
		0x5e, 0xbd, 0x36, 0x33, 0xc1, 0xa8, 0x78, 0x75, 0xb2, 0x2f, 0x5f, 0xdb, 0xa7, 0xd9, 0x1f, 0x97,
		0x00, 0xb5, 0x5e, 0xbc, 0x26, 0x81, 0xb8, 0x2f, 0x6a, 0x96, 0xba, 0x07, 0xe2, 0x1e, 0xbe, 0x08,
		0xc4, 0x7d, 0x33, 0xe5, 0x61, 0xcf, 0x3c, 0xc6, 0x7a, 0x4b, 0x8f, 0x68, 0xb1, 0x87, 0x03, 0xf2,
		0x1f, 0x49, 0x70, 0xb4, 0x45, 0xa3, 0x7c, 0x97, 0xfe, 0x91, 0xe5, 0xab, 0xe4, 0xff, 0x4e, 0x8d,
		0x31, 0xdd, 0xb7, 0x82, 0x4e, 0x58, 0x2d, 0x76, 0xf7, 0xfa, 0x59, 0x78, 0xf6, 0xb8, 0xcf, 0xef,
		0x49, 0x30, 0xe5, 0x6f, 0xde, 0xed, 0xc8, 0x2a, 0x8c, 0xf8, 0x5b, 0x77, 0x93, 0x15, 0x7b, 0xe8,
		0x02, 0xe7, 0x3e, 0x80, 0x8f, 0x1e, 0xf3, 0xa6, 0x2b, 0xdb, 0x3b, 0xbb, 0xaf, 0x67, 0x69, 0xb8,
		0x57, 0xf0, 0x43, 0xd3, 0x36, 0x41, 0xc7, 0xe3, 0x7f, 0x4b, 0x3c, 0xcf, 0xde, 0xe8, 0x9c, 0x67,
		0x3f, 0x7f, 0x1d, 0xf2, 0xec, 0x5b, 0x33, 0xeb, 0xdf, 0xda, 0x3e, 0xb3, 0xfe, 0x89, 0xd7, 0x98,
		0x59, 0xff, 0xea, 0xb5, 0x99, 0x29, 0x6f, 0xc6, 0xb8, 0xc5, 0xf2, 0xff, 0x7d, 0x39, 0xf6, 0xe7,
		0x3a, 0x6e, 0x80, 0xdf, 0xdd, 0x55, 0x76, 0x57, 0xdc, 0x4d, 0xed, 0xe0, 0xae, 0xf7, 0xcb, 0x67,
		0xe0, 0x90, 0x97, 0x63, 0xc1, 0x32, 0x23, 0x22, 0x32, 0xd0, 0xfb, 0xc8, 0xbb, 0xe8, 0x74, 0x59,
		0xad, 0xdb, 0x7d, 0xec, 0xce, 0xf9, 0xe6, 0x5d, 0xb6, 0xbb, 0x7b, 0xda, 0xb9, 0x97, 0x2f, 0xc3,
		0xa1, 0xc7, 0x08, 0xbf, 0x22, 0xef, 0xc8, 0x16, 0x39, 0x1f, 0x87, 0xdd, 0xdd, 0x2a, 0x89, 0xbf,
		0x2d, 0x27, 0x76, 0xa2, 0xc0, 0xeb, 0x12, 0x37, 0x80, 0xb7, 0xe7, 0x3b, 0xe6, 0x92, 0xe4, 0x7d,
		0x79, 0x24, 0x8a, 0x0f, 0x53, 0xfe, 0xa4, 0x04, 0x87, 0xc3, 0x2d, 0x73, 0xa3, 0x51, 0x82, 0xb4,
		0xdb, 0x5f, 0xbe, 0x1a, 0xbc, 0xa5, 0x63, 0xd6, 0x8d, 0x40, 0xe7, 0xd3, 0xda, 0xc3, 0x44, 0x8b,
		0x6d, 0x38, 0xbd, 0x23, 0x92, 0x53, 0xc6, 0x43, 0x80, 0xd5, 0x2d, 0x98, 0x0a, 0x70, 0x2a, 0x44,
		0xf4, 0x08, 0x8c, 0x06, 0x72, 0xed, 0x22, 0xd3, 0xf5, 0x46, 0xfc, 0x89, 0x76, 0xf2, 0x9b, 0x43,
		0xa2, 0x77, 0xfb, 0x3f, 0x0f, 0x29, 0x01, 0xc8, 0x0d, 0x66, 0xcf, 0xdd, 0x77, 0x11, 0x89, 0x7c,
		0x67, 0x02, 0xe4, 0x3d, 0x9f, 0x66, 0x5f, 0x9f, 0x0e, 0x5c, 0x37, 0x55, 0x78, 0x59, 0x82, 0xd9,
		0xce, 0xac, 0x72, 0xa1, 0x54, 0x60, 0xca, 0xe7, 0x10, 0x45, 0xaa, 0x87, 0xd0, 0x8f, 0x13, 0xd1,
		0x9e, 0x3c, 0x64, 0xff, 0x27, 0x5b, 0xbd, 0xd5, 0x75, 0x54, 0x99, 0xcf, 0x4a, 0x70, 0x3c, 0xd0,
		0xa5, 0x36, 0xab, 0xd1, 0xd7, 0xdb, 0x30, 0x7c, 0x4d, 0x82, 0x3b, 0x7b, 0xe0, 0x99, 0x8f, 0xc7,
		0x36, 0x4c, 0x7a, 0x51, 0x69, 0x78, 0x38, 0xee, 0xea, 0x63, 0x39, 0xcf, 0xc7, 0x03, 0xb9, 0xd4,
		0x6e, 0xc0, 0x70, 0x7c, 0x4c, 0x18, 0x1b, 0xbf, 0x3a, 0x30, 0xe1, 0x3f, 0x0a, 0x63, 0xc1, 0x45,
		0x4d, 0xa4, 0xf4, 0x47, 0x03, 0x0b, 0x9e, 0xd6, 0xd1, 0x8b, 0xf5, 0x33, 0x7a, 0x85, 0x94, 0x78,
		0x6d, 0x40, 0xbe, 0x04, 0x47, 0x5a, 0x78, 0xe4, 0xc2, 0x7e, 0x13, 0x4c, 0xb6, 0x51, 0x7e, 0x6e,
		0x1c, 0xfa, 0xd0, 0x7d, 0x05, 0xb5, 0x6a, 0xbd, 0xfc, 0xeb, 0xc2, 0x52, 0xb4, 0xcd, 0x5b, 0x7c,
		0xbd, 0x49, 0xa9, 0xc1, 0x6d, 0x45, 0x97, 0x24, 0x4b, 0xb4, 0x04, 0x83, 0x4c, 0x9b, 0xb8, 0x84,
		0x0e, 0xa0, 0x8e, 0x9c, 0x80, 0xfc, 0x9b, 0xc2, 0x36, 0x2d, 0x88, 0xee, 0xb4, 0x99, 0xc0, 0xaf,
		0x59, 0x3a, 0xd7, 0x69, 0x0a, 0xfb, 0xc4, 0xf4, 0x55, 0x09, 0x6e, 0xe9, 0xc2, 0xf7, 0x8f, 0xa5,
		0x51, 0xfd, 0x5d, 0x61, 0xa0, 0xdc, 0x3e, 0x75, 0xb3, 0xaa, 0xaf, 0xc3, 0x41, 0xf9, 0x53, 0x09,
		0x4e, 0xf4, 0xd2, 0x81, 0x1f, 0x47, 0x13, 0xfb, 0xdb, 0x31, 0x38, 0x4a, 0xfb, 0xe6, 0x5f, 0x78,
		0x5d, 0xbf, 0xc1, 0x58, 0x80, 0x09, 0xdb, 0xaa, 0x94, 0xfb, 0xb3, 0x21, 0xe3, 0xb6, 0x55, 0x59,
		0xf4, 0xbb, 0xca, 0x05, 0x98, 0xa8, 0xda, 0x4e, 0x88, 0x4a, 0xd4, 0x5b, 0x1f, 0xe3, 0x55, 0xdb,
		0x59, 0xec, 0xec, 0x70, 0x13, 0xd7, 0x41, 0x31, 0x5e, 0x96, 0x20, 0xd7, 0x4e, 0x78, 0x5c, 0x11,
		0x34, 0x38, 0x1c, 0xd8, 0x0e, 0x08, 0xeb, 0xc2, 0xdd, 0xbd, 0x2c, 0x82, 0x43, 0x53, 0xf5, 0x90,
		0x85, 0x6f, 0xe8, 0x64, 0xfd, 0xbc, 0x04, 0xd3, 0x41, 0x5d, 0x6f, 0x59, 0x62, 0xbc, 0x0e, 0x67,
		0xe8, 0x67, 0x85, 0x2f, 0x6c, 0xc7, 0xf5, 0xeb, 0x74, 0x79, 0xf2, 0x6b, 0x12, 0x1c, 0x6b, 0xcf,
		0xf3, 0xeb, 0xcf, 0x7b, 0xe3, 0x4e, 0x4a, 0x71, 0x7d, 0x17, 0x3f, 0x08, 0x32, 0xb4, 0x99, 0x75,
		0xc3, 0xa8, 0x73, 0x21, 0xc8, 0xcb, 0x30, 0xe1, 0x2b, 0xe3, 0xad, 0x9d, 0x81, 0x84, 0x69, 0xf0,
		0xe4, 0xc1, 0xe1, 0x53, 0xc7, 0x3a, 0xb6, 0x44, 0x90, 0x78, 0x2b, 0x14, 0x41, 0x9e, 0x02, 0xc4,
		0xa8, 0xd1, 0x2d, 0x5e, 0xd1, 0xc6, 0x26, 0x4c, 0x06, 0x4a, 0x79, 0x2b, 0x8f, 0xc0, 0xa0, 0x49,
		0x4b, 0x78, 0x3b, 0x33, 0x9d, 0xdb, 0xa1, 0x60, 0x6e, 0x42, 0x16, 0xfd, 0x3a, 0xf5, 0xed, 0x43,
		0x90, 0xa4, 0x64, 0xd1, 0xaf, 0x48, 0x90, 0x76, 0x15, 0x12, 0x75, 0x7e, 0x0f, 0xa3, 0xed, 0x92,
		0x3e, 0x77, 0xb2, 0x67, 0x78, 0x1e, 0x19, 0x9e, 0x79, 0xfb, 0x7f, 0xf8, 0xf6, 0x7b, 0x63, 0xf7,
		0xa1, 0x93, 0xdd, 0x1e, 0xa4, 0xf0, 0xb6, 0x26, 0x3c, 0xdd, 0xfe, 0x9c, 0xe4, 0x7b, 0xee, 0xf6,
		0x9e, 0xde, 0x9a, 0x15, 0x5c, 0xe6, 0x7b, 0x05, 0xe7, 0x4c, 0x2e, 0x52, 0x26, 0xe7, 0xd0, 0xa3,
		0x7d, 0x32, 0x79, 0xf2, 0xa7, 0x03, 0x2a, 0xfd, 0x33, 0xe8, 0x1b, 0x12, 0x4c, 0xb6, 0x59, 0x81,
		0xa2, 0x87, 0x7a, 0x63, 0xa8, 0x35, 0x04, 0xc9, 0x3d, 0x7c, 0x00, 0x4c, 0xde, 0xab, 0x0d, 0xda,
		0xab, 0x15, 0x74, 0xf1, 0x35, 0xf6, 0xea, 0xa4, 0xcf, 0x9f, 0xa0, 0x77, 0xc6, 0xe0, 0xe6, 0x6e,
		0x8b, 0x3b, 0x34, 0xd7, 0x1b, 0xc3, 0x5d, 0xc2, 0xae, 0x5c, 0xf1, 0xb5, 0x90, 0xe0, 0x9d, 0x7f,
		0x0b, 0xed, 0xfc, 0x13, 0x68, 0xeb, 0xb5, 0x76, 0xde, 0x0b, 0x9f, 0xfc, 0x62, 0xf8, 0x8f, 0xc1,
		0x6b, 0x02, 0x11, 0xd3, 0xa2, 0x65, 0x31, 0xd4, 0xe5, 0x11, 0x9f, 0x0e, 0xeb, 0x37, 0xb9, 0x4a,
		0x3b, 0xf4, 0x53, 0xe8, 0xcd, 0xd7, 0x71, 0x34, 0x4f, 0xfe, 0x74, 0xd0, 0xa6, 0xff, 0x0c, 0xfa,
		0xd9, 0x0e, 0x77, 0x00, 0x22, 0x14, 0xb8, 0xf3, 0xb2, 0x2f, 0x4a, 0x81, 0xbb, 0xac, 0xc1, 0xe4,
		0x7d, 0xda, 0x65, 0x1b, 0x3d, 0x7b, 0x23, 0xbb, 0xdc, 0x76, 0x80, 0xd1, 0x9f, 0x4a, 0x30, 0xd5,
		0x6e, 0xd9, 0x83, 0x1e, 0xee, 0x69, 0xe0, 0xda, 0x4e, 0xe5, 0xc2, 0x41, 0x50, 0xb9, 0x28, 0x2e,
		0x50, 0x51, 0x2c, 0xa0, 0x62, 0x6f, 0xa2, 0xe8, 0x3a, 0xc6, 0xef, 0x8e, 0xc1, 0xb1, 0xae, 0xab,
		0x07, 0x54, 0xec, 0x91, 0xd3, 0x6e, 0x93, 0x78, 0xfe, 0x35, 0xd1, 0xe0, 0xdd, 0x2e, 0xd3, 0x6e,
		0x3f, 0x85, 0x9e, 0xe8, 0xab, 0xdb, 0x54, 0x05, 0x7a, 0x19, 0x66, 0x1b, 0x7d, 0x55, 0x82, 0xd1,
		0x40, 0xc0, 0x8c, 0x4e, 0x75, 0xe7, 0xbb, 0xdd, 0xd2, 0xa4, 0xcb, 0x03, 0x56, 0x9d, 0x23, 0x72,
		0xf9, 0x09, 0xda, 0xb7, 0xc7, 0xd0, 0xda, 0x6b, 0xef, 0x9b, 0x15, 0xe8, 0xc1, 0xd7, 0xbd, 0xd3,
		0x4b, 0x5f, 0xec, 0x89, 0xce, 0xf4, 0x38, 0x20, 0x2d, 0x3e, 0xff, 0xa1, 0xfe, 0x11, 0x0f, 0xe6,
		0x81, 0xba, 0x75, 0xd1, 0x0b, 0x0c, 0xfe, 0x52, 0x82, 0x89, 0x96, 0x36, 0xd1, 0x83, 0x7d, 0x32,
		0x29, 0x3a, 0x77, 0xa6, 0x6f, 0x3c, 0xde, 0xb7, 0x0a, 0xed, 0xdb, 0x5b, 0xd0, 0x9b, 0xae, 0x63,
		0xdf, 0x5a, 0xe2, 0x89, 0x17, 0xc5, 0x91, 0xe2, 0x9d, 0xdd, 0xd9, 0xf4, 0x05, 0xa9, 0xb9, 0x13,
		0xbd, 0x80, 0xf2, 0x4e, 0x9c, 0xa2, 0x9d, 0xb8, 0x1b, 0x9d, 0xe8, 0xad, 0x13, 0x24, 0x6c, 0x45,
		0x1f, 0x90, 0xdc, 0x5b, 0x09, 0x77, 0x45, 0x34, 0xe5, 0x0f, 0x6c, 0xbb, 0xbc, 0x29, 0xd7, 0x26,
		0xde, 0x95, 0x1f, 0xa0, 0x9c, 0xe5, 0xd1, 0xdd, 0x3d, 0x72, 0xc6, 0x82, 0xde, 0x1b, 0xf8, 0x34,
		0xda, 0x8b, 0x43, 0xfe, 0x23, 0x3d, 0xb5, 0xe9, 0xec, 0x3e, 0x77, 0xb0, 0x7f, 0x60, 0x72, 0xf0,
		0xf4, 0x12, 0xf9, 0xc5, 0x04, 0xa0, 0x0d, 0x47, 0xdd, 0xc3, 0x73, 0x4d, 0x67, 0xd7, 0xb0, 0xb4,
		0xe7, 0x98, 0xb3, 0xc2, 0x00, 0x0d, 0xf5, 0x8a, 0xff, 0xa0, 0xb9, 0xeb, 0x85, 0x82, 0xbb, 0x3e,
		0xf5, 0x8d, 0x99, 0x3b, 0x7a, 0x38, 0x12, 0x26, 0xc0, 0x4a, 0xba, 0xa1, 0x5e, 0xe1, 0xa7, 0xcc,
		0x8f, 0x03, 0xa8, 0xf5, 0xba, 0x71, 0xb9, 0x5c, 0xd7, 0x6c, 0x91, 0x4c, 0xd7, 0xf9, 0x05, 0xbc,
		0x56, 0x3e, 0xf3, 0x73, 0x04, 0x7b, 0x59, 0xb3, 0x9d, 0xf3, 0x03, 0x4a, 0x5a, 0x15, 0x1f, 0x68,
		0x03, 0xd2, 0x55, 0xac, 0xef, 0x33, 0xb2, 0x2c, 0xcb, 0xec, 0x81, 0x7e, 0xc8, 0x2e, 0x60, 0x7d,
		0x9f, 0x53, 0x4d, 0x55, 0xf9, 0x6f, 0xf4, 0x14, 0x20, 0xd5, 0x0f, 0xc5, 0xfe, 0x9d, 0x19, 0xbb,
		0x35, 0xdf, 0x79, 0x86, 0x04, 0x08, 0xd3, 0x34, 0xd0, 0x09, 0x35, 0x5c, 0x94, 0x7b, 0x14, 0xd2,
		0x6e, 0x4f, 0xd0, 0x29, 0xff, 0x03, 0x1a, 0xf1, 0xae, 0x0b, 0x5a, 0x01, 0x98, 0x7b, 0x23, 0xa4,
		0x04, 0xcf, 0x07, 0xc1, 0x2f, 0x0e, 0xfb, 0x76, 0x0f, 0x4e, 0x7c, 0x44, 0x82, 0x89, 0x16, 0xb6,
		0x91, 0x0c, 0xd3, 0x73, 0x5b, 0x9b, 0xe7, 0xd7, 0x94, 0xa5, 0xa7, 0xe7, 0x36, 0x97, 0xd6, 0x56,
		0xdb, 0xfd, 0x17, 0xb6, 0x19, 0xb8, 0xa9, 0x0d, 0xcc, 0x42, 0x69, 0xb9, 0xb4, 0x38, 0xb7, 0x59,
		0xca, 0x48, 0xe8, 0x16, 0x38, 0xd6, 0x96, 0x88, 0x0b, 0x12, 0xeb, 0x00, 0xa2, 0x94, 0x5c, 0x90,
		0xf8, 0x8d, 0x9c, 0x93, 0x7f, 0x93, 0xf4, 0xff, 0x5b, 0xa1, 0x1a, 0xd6, 0xb1, 0xad, 0xd9, 0x07,
		0x9b, 0x95, 0x1d, 0x8f, 0xc7, 0x7b, 0x3b, 0x03, 0x7f, 0x4f, 0x02, 0x46, 0x16, 0x59, 0xfb, 0x1b,
		0x8e, 0xea, 0xbc, 0xd6, 0xf5, 0x3a, 0x7a, 0x92, 0xbf, 0xa0, 0xc0, 0x1e, 0x76, 0xf1, 0x9e, 0x2a,
		0x19, 0xe9, 0xfb, 0x9a, 0x0d, 0x7d, 0x71, 0x81, 0x3e, 0x91, 0xc8, 0xde, 0x5d, 0x09, 0x6c, 0x3d,
		0x25, 0x0e, 0xbc, 0xf5, 0x74, 0x01, 0x86, 0x7d, 0x31, 0x47, 0x36, 0x19, 0x71, 0xe1, 0x3a, 0xbc,
		0x8f, 0xec, 0x47, 0x46, 0x3b, 0x70, 0xa8, 0x6d, 0x74, 0x96, 0x1d, 0x3c, 0xe8, 0x36, 0xf5, 0x54,
		0xb3, 0x5d, 0x58, 0xbb, 0x0e, 0xa3, 0x81, 0x48, 0x29, 0x3b, 0x44, 0xe9, 0xf7, 0x73, 0x95, 0x28,
		0x48, 0x00, 0xe5, 0x20, 0x85, 0xaf, 0x98, 0x86, 0xe5, 0xe0, 0x2a, 0x4d, 0x20, 0x49, 0x29, 0xee,
		0xf7, 0x0d, 0xd4, 0xfb, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x92, 0xf6, 0xbe, 0x87, 0xa7,
		0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *CommissionRates) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommissionRates)
	if !ok {
		that2, ok := that.(CommissionRates)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rate.Equal(that1.Rate) {
		return false
	}
	if !this.MaxRate.Equal(that1.MaxRate) {
		return false
	}
	if !this.MaxChangeRate.Equal(that1.MaxChangeRate) {
		return false
	}
	return true
}
func (this *Commission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Commission)
	if !ok {
		that2, ok := that.(Commission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommissionRates.Equal(&that1.CommissionRates) {
		return false
	}
	if !this.UpdateTime.Equal(that1.UpdateTime) {
		return false
	}
	return true
}
func (this *Description) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Description)
	if !ok {
		that2, ok := that.(Description)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Moniker != that1.Moniker {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.SecurityContact != that1.SecurityContact {
		return false
	}
	if this.Details != that1.Details {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnbondingTime != that1.UnbondingTime {
		return false
	}
	if this.MaxValidators != that1.MaxValidators {
		return false
	}
	if this.MaxEntries != that1.MaxEntries {
		return false
	}
	if this.BondDenom != that1.BondDenom {
		return false
	}
	if !this.MinCommissionRate.Equal(that1.MinCommissionRate) {
		return false
	}
	return true
}
func (this *Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pool)
	if !ok {
		that2, ok := that.(Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotBondedTokens.Equal(that1.NotBondedTokens) {
		return false
	}
	if !this.BondedTokens.Equal(that1.BondedTokens) {
		return false
	}
	return true
}
func (m *CommissionRates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommissionRates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommissionRates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxChangeRate.Size()
		i -= size
		if _, err := m.MaxChangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MaxRate.Size()
		i -= size
		if _, err := m.MaxRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Commission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdateTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintStaking(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommissionRates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Governor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Governor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Governor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinSelfDelegation.Size()
		i -= size
		if _, err := m.MinSelfDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnbondingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintStaking(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	if m.UnbondingHeight != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnbondingHeight))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.DelegatorShares.Size()
		i -= size
		if _, err := m.DelegatorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinCommissionRate.Size()
		i -= size
		if _, err := m.MinCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxEntries != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.MaxEntries))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxValidators != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.MaxValidators))
		i--
		dAtA[i] = 0x10
	}
	n6, err6 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UnbondingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintStaking(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BondedTokens.Size()
		i -= size
		if _, err := m.BondedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.NotBondedTokens.Size()
		i -= size
		if _, err := m.NotBondedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommissionRates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rate.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.MaxRate.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.MaxChangeRate.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *Commission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommissionRates.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime)
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func (m *Governor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovStaking(uint64(m.Status))
	}
	if m.Jailed {
		n += 2
	}
	l = m.Tokens.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.DelegatorShares.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.Description.Size()
	n += 1 + l + sovStaking(uint64(l))
	if m.UnbondingHeight != 0 {
		n += 1 + sovStaking(uint64(m.UnbondingHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingTime)
	n += 1 + l + sovStaking(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.MinSelfDelegation.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingTime)
	n += 1 + l + sovStaking(uint64(l))
	if m.MaxValidators != 0 {
		n += 1 + sovStaking(uint64(m.MaxValidators))
	}
	if m.MaxEntries != 0 {
		n += 1 + sovStaking(uint64(m.MaxEntries))
	}
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = m.MinCommissionRate.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NotBondedTokens.Size()
	n += 1 + l + sovStaking(uint64(l))
	l = m.BondedTokens.Size()
	n += 1 + l + sovStaking(uint64(l))
	return n
}

func sovStaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaking(x uint64) (n int) {
	return sovStaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommissionRates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommissionRates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommissionRates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxChangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxChangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Commission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Governor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Governor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Governor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingHeight", wireType)
			}
			m.UnbondingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			m.MaxValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEntries", wireType)
			}
			m.MaxEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBondedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NotBondedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaking = fmt.Errorf("proto: unexpected end of group")
)
