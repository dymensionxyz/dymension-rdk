syntax = "proto3";
package rollapp.sequencers.types;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/staking/v1beta1/staking.proto";

// TODO: import proto files from dymension hub

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/dymensionxyz/rollapp/x/sequencers/types";

// Msg defines the Msg service.
service Msg {
  // this line is used by starport scaffolding # proto/tx/rpc
  // CreateValidator defines a method for creating a new validator.
  rpc CreateSequencer(MsgCreateSequencer) returns (MsgCreateSequencerResponse);
}

// this line is used by starport scaffolding # proto/tx/message

// MsgCreateSequencer defines a SDK message for creating a new sequencer.
message MsgCreateSequencer {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  cosmos.staking.v1beta1.Description description = 1
      [ (gogoproto.nullable) = false ];
  cosmos.staking.v1beta1.CommissionRates commission = 2
      [ (gogoproto.nullable) = false ];
  string min_self_delegation = 3
      [ (gogoproto.moretags) = "yaml:\"min_self_delegation\"" ];
  string delegator_address = 4
      [ (gogoproto.moretags) = "yaml:\"delegator_address\"" ];
  string sequencer_address = 5
      [ (gogoproto.moretags) = "yaml:\"sequencer_address\"" ];
  google.protobuf.Any pubkey = 6
      [ (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey" ];
  cosmos.base.v1beta1.Coin value = 7 [ (gogoproto.nullable) = false ];
}

// MsgCreateSequencerResponse defines the Msg/CreateSequencer response type.
message MsgCreateSequencerResponse {}
