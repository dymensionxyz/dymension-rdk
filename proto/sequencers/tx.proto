syntax = "proto3";
package rollapp.sequencers.types;

import "gogoproto/gogo.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "cosmos/msg/v1/msg.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/dymensionxyz/dymension-rdk/x/sequencers/types";

// Msg defines the Msg service.
service Msg {
    rpc CreateSequencer(MsgCreateSequencer) returns (MsgCreateSequencerResponse);
    rpc UpsertSequencer(MsgUpsertSequencer) returns (MsgUpsertSequencerResponse);
    rpc UpdateSequencer(MsgUpdateSequencer) returns (MsgUpdateSequencerResponse);
}

message MsgCreateSequencer {
    option (cosmos.msg.v1.signer) = "operator";
    // Operator is the bech32-encoded address of the actor sending the update - must be val addr
    string operator = 1;
    // PubKey is a tendermint consensus pub key
    google.protobuf.Any pub_key = 2;
    // Signature is operator signed with the private key of pub_key
    bytes signature = 3;
}

message MsgCreateSequencerResponse {

}

message MsgUpsertSequencer {
    option (cosmos.msg.v1.signer) = "operator";
    // Operator is the bech32-encoded address of the actor sending the update - must be val addr
    string operator = 1;
    // ConsPubKey is a tendermint consensus pub key
    google.protobuf.Any cons_pub_key = 2;
    // RewardAddrBytes is the bytes representation of the sequencer's reward account
    bytes reward_addr_bytes = 3;
}

message MsgUpsertSequencerResponse {

}

message MsgUpdateSequencer {
    option (cosmos.msg.v1.signer) = "operator";
    // Operator is the bech32-encoded address of the actor sending the update - must be val addr
    string operator = 1;
    // Field no.2 is missing
    reserved 2;
    // RewardAddr is a bech32 encoded sdk acc address
    string reward_addr = 3;
}

message MsgUpdateSequencerResponse {

}
